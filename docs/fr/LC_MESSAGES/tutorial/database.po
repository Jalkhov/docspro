# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <victor.levieux@gmail.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-01 02:27-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: fr_FR <victor.levieux@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorial/database.rst:4
msgid "Define and Access the Database"
msgstr "Définir et accéder à la base de données"

#: ../../tutorial/database.rst:6
msgid ""
"The application will use a `SQLite`_ database to store users and posts. "
"Python comes with built-in support for SQLite in the :mod:`sqlite3` module."
msgstr ""
"L'application utilisera une base de données `SQLite`_ pour stocker les "
"utilisateurs et les messages. Python offre un support intégré pour SQLite "
"dans le module :mod:`sqlite3`."

#: ../../tutorial/database.rst:10
msgid ""
"SQLite is convenient because it doesn't require setting up a separate "
"database server and is built-in to Python. However, if concurrent requests "
"try to write to the database at the same time, they will slow down as each "
"write happens sequentially. Small applications won't notice this. Once you "
"become big, you may want to switch to a different database."
msgstr ""
"SQLite est pratique car il ne nécessite pas la mise en place d'un serveur "
"de base de données distinct et est intégré à Python. Cependant, si des "
"requêtes SQL concurrentes essaient d'écrire en même temps dans la base de "
"données, elles ralentiront car chaque écriture se fait de manière "
"séquentielle. Les petites applications ne le remarqueront pas. Une fois que "
"vous aurez atteint une certaine taille, vous voudrez peut-être passer à une "
"autre base de données."

#: ../../tutorial/database.rst:17
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar with "
"it, the SQLite docs describe the `language`_."
msgstr ""
"Le tutoriel n'entre pas dans les détails de SQL. Si vous n'êtes pas "
"familier avec ce langage, les documents de SQLite décrivent le `language`_."

#: ../../tutorial/database.rst:25
msgid "Connect to the Database"
msgstr "Connectez-vous à la base de données"

#: ../../tutorial/database.rst:27
msgid ""
"The first thing to do when working with a SQLite database (and most other "
"Python database libraries) is to create a connection to it. Any queries and "
"operations are performed using the connection, which is closed after the "
"work is finished."
msgstr ""
"La première chose à faire lorsqu'on travaille avec une base de données "
"SQLite (et la plupart des autres bibliothèques de bases de données Python) "
"est de créer une connexion à celle-ci. Toutes les requêtes et opérations "
"SQL sont effectuées en utilisant cette connexion, qui est fermée une fois "
"le travail terminé."

#: ../../tutorial/database.rst:32
msgid ""
"In web applications this connection is typically tied to the request. It is "
"created at some point when handling a request, and closed before the "
"response is sent."
msgstr ""
"Dans les applications Web, cette connexion est généralement liée à la "
"requête HTTP en cours. Elle est créée à un moment donné lors du traitement "
"d'une requête HTTP, et fermée avant l'envoi de la réponse."

#: ../../tutorial/database.rst:36 ../../tutorial/database.rst:120
#: ../../tutorial/database.rst:157
msgid "``flaskr/db.py``"
msgstr "``flaskr/db.py``"

#: ../../tutorial/database.rst:63
msgid ""
":data:`g` is a special object that is unique for each request. It is used "
"to store data that might be accessed by multiple functions during the "
"request. The connection is stored and reused instead of creating a new "
"connection if ``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` est un objet spécial qui est unique pour chaque requête HTTP. Il "
"est utilisé pour stocker les données qui pourraient être accédées par "
"plusieurs fonctions au cours de la requête. La connexion est stockée et "
"réutilisée au lieu de créer une nouvelle connexion si ``get_db`` est appelé "
"une seconde fois dans la même requête."

#: ../../tutorial/database.rst:69
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, "
"there is no application object when writing the rest of your code. "
"``get_db`` will be called when the application has been created and is "
"handling a request, so :data:`current_app` can be used."
msgstr ""
":data:`current_app` est un autre objet spécial qui pointe vers "
"l'application Flask qui traite la requête HTTP. Puisque vous avez utilisé "
"une fabrique d'application, il n'y a pas d'objet application lorsque vous "
"écrivez le reste de votre code. ``get_db`` sera appelé lorsque "
"l'application aura été créée et traitera une requête, donc :data:"
"`current_app` peut être utilisé."

#: ../../tutorial/database.rst:75
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at by "
"the ``DATABASE`` configuration key. This file doesn't have to exist yet, "
"and won't until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` établit une connexion au fichier pointé par la clé "
"de configuration ``DATABASE``. Ce fichier n'a pas besoin d'exister encore, "
"et n'existera pas tant que vous n'aurez pas initialisé la base de données "
"plus tard."

#: ../../tutorial/database.rst:79
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave like "
"dicts. This allows accessing the columns by name."
msgstr ""
":class:`sqlite3.Row` indique à la connexion de retourner des lignes qui se "
"comportent comme des dictionnaires. Cela permet d'accéder aux colonnes par "
"leur nom."

#: ../../tutorial/database.rst:82
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` was "
"set. If the connection exists, it is closed. Further down you will tell "
"your application about the ``close_db`` function in the application factory "
"so that it is called after each request."
msgstr ""
"``close_db`` vérifie si une connexion a été créée en vérifiant si ``g.db`` "
"a été défini. Si la connexion existe, elle est fermée. Plus loin, vous "
"indiquerez à votre application la fonction ``close_db`` dans la fabrique de "
"l'application afin qu'elle soit appelée après chaque requête HTTP."

#: ../../tutorial/database.rst:89
msgid "Create the Tables"
msgstr "Créer les tables"

#: ../../tutorial/database.rst:91
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be "
"created before you can store and retrieve data. Flaskr will store users in "
"the ``user`` table, and posts in the ``post`` table. Create a file with the "
"SQL commands needed to create empty tables:"
msgstr ""
"Dans SQLite, les données sont stockées dans des *tables* et des *colonnes*. "
"Ceux-ci doivent être créés avant que vous puissiez stocker et récupérer des "
"données. Flaskr va stocker les utilisateurs dans la table ``user``, et les "
"messages dans la table ``post``. Créez un fichier avec les commandes SQL "
"nécessaires pour créer des tables vides :"

#: ../../tutorial/database.rst:96
msgid "``flaskr/schema.sql``"
msgstr "``flaskr/schema.sql``"

#: ../../tutorial/database.rst:117
msgid ""
"Add the Python functions that will run these SQL commands to the ``db.py`` "
"file:"
msgstr ""
"Ajoutez les fonctions Python qui exécuteront ces commandes SQL au fichier "
"``db.py`` :"

#: ../../tutorial/database.rst:137
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to the "
"``flaskr`` package, which is useful since you won't necessarily know where "
"that location is when deploying the application later. ``get_db`` returns a "
"database connection, which is used to execute the commands read from the "
"file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` ouvre un fichier relatif au "
"paquet ``flaskr``, ce qui est utile puisque vous ne saurez pas "
"nécessairement où se trouve cet emplacement lors du déploiement ultérieur "
"de l'application. ``get_db`` retourne une connexion à la base de données, "
"qui est utilisée pour exécuter les commandes lues dans le fichier."

#: ../../tutorial/database.rst:143
msgid ""
":func:`click.command` defines a command line command called ``init-db`` "
"that calls the ``init_db`` function and shows a success message to the "
"user. You can read :doc:`/cli` to learn more about writing commands."
msgstr ""
":func:`click.command` définit une commande de ligne de commande appelée "
"``init-db`` qui appelle la fonction ``init_db`` et affiche un message de "
"réussite à l'utilisateur. Vous pouvez lire :doc:`/cli` pour en savoir plus "
"sur l'écriture des commandes."

#: ../../tutorial/database.rst:149
msgid "Register with the Application"
msgstr "S'enregistrer auprès de l'application"

#: ../../tutorial/database.rst:151
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered "
"with the application instance; otherwise, they won't be used by the "
"application. However, since you're using a factory function, that instance "
"isn't available when writing the functions. Instead, write a function that "
"takes an application and does the registration."
msgstr ""
"Les fonctions ``close_db`` et ``init_db_command`` doivent être enregistrées "
"avec l'instance de l'application ; sinon, elles ne seront pas utilisées par "
"l'application. Cependant, puisque vous utilisez une fonction de fabrique, "
"cette instance n'est pas disponible lors de l'écriture des fonctions. Au "
"lieu de cela, écrivez une fonction qui prend une application et effectue "
"l'enregistrement."

#: ../../tutorial/database.rst:164
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells Flask "
"to call that function when cleaning up after returning the response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` indique à "
"Flask d'appeler cette fonction lors du nettoyage après le renvoie de la "
"réponse."

#: ../../tutorial/database.rst:168
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new command "
"that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` ajoute une nouvelle "
"commande qui peut être appelée avec la commande ``flask``."

#: ../../tutorial/database.rst:171
msgid ""
"Import and call this function from the factory. Place the new code at the "
"end of the factory function before returning the app."
msgstr ""
"Importez et appelez cette fonction depuis la fabrique. Placez le nouveau "
"code à la fin de la fonction de la fabrique avant de retourner "
"l'application."

#: ../../tutorial/database.rst:174
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/database.rst:188
msgid "Initialize the Database File"
msgstr "Initialiser le fichier de la base de données"

#: ../../tutorial/database.rst:190
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called "
"using the ``flask`` command, similar to the ``run`` command from the "
"previous page."
msgstr ""
"Maintenant que ``init-db`` a été enregistré avec l'application, il peut "
"être appelé en utilisant la commande ``flask``, similaire à la commande "
"``run`` de la page précédente."

#: ../../tutorial/database.rst:196
msgid ""
"If you're still running the server from the previous page, you can either "
"stop the server, or run this command in a new terminal. If you use a new "
"terminal, remember to change to your project directory and activate the env "
"as described in :doc:`/installation`. You'll also need to set ``FLASK_APP`` "
"and ``FLASK_ENV`` as shown on the previous page."
msgstr ""
"Si vous utilisez toujours le serveur de la page précédente, vous pouvez "
"soit arrêter le serveur, soit exécuter cette commande dans un nouveau "
"terminal. Si vous utilisez un nouveau terminal, n'oubliez pas de vous "
"rendre dans le répertoire de votre projet et d'activer l'environnement "
"virtuel comme décrit dans l\\':doc:`/installation`. Vous devrez également "
"définir ``FLASK_APP`` et ``FLASK_ENV`` comme indiqué sur la page précédente."

#: ../../tutorial/database.rst:203
msgid "Run the ``init-db`` command:"
msgstr "Exécutez la commande ``init-db`` :"

#: ../../tutorial/database.rst:210
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in "
"your project."
msgstr ""
"Il y aura maintenant un fichier ``flaskr.sqlite`` dans le dossier "
"``instance`` de votre projet."

#: ../../tutorial/database.rst:213
msgid "Continue to :doc:`views`."
msgstr "Continuer vers :doc:`views`."
