# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <victor.levieux@gmail.com>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-01 02:27-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: fr_FR <victor.levieux@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorial/blog.rst:4
msgid "Blog Blueprint"
msgstr "*Blueprint* du blog"

#: ../../tutorial/blog.rst:6
msgid ""
"You'll use the same techniques you learned about when writing the "
"authentication blueprint to write the blog blueprint. The blog should list "
"all posts, allow logged in users to create posts, and allow the author of a "
"post to edit or delete it."
msgstr ""
"Vous utiliserez les mêmes techniques que celles que vous avez apprises lors "
"de l'écriture du modèle d'authentification pour écrire le modèle du blog. "
"Le blog doit lister tous les messages, permettre aux utilisateurs connectés "
"de créer des messages et permettre à l'auteur d'un message de le modifier "
"ou de le supprimer."

#: ../../tutorial/blog.rst:11
msgid ""
"As you implement each view, keep the development server running. As you "
"save your changes, try going to the URL in your browser and testing them "
"out."
msgstr ""
"À mesure que vous implémentez chaque vue, laissez le serveur de "
"développement fonctionner. Lorsque vous enregistrez vos modifications, "
"essayez d'aller à l'URL dans votre navigateur et de les tester."

#: ../../tutorial/blog.rst:16
msgid "The Blueprint"
msgstr "Le *blueprint*"

#: ../../tutorial/blog.rst:18
msgid "Define the blueprint and register it in the application factory."
msgstr ""
"Définir le *blueprint* et l'enregistrer dans la fabrique d'applications."

#: ../../tutorial/blog.rst:20 ../../tutorial/blog.rst:76
#: ../../tutorial/blog.rst:142 ../../tutorial/blog.rst:198
#: ../../tutorial/blog.rst:228 ../../tutorial/blog.rst:320
msgid "``flaskr/blog.py``"
msgstr "``flaskr/blog.py``"

#: ../../tutorial/blog.rst:33
msgid ""
"Import and register the blueprint from the factory using :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Place the new code at the "
"end of the factory function before returning the app."
msgstr ""
"Importez et enregistrez le *blueprint* depuis la fabrique en utilisant :"
"meth:`app.register_blueprint() <Flask.register_blueprint>`. Placez le "
"nouveau code à la fin de la fonction de la fabrique avant de retourner "
"l'application."

#: ../../tutorial/blog.rst:37
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/blog.rst:51
msgid ""
"Unlike the auth blueprint, the blog blueprint does not have a "
"``url_prefix``. So the ``index`` view will be at ``/``, the ``create`` view "
"at ``/create``, and so on. The blog is the main feature of Flaskr, so it "
"makes sense that the blog index will be the main index."
msgstr ""
"Contrairement au *blueprint* pour l'authentification, le *blueprint* du "
"blog n'a pas d\\'``url_prefix``. Donc la vue ``index`` sera à ``/``, la vue "
"``create`` à ``/create``, et ainsi de suite. Le blog est la fonctionnalité "
"principale de Flaskr, il est donc logique que l'index du blog soit l'index "
"principal."

#: ../../tutorial/blog.rst:56
msgid ""
"However, the endpoint for the ``index`` view defined below will be ``blog."
"index``. Some of the authentication views referred to a plain ``index`` "
"endpoint. :meth:`app.add_url_rule() <Flask.add_url_rule>` associates the "
"endpoint name ``'index'`` with the ``/`` url so that ``url_for('index')`` "
"or ``url_for('blog.index')`` will both work, generating the same ``/`` URL "
"either way."
msgstr ""
"Cependant, le point de terminaison pour la vue ``index`` définie ci-dessous "
"sera ``blog.index``. Certaines vues d'authentification se référaient à un "
"point de terminaison ``index`` simple. :meth:`app.add_url_rule() <Flask."
"add_url_rule>` associe le nom du point de terminaison ``'index'`` à l'url "
"``/`` de sorte que ``url_for('index')`` ou ``url_for('blog.index')`` "
"fonctionneront tous les deux, générant la même URL ``/`` dans les deux cas."

#: ../../tutorial/blog.rst:63
msgid ""
"In another application you might give the blog blueprint a ``url_prefix`` "
"and define a separate ``index`` view in the application factory, similar to "
"the ``hello`` view. Then the ``index`` and ``blog.index`` endpoints and "
"URLs would be different."
msgstr ""
"Dans une autre application, vous pourriez donner au *blueprint* du blog un "
"``url_prefix`` et définir une vue ``index`` distincte dans la fabrique "
"d'application, similaire à la vue ``hello``. Les URLs et les points de "
"terminaison ``index`` et ``blog.index`` seraient alors différents."

#: ../../tutorial/blog.rst:70
msgid "Index"
msgstr "Index"

#: ../../tutorial/blog.rst:72
msgid ""
"The index will show all of the posts, most recent first. A ``JOIN`` is used "
"so that the author information from the ``user`` table is available in the "
"result."
msgstr ""
"L'index montrera tous les messages, les plus récents en premier. Un "
"``JOIN`` est utilisé pour que les informations sur l'auteur provenant de la "
"table ``user`` soient disponibles dans le résultat."

#: ../../tutorial/blog.rst:89
msgid "``flaskr/templates/blog/index.html``"
msgstr "``flaskr/templates/blog/index.html``"

#: ../../tutorial/blog.rst:121
msgid ""
"When a user is logged in, the ``header`` block adds a link to the "
"``create`` view. When the user is the author of a post, they'll see an "
"\"Edit\" link to the ``update`` view for that post. ``loop.last`` is a "
"special variable available inside `Jinja for loops`_. It's used to display "
"a line after each post except the last one, to visually separate them."
msgstr ""
"Lorsqu'un utilisateur est connecté, le bloc ``header`` ajoute un lien vers "
"la vue ``create``. Lorsque l'utilisateur est l'auteur d'un message, il "
"verra un lien \"Editer\" vers la vue ``update`` de ce message. ``loop."
"last`` est une variable spéciale disponible dans `Jinja for loops`_. Elle "
"est utilisée pour afficher une ligne après chaque message, sauf le dernier, "
"afin de les séparer visuellement."

#: ../../tutorial/blog.rst:132
msgid "Create"
msgstr "Créer"

#: ../../tutorial/blog.rst:134
msgid ""
"The ``create`` view works the same as the auth ``register`` view. Either "
"the form is displayed, or the posted data is validated and the post is "
"added to the database or an error is shown."
msgstr ""
"La vue ``create`` fonctionne de la même manière que la vue ``register`` "
"d'authentification. Soit le formulaire est affiché, soit les données "
"postées sont validées et le message est ajouté à la base de données, soit "
"une erreur est affichée."

#: ../../tutorial/blog.rst:138
msgid ""
"The ``login_required`` decorator you wrote earlier is used on the blog "
"views. A user must be logged in to visit these views, otherwise they will "
"be redirected to the login page."
msgstr ""
"Le décorateur ``login_required`` que vous avez écrit plus tôt est utilisé "
"sur les vues du blog. Un utilisateur doit être connecté pour visiter ces "
"vues, sinon il sera redirigé vers la page de connexion."

#: ../../tutorial/blog.rst:170
msgid "``flaskr/templates/blog/create.html``"
msgstr "``flaskr/templates/blog/create.html``"

#: ../../tutorial/blog.rst:191
msgid "Update"
msgstr "Mise à jour"

#: ../../tutorial/blog.rst:193
msgid ""
"Both the ``update`` and ``delete`` views will need to fetch a ``post`` by "
"``id`` and check if the author matches the logged in user. To avoid "
"duplicating code, you can write a function to get the ``post`` and call it "
"from each view."
msgstr ""
"Les vues ``update`` et ``delete`` devront toutes deux récupérer un ``post`` "
"par ``id`` et vérifier si l'auteur correspond à l'utilisateur connecté. "
"Pour éviter de dupliquer le code, vous pouvez écrire une fonction pour "
"récupérer le ``post`` et l'appeler depuis chaque vue."

#: ../../tutorial/blog.rst:217
msgid ""
":func:`abort` will raise a special exception that returns an HTTP status "
"code. It takes an optional message to show with the error, otherwise a "
"default message is used. ``404`` means \"Not Found\", and ``403`` means "
"\"Forbidden\". (``401`` means \"Unauthorized\", but you redirect to the "
"login page instead of returning that status.)"
msgstr ""
":func:`abort` lèvera une exception spéciale qui renverra un code d'état "
"HTTP. Il prend un message optionnel à afficher avec l'erreur, sinon un "
"message par défaut est utilisé. ``404`` signifie \"Not Found\", et ``403`` "
"signifie \"Forbidden\". (``401`` signifie \"Non autorisé\", mais vous "
"redirigez vers la page de connexion au lieu de renvoyer ce statut)."

#: ../../tutorial/blog.rst:223
msgid ""
"The ``check_author`` argument is defined so that the function can be used "
"to get a ``post`` without checking the author. This would be useful if you "
"wrote a view to show an individual post on a page, where the user doesn't "
"matter because they're not modifying the post."
msgstr ""
"L'argument ``check_author`` est défini pour que la fonction puisse être "
"utilisée pour obtenir un ``post`` sans vérifier l'auteur. Ce serait utile "
"si vous écriviez une vue pour montrer un article individuel sur une page, "
"où l'utilisateur n'a pas d'importance parce qu'il ne modifie pas l'article."

#: ../../tutorial/blog.rst:258
msgid ""
"Unlike the views you've written so far, the ``update`` function takes an "
"argument, ``id``. That corresponds to the ``<int:id>`` in the route. A real "
"URL will look like ``/1/update``. Flask will capture the ``1``, ensure it's "
"an :class:`int`, and pass it as the ``id`` argument. If you don't specify "
"``int:`` and instead do ``<id>``, it will be a string. To generate a URL to "
"the update page, :func:`url_for` needs to be passed the ``id`` so it knows "
"what to fill in: ``url_for('blog.update', id=post['id'])``. This is also in "
"the ``index.html`` file above."
msgstr ""
"Contrairement aux vues que vous avez écrites jusqu'à présent, la fonction "
"``update`` prend un argument, ``id``. Cela correspond au ``<int:id>`` dans "
"l'URL. Une vraie URL ressemblera à ``/1/update``. Flask va capturer le "
"``1``, s'assurer que c'est un :class:`int`, et le passer comme argument "
"``id``. Si vous ne spécifiez pas ``int:`` et faites plutôt ``<id>``, ce "
"sera une chaîne de caractères. Pour générer une URL vers la page pour "
"mettre à jour, il faut fournir à :func:`url_for` l'argument ``id`` pour "
"qu'il sache quoi remplir : ``url_for('blog.update', id=post['id'])``. Ceci "
"est également dans le fichier ``index.html`` ci-dessus."

#: ../../tutorial/blog.rst:268
msgid ""
"The ``create`` and ``update`` views look very similar. The main difference "
"is that the ``update`` view uses a ``post`` object and an ``UPDATE`` query "
"instead of an ``INSERT``. With some clever refactoring, you could use one "
"view and template for both actions, but for the tutorial it's clearer to "
"keep them separate."
msgstr ""
"Les vues ``create`` et ``update`` sont très similaires. La principale "
"différence est que la vue ``update`` utilise un objet ``post`` et une "
"requête ``UPDATE`` au lieu d'une ``INSERT``. Avec une refactorisation "
"intelligente, vous pourriez utiliser une vue et un modèle pour les deux "
"actions, mais pour le tutoriel, il est plus clair de les garder séparés."

#: ../../tutorial/blog.rst:274
msgid "``flaskr/templates/blog/update.html``"
msgstr "``flaskr/templates/blog/update.html``"

#: ../../tutorial/blog.rst:298
msgid ""
"This template has two forms. The first posts the edited data to the current "
"page (``/<id>/update``). The other form contains only a button and "
"specifies an ``action`` attribute that posts to the delete view instead. "
"The button uses some JavaScript to show a confirmation dialog before "
"submitting."
msgstr ""
"Ce modèle a deux formes. Le premier affiche les données modifiées sur la "
"page actuelle (``/<id>/update``). L'autre formulaire ne contient qu'un "
"bouton et spécifie un attribut ``action`` qui affiche la vue de suppression "
"à la place. Le bouton utilise du JavaScript pour afficher une boîte de "
"dialogue de confirmation avant l'envoi."

#: ../../tutorial/blog.rst:304
msgid ""
"The pattern ``{{ request.form['title'] or post['title'] }}`` is used to "
"choose what data appears in the form. When the form hasn't been submitted, "
"the original ``post`` data appears, but if invalid form data was posted you "
"want to display that so the user can fix the error, so ``request.form`` is "
"used instead. :data:`request` is another variable that's automatically "
"available in templates."
msgstr ""
"Le motif ``{{ request.form['title'] or post['title'] }}`` est utilisé pour "
"choisir les données qui apparaissent dans le formulaire. Lorsque le "
"formulaire n'a pas été soumis, les données originales ``post`` "
"apparaissent, mais si des données de formulaire invalides ont été postées, "
"vous voulez les afficher pour que l'utilisateur puisse corriger l'erreur, "
"donc ``request.form`` est utilisé à la place. :data:`request` est une autre "
"variable qui est automatiquement disponible dans les modèles."

#: ../../tutorial/blog.rst:313
msgid "Delete"
msgstr "Supprimer"

#: ../../tutorial/blog.rst:315
msgid ""
"The delete view doesn't have its own template, the delete button is part of "
"``update.html`` and posts to the ``/<id>/delete`` URL. Since there is no "
"template, it will only handle the ``POST`` method and then redirect to the "
"``index`` view."
msgstr ""
"La vue de suppression n'a pas son propre modèle, le bouton de suppression "
"fait partie de ``update.html`` et renvoie à l'URL ``/<id>/delete``. "
"Puisqu'il n'y a pas de modèle, il ne traitera que la méthode ``POST`` et "
"redirigera ensuite vers la vue ``index``."

#: ../../tutorial/blog.rst:332
msgid ""
"Congratulations, you've now finished writing your application! Take some "
"time to try out everything in the browser. However, there's still more to "
"do before the project is complete."
msgstr ""
"Félicitations, vous avez maintenant fini d'écrire votre application ! "
"Prenez le temps de tout essayer dans le navigateur. Cependant, il reste "
"encore beaucoup à faire avant que le projet ne soit complet."

#: ../../tutorial/blog.rst:336
msgid "Continue to :doc:`install`."
msgstr "Passez à :doc:`install`."
