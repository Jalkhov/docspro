# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <victor.levieux@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-01 02:27-0500\n"
"PO-Revision-Date: 2021-07-01 04:15-0500\n"
"Language-Team: fr_FR <victor.levieux@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Victor LEVIEUX <victor.levieux@gmail.com>\n"
"Language: fr\n"
"X-Generator: Poedit 3.0\n"

#: ../../tutorial/views.rst:4
msgid "Blueprints and Views"
msgstr "*Blueprints* et vues"

#: ../../tutorial/views.rst:6
msgid ""
"A view function is the code you write to respond to requests to your "
"application. Flask uses patterns to match the incoming request URL to the "
"view that should handle it. The view returns data that Flask turns into an "
"outgoing response. Flask can also go the other direction and generate a URL "
"to a view based on its name and arguments."
msgstr ""
"Une fonction de vue est le code que vous écrivez pour répondre aux requêtes "
"adressées à votre application. Flask utilise des modèles pour faire "
"correspondre l'URL de la requête entrante à la vue qui doit la traiter. La "
"vue renvoie des données que Flask transforme en une réponse sortante. Flask "
"peut également aller dans l'autre sens et générer une URL vers une vue "
"basée sur son nom et ses arguments."

#: ../../tutorial/views.rst:14
msgid "Create a Blueprint"
msgstr "Créer un *blueprint*"

#: ../../tutorial/views.rst:16
msgid ""
"A :class:`Blueprint` is a way to organize a group of related views and "
"other code. Rather than registering views and other code directly with an "
"application, they are registered with a blueprint. Then the blueprint is "
"registered with the application when it is available in the factory "
"function."
msgstr ""
"Un :class:`Blueprint` est un moyen d'organiser un groupe de vues et "
"d'autres codes connexes. Plutôt que d'enregistrer des vues et d'autres "
"codes directement dans une application, ils sont enregistrés dans un "
"*blueprint*. Le *blueprint* est ensuite enregistré auprès de l'application "
"lorsqu'il est disponible dans la fonction de fabrique."

#: ../../tutorial/views.rst:22
msgid ""
"Flaskr will have two blueprints, one for authentication functions and one "
"for the blog posts functions. The code for each blueprint will go in a "
"separate module. Since the blog needs to know about authentication, you'll "
"write the authentication one first."
msgstr ""
"Flaskr aura deux *blueprints*, un pour les fonctions d'authentification et "
"un pour les fonctions des articles de blog. Le code de chaque *blueprint* "
"sera placé dans un module séparé. Puisque le blog a besoin de connaître "
"l'authentification, vous écrirez le module d'authentification en premier."

#: ../../tutorial/views.rst:27 ../../tutorial/views.rst:79
#: ../../tutorial/views.rst:171 ../../tutorial/views.rst:218
#: ../../tutorial/views.rst:247 ../../tutorial/views.rst:263
msgid "``flaskr/auth.py``"
msgstr "``flaskr/auth.py``"

#: ../../tutorial/views.rst:41
msgid ""
"This creates a :class:`Blueprint` named ``'auth'``. Like the application "
"object, the blueprint needs to know where it's defined, so ``__name__`` is "
"passed as the second argument. The ``url_prefix`` will be prepended to all "
"the URLs associated with the blueprint."
msgstr ""
"Ceci crée un :class:`Blueprint` nommé ``'auth'``. Comme l'objet "
"application, le *blueprint* doit savoir où il est défini, donc ``__name__`` "
"est passé comme deuxième argument. Le préfixe ``url_prefix`` sera ajouté à "
"toutes les URLs associées au *blueprint*."

#: ../../tutorial/views.rst:46
msgid ""
"Import and register the blueprint from the factory using :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Place the new code at the "
"end of the factory function before returning the app."
msgstr ""
"Importez et enregistrez le *blueprint* depuis la fabrique en utilisant :"
"meth:`app.register_blueprint() <Flask.register_blueprint>`. Placez le "
"nouveau code à la fin de la fonction de la fabrique avant de retourner "
"l'application."

#: ../../tutorial/views.rst:50
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/views.rst:62
msgid ""
"The authentication blueprint will have views to register new users and to "
"log in and log out."
msgstr ""
"Le *blueprint* d'authentification comportera des vues permettant "
"d'enregistrer de nouveaux utilisateurs, de se connecter et de se "
"déconnecter."

#: ../../tutorial/views.rst:67
msgid "The First View: Register"
msgstr "La première vue : S'inscrire"

#: ../../tutorial/views.rst:69
msgid ""
"When the user visits the ``/auth/register`` URL, the ``register`` view will "
"return `HTML`_ with a form for them to fill out. When they submit the form, "
"it will validate their input and either show the form again with an error "
"message or create the new user and go to the login page."
msgstr ""
"Lorsque l'utilisateur visite l'URL ``/auth/register``, la vue ``register`` "
"renvoie du `HTML`_ avec un formulaire qu'il doit remplir. Lorsqu'il "
"soumettra le formulaire, il validera son entrée et soit affichera à nouveau "
"le formulaire avec un message d'erreur, soit créera le nouvel utilisateur "
"et ira à la page de connexion."

#: ../../tutorial/views.rst:76
msgid ""
"For now you will just write the view code. On the next page, you'll write "
"templates to generate the HTML form."
msgstr ""
"Pour l'instant, vous allez juste écrire le code de la vue. À la page "
"suivante, vous écrirez des modèles pour générer le formulaire HTML."

#: ../../tutorial/views.rst:111
msgid "Here's what the ``register`` view function is doing:"
msgstr "Voici ce que fait la fonction de vue ``register`` :"

#: ../../tutorial/views.rst:113
msgid ""
":meth:`@bp.route <Blueprint.route>` associates the URL ``/register`` with "
"the ``register`` view function. When Flask receives a request to ``/auth/"
"register``, it will call the ``register`` view and use the return value as "
"the response."
msgstr ""
":meth:`@bp.route <Blueprint.route>` associe l'URL ``/register`` à la "
"fonction de vue ``register``. Lorsque Flask reçoit une requête vers ``/auth/"
"register``, il appelle la vue ``register`` et utilise la valeur de retour "
"comme réponse."

#: ../../tutorial/views.rst:118
msgid ""
"If the user submitted the form, :attr:`request.method <Request.method>` "
"will be ``'POST'``. In this case, start validating the input."
msgstr ""
"Si l'utilisateur a soumis le formulaire, :attr:`request.method <Request."
"method>` sera ``'POST'``. Dans ce cas, commencer à valider l'entrée."

#: ../../tutorial/views.rst:122
msgid ""
":attr:`request.form <Request.form>` is a special type of :class:`dict` "
"mapping submitted form keys and values. The user will input their "
"``username`` and ``password``."
msgstr ""
":attr:`request.form <Request.form>` est un type spécial de :class:`dict` "
"mettant en correspondance les clés et les valeurs du formulaire soumis. "
"L'utilisateur saisira son ``username`` et son ``password``."

#: ../../tutorial/views.rst:126
msgid "Validate that ``username`` and ``password`` are not empty."
msgstr "Valider que ``username`` et ``password`` ne sont pas vides."

#: ../../tutorial/views.rst:128
msgid ""
"Validate that ``username`` is not already registered by querying the "
"database and checking if a result is returned. :meth:`db.execute <sqlite3."
"Connection.execute>` takes a SQL query with ``?`` placeholders for any user "
"input, and a tuple of values to replace the placeholders with. The database "
"library will take care of escaping the values so you are not vulnerable to "
"a *SQL injection attack*."
msgstr ""
"Valider que ``username`` n'est pas déjà enregistré en interrogeant la base "
"de données et en vérifiant si un résultat est retourné. :meth:`db.execute "
"<sqlite3.Connection.execute>` prend une requête SQL avec des espaces "
"réservés ``?`` pour toute entrée utilisateur, et un tuple de valeurs pour "
"remplacer ces espaces réservés. La bibliothèque de base de données se "
"chargera de l'échappement des valeurs afin que vous ne soyez pas vulnérable "
"à une *attaque par injection SQL*."

#: ../../tutorial/views.rst:136
msgid ""
":meth:`~sqlite3.Cursor.fetchone` returns one row from the query. If the "
"query returned no results, it returns ``None``. Later, :meth:`~sqlite3."
"Cursor.fetchall` is used, which returns a list of all results."
msgstr ""
":meth:`~sqlite3.Cursor.fetchone` renvoie une ligne de la requête. Si la "
"requête n'a donné aucun résultat, elle renvoie ``None``. Plus tard, on "
"utilise :meth:`~sqlite3.Cursor.fetchall`, qui renvoie une liste de tous les "
"résultats."

#: ../../tutorial/views.rst:141
msgid ""
"If validation succeeds, insert the new user data into the database. For "
"security, passwords should never be stored in the database directly. "
"Instead, :func:`~werkzeug.security.generate_password_hash` is used to "
"securely hash the password, and that hash is stored. Since this query "
"modifies data, :meth:`db.commit() <sqlite3.Connection.commit>` needs to be "
"called afterwards to save the changes."
msgstr ""
"Si la validation réussit, insérer les nouvelles données de l'utilisateur "
"dans la base de données. Pour des raisons de sécurité, les mots de passe ne "
"doivent jamais être stockés directement dans la base de données. Au lieu de "
"cela, :func:`~werkzeug.security.generate_password_hash` est utilisé pour "
"hacher de manière sécurisée le mot de passe, et ce hash est stocké. Comme "
"cette requête modifie des données, :meth:`db.commit() <sqlite3.Connection."
"commit>` doit être appelé ensuite pour enregistrer les modifications."

#: ../../tutorial/views.rst:149
msgid ""
"After storing the user, they are redirected to the login page. :func:"
"`url_for` generates the URL for the login view based on its name. This is "
"preferable to writing the URL directly as it allows you to change the URL "
"later without changing all code that links to it. :func:`redirect` "
"generates a redirect response to the generated URL."
msgstr ""
"Après avoir enregistré l'utilisateur, il est redirigé vers la page de "
"connexion. :func:`url_for` génère l'URL de la vue de connexion en fonction "
"de son nom. C'est préférable à l'écriture directe de l'URL car cela vous "
"permet de changer l'URL plus tard sans modifier tout le code qui y est "
"lié. :func:`redirect` génère une réponse de redirection vers l'URL générée."

#: ../../tutorial/views.rst:156
msgid ""
"If validation fails, the error is shown to the user. :func:`flash` stores "
"messages that can be retrieved when rendering the template."
msgstr ""
"Si la validation échoue, l'erreur est affichée à l'utilisateur. :func:"
"`flash` stocke les messages qui peuvent être récupérés lors du rendu du "
"modèle."

#: ../../tutorial/views.rst:159
msgid ""
"When the user initially navigates to ``auth/register``, or there was a "
"validation error, an HTML page with the registration form should be shown. :"
"func:`render_template` will render a template containing the HTML, which "
"you'll write in the next step of the tutorial."
msgstr ""
"Lorsque l'utilisateur navigue initialement vers ``auth/register``, ou qu'il "
"y a une erreur de validation, une page HTML avec le formulaire "
"d'enregistrement devrait être affichée. :func:`render_template` rendra un "
"modèle contenant le HTML, que vous écrirez dans la prochaine étape du "
"tutoriel."

#: ../../tutorial/views.rst:167
msgid "Login"
msgstr "Connexion"

#: ../../tutorial/views.rst:169
msgid "This view follows the same pattern as the ``register`` view above."
msgstr "Cette vue suit le même modèle que la vue ``register`` ci-dessus."

#: ../../tutorial/views.rst:199
msgid "There are a few differences from the ``register`` view:"
msgstr "Il y a quelques différences par rapport à la vue ``register`` :"

#: ../../tutorial/views.rst:201
msgid "The user is queried first and stored in a variable for later use."
msgstr ""
"L'utilisateur est d'abord interrogé et stocké dans une variable pour une "
"utilisation ultérieure."

#: ../../tutorial/views.rst:203
msgid ""
":func:`~werkzeug.security.check_password_hash` hashes the submitted "
"password in the same way as the stored hash and securely compares them. If "
"they match, the password is valid."
msgstr ""
":func:`~werkzeug.security.check_password_hash` hache le mot de passe soumis "
"de la même manière que le hash stocké et les compare de manière sécurisée. "
"S'ils correspondent, le mot de passe est valide."

#: ../../tutorial/views.rst:207
msgid ""
":data:`session` is a :class:`dict` that stores data across requests. When "
"validation succeeds, the user's ``id`` is stored in a new session. The data "
"is stored in a *cookie* that is sent to the browser, and the browser then "
"sends it back with subsequent requests. Flask securely *signs* the data so "
"that it can't be tampered with."
msgstr ""
"La :data:`session` est un :class:`dict` qui stocke les données entre les "
"requêtes. Lorsque la validation réussit, l\\'``id`` de l'utilisateur est "
"stocké dans une nouvelle session. Les données sont stockées dans un "
"*cookie* qui est envoyé au navigateur, et le navigateur le renvoie ensuite "
"avec les requêtes suivantes. Flask signe les données de manière sécurisée "
"afin qu'elles ne puissent pas être modifiées."

#: ../../tutorial/views.rst:213
msgid ""
"Now that the user's ``id`` is stored in the :data:`session`, it will be "
"available on subsequent requests. At the beginning of each request, if a "
"user is logged in their information should be loaded and made available to "
"other views."
msgstr ""
"Maintenant que l'identifiant de l'utilisateur est stocké dans la :data:"
"`session`, il sera disponible lors des requêtes suivantes. Au début de "
"chaque requête, si un utilisateur est connecté, ses informations doivent "
"être chargées et mises à la disposition des autres vues."

#: ../../tutorial/views.rst:232
msgid ""
":meth:`bp.before_app_request() <Blueprint.before_app_request>` registers a "
"function that runs before the view function, no matter what URL is "
"requested. ``load_logged_in_user`` checks if a user id is stored in the :"
"data:`session` and gets that user's data from the database, storing it on :"
"data:`g.user <g>`, which lasts for the length of the request. If there is "
"no user id, or if the id doesn't exist, ``g.user`` will be ``None``."
msgstr ""
":meth:`bp.before_app_request() <Blueprint.before_app_request>` enregistre "
"une fonction qui s'exécute avant la fonction de vue, quelle que soit l'URL "
"demandée. ``load_logged_in_user`` vérifie si un id d'utilisateur est stocké "
"dans la :data:`session` et récupère les données de cet utilisateur depuis "
"la base de données, en les stockant sur :data:`g.user <g>`, qui dure le "
"temps de la requête. S'il n'y a pas d'id utilisateur, ou si l'id n'existe "
"pas, ``g.user`` sera ``None``."

#: ../../tutorial/views.rst:242
msgid "Logout"
msgstr "Déconnexion"

#: ../../tutorial/views.rst:244
msgid ""
"To log out, you need to remove the user id from the :data:`session`. Then "
"``load_logged_in_user`` won't load a user on subsequent requests."
msgstr ""
"Pour vous déconnecter, vous devez supprimer l'identifiant de l'utilisateur "
"de la session :data:`session`. Ensuite, ``load_logged_in_user`` ne chargera "
"pas un utilisateur lors des requêtes suivantes."

#: ../../tutorial/views.rst:257
msgid "Require Authentication in Other Views"
msgstr "Exiger l'authentification dans d'autres vues"

#: ../../tutorial/views.rst:259
msgid ""
"Creating, editing, and deleting blog posts will require a user to be logged "
"in. A *decorator* can be used to check this for each view it's applied to."
msgstr ""
"Pour créer, modifier et supprimer des articles de blog, l'utilisateur doit "
"être connecté. Un *décorateur* peut être utilisé pour vérifier cela pour "
"chaque vue à laquelle il est appliqué."

#: ../../tutorial/views.rst:276
msgid ""
"This decorator returns a new view function that wraps the original view "
"it's applied to. The new function checks if a user is loaded and redirects "
"to the login page otherwise. If a user is loaded the original view is "
"called and continues normally. You'll use this decorator when writing the "
"blog views."
msgstr ""
"Ce décorateur renvoie une nouvelle fonction de vue qui englobe la vue "
"originale à laquelle il est appliqué. La nouvelle fonction vérifie si "
"l'utilisateur existe ou alors redirige vers la page de connexion. Si un "
"utilisateur est défini, la vue originale est appelée et continue "
"normalement. Vous utiliserez ce décorateur lors de l'écriture des vues du "
"blog."

#: ../../tutorial/views.rst:283
msgid "Endpoints and URLs"
msgstr "Points de terminaison et URLs"

#: ../../tutorial/views.rst:285
msgid ""
"The :func:`url_for` function generates the URL to a view based on a name "
"and arguments. The name associated with a view is also called the "
"*endpoint*, and by default it's the same as the name of the view function."
msgstr ""
"La fonction :func:`url_for` génère l'URL d'une vue à partir d'un nom et "
"d'arguments. Le nom associé à une vue est également appelé le *point de "
"terminaison*, et par défaut, il est identique au nom de la fonction de vue."

#: ../../tutorial/views.rst:290
msgid ""
"For example, the ``hello()`` view that was added to the app factory earlier "
"in the tutorial has the name ``'hello'`` and can be linked to with "
"``url_for('hello')``. If it took an argument, which you'll see later, it "
"would be linked to using ``url_for('hello', who='World')``."
msgstr ""
"Par exemple, la vue ``hello()`` qui a été ajoutée à la fabrique "
"d'application plus tôt dans le tutoriel a le nom ``'hello'`` et peut être "
"liée avec ``url_for('hello')``. Si elle prenait un argument, ce que vous "
"verrez plus tard, elle serait liée en utilisant ``url_for('hello', "
"who='World')``."

#: ../../tutorial/views.rst:296
msgid ""
"When using a blueprint, the name of the blueprint is prepended to the name "
"of the function, so the endpoint for the ``login`` function you wrote above "
"is ``'auth.login'`` because you added it to the ``'auth'`` blueprint."
msgstr ""
"Lorsque vous utilisez un *blueprint*, le nom du *blueprint* est ajouté au "
"nom de la fonction. Ainsi, le point de terminaison de la fonction ``login`` "
"que vous avez écrite ci-dessus est ``auth.login`` car vous l'avez ajoutée "
"au *blueprint* ``auth``."

#: ../../tutorial/views.rst:301
msgid "Continue to :doc:`templates`."
msgstr "Continuer vers :doc:`templates`."
