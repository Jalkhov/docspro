# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <victor.levieux@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-01 02:27-0500\n"
"PO-Revision-Date: 2021-07-13 01:07-0500\n"
"Language-Team: fr_FR <victor.levieux@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Victor LEVIEUX <victor.levieux@gmail.com>\n"
"Language: fr\n"
"X-Generator: Poedit 3.0\n"

#: ../../errorhandling.rst:2
msgid "Handling Application Errors"
msgstr "Traitement des erreurs d'application"

#: ../../errorhandling.rst:4
#, python-format
msgid ""
"Applications fail, servers fail. Sooner or later you will see an exception "
"in production. Even if your code is 100% correct, you will still see "
"exceptions from time to time. Why? Because everything else involved will "
"fail. Here are some situations where perfectly fine code can lead to server "
"errors:"
msgstr ""
"Les applications échouent, les serveurs échouent. Tôt ou tard, vous verrez "
"une exception en production. Même si votre code est 100% correct, vous "
"verrez toujours des exceptions de temps en temps. Pourquoi ? Parce que tout "
"ce qui est impliqué échoue. Voici quelques situations où un code "
"parfaitement correct peut entraîner des erreurs de serveur :"

#: ../../errorhandling.rst:10
msgid ""
"the client terminated the request early and the application was still "
"reading from the incoming data"
msgstr ""
"le client a mis fin prématurément à la requête et l'application était "
"toujours en train de lire les données entrantes"

#: ../../errorhandling.rst:12
msgid "the database server was overloaded and could not handle the query"
msgstr ""
"le serveur de base de données était surchargé et ne pouvait pas traiter la "
"requête"

#: ../../errorhandling.rst:13
msgid "a filesystem is full"
msgstr "un système de fichiers est plein"

#: ../../errorhandling.rst:14
msgid "a harddrive crashed"
msgstr "un disque dur est tombé en panne"

#: ../../errorhandling.rst:15
msgid "a backend server overloaded"
msgstr "un serveur dorsal surchargé"

#: ../../errorhandling.rst:16
msgid "a programming error in a library you are using"
msgstr "une erreur de programmation dans une bibliothèque que vous utilisez"

#: ../../errorhandling.rst:17
msgid "network connection of the server to another system failed"
msgstr "la connexion réseau du serveur à un autre système a échoué"

#: ../../errorhandling.rst:19
msgid ""
"And that's just a small sample of issues you could be facing. So how do we "
"deal with that sort of problem? By default if your application runs in "
"production mode, and an exception is raised Flask will display a very simple "
"page for you and log the exception to the :attr:`~flask.Flask.logger`."
msgstr ""
"Et ce n'est qu'un petit échantillon des problèmes auxquels vous pourriez "
"être confronté. Alors comment faire face à ce genre de problème ? Par "
"défaut, si votre application fonctionne en mode production, et qu'une "
"exception est levée, Flask affichera une page très simple pour vous et "
"enregistrera l'exception dans le :attr:`~flask.Flask.logger`."

#: ../../errorhandling.rst:24
msgid ""
"But there is more you can do, and we will cover some better setups to deal "
"with errors including custom exceptions and 3rd party tools."
msgstr ""
"Mais vous pouvez faire plus, et nous couvrirons quelques meilleures "
"configurations pour traiter les erreurs, y compris les exceptions "
"personnalisées et les outils tiers."

#: ../../errorhandling.rst:31
msgid "Error Logging Tools"
msgstr "Outils de journalisation des erreurs"

#: ../../errorhandling.rst:33
msgid ""
"Sending error mails, even if just for critical ones, can become overwhelming "
"if enough users are hitting the error and log files are typically never "
"looked at. This is why we recommend using `Sentry <https://sentry.io/>`_ for "
"dealing with application errors. It's available as a source-available "
"project `on GitHub <https://github.com/getsentry/sentry>`_ and is also "
"available as a `hosted version <https://sentry.io/signup/>`_ which you can "
"try for free. Sentry aggregates duplicate errors, captures the full stack "
"trace and local variables for debugging, and sends you mails based on new "
"errors or frequency thresholds."
msgstr ""
"L'envoi de mails d'erreur, même si c'est juste pour les erreurs critiques, "
"peut devenir accablant si suffisamment d'utilisateurs sont affectés par "
"l'erreur et les fichiers journaux ne sont généralement jamais regardés. "
"C'est pourquoi nous recommandons d'utiliser `Sentry <https://sentry.io/>`_ "
"pour traiter les erreurs d'application. Il est disponible en tant que projet "
"disponible en source `sur GitHub <https://github.com/getsentry/sentry>`_ et "
"est également disponible en tant que version `hébergée <https://sentry.io/"
"signup/>`_ que vous pouvez essayer gratuitement. Sentry agrège les erreurs "
"dupliquées, capture la trace complète de la pile et les variables locales "
"pour le débogage, et vous envoie des mails en fonction des nouvelles erreurs "
"ou des seuils de fréquence."

#: ../../errorhandling.rst:44
msgid ""
"To use Sentry you need to install the ``sentry-sdk`` client with extra "
"``flask`` dependencies."
msgstr ""
"Pour utiliser Sentry, vous devez installer le client ``sentry-sdk`` avec des "
"dépendances ``flask`` supplémentaires."

#: ../../errorhandling.rst:51
msgid "And then add this to your Flask app:"
msgstr "Et puis ajoutez ça à votre application Flask :"

#: ../../errorhandling.rst:60
msgid ""
"The ``YOUR_DSN_HERE`` value needs to be replaced with the DSN value you get "
"from your Sentry installation."
msgstr ""
"La valeur ``YOUR_DSN_HERE`` doit être remplacée par la valeur DSN que vous "
"obtenez de votre installation Sentry."

#: ../../errorhandling.rst:63
msgid ""
"After installation, failures leading to an Internal Server Error are "
"automatically reported to Sentry and from there you can receive error "
"notifications."
msgstr ""
"Après l'installation, les échecs conduisant à une erreur interne du serveur "
"sont automatiquement signalés à Sentry et de là, vous pouvez recevoir des "
"notifications d'erreur."

#: ../../errorhandling.rst:67
msgid "See also:"
msgstr "Voir aussi :"

#: ../../errorhandling.rst:69
msgid ""
"Sentry also supports catching errors from a worker queue (RQ, Celery, etc.) "
"in a similar fashion. See the `Python SDK docs <https://docs.sentry.io/"
"platforms/python/>`__ for more information."
msgstr ""
"Sentry supporte également la capture des erreurs d'une file d'attente de "
"travailleur (RQ, Celery, etc.) de façon similaire. Voir les docs `Python SDK "
"<https://docs.sentry.io/platforms/python/>`__ pour plus d'informations."

#: ../../errorhandling.rst:72
msgid ""
"`Getting started with Sentry <https://docs.sentry.io/quickstart/?"
"platform=python>`__"
msgstr ""
"`Démarrer avec Sentry <https://docs.sentry.io/quickstart/?"
"platform=python>`__"

#: ../../errorhandling.rst:73
msgid ""
"`Flask-specific documentation <https://docs.sentry.io/platforms/python/"
"guides/flask/>`__"
msgstr ""
"`Documentation spécifique à Flask <https://docs.sentry.io/platforms/python/"
"guides/flask/>`__"

#: ../../errorhandling.rst:77
msgid "Error Handlers"
msgstr "Gestionnaires d'erreurs"

#: ../../errorhandling.rst:79
msgid ""
"When an error occurs in Flask, an appropriate `HTTP status code <https://"
"developer.mozilla.org/en-US/docs/Web/HTTP/Status>`__ will be returned. "
"400-499 indicate errors with the client's request data, or about the data "
"requested. 500-599 indicate errors with the server or application itself."
msgstr ""
"Lorsqu'une erreur se produit dans Flask, un code d'état `HTTP <https://"
"developer.mozilla.org/en-US/docs/Web/HTTP/Status>`__ approprié sera renvoyé. "
"400-499 indiquent des erreurs avec les données de la requête du client, ou "
"sur les données demandées. 500-599 indiquent des erreurs avec le serveur ou "
"l'application elle-même."

#: ../../errorhandling.rst:85
msgid ""
"You might want to show custom error pages to the user when an error occurs. "
"This can be done by registering error handlers."
msgstr ""
"Vous pouvez souhaiter afficher des pages d'erreur personnalisées à "
"l'utilisateur lorsqu'une erreur se produit. Cela peut être fait en "
"enregistrant des gestionnaires d'erreurs."

#: ../../errorhandling.rst:88
msgid ""
"An error handler is a function that returns a response when a type of error "
"is raised, similar to how a view is a function that returns a response when "
"a request URL is matched. It is passed the instance of the error being "
"handled, which is most likely a :exc:`~werkzeug.exceptions.HTTPException`."
msgstr ""
"Un gestionnaire d'erreur est une fonction qui renvoie une réponse lorsqu'un "
"type d'erreur est levé, de la même manière qu'une vue est une fonction qui "
"renvoie une réponse lorsqu'une URL de requête est trouvée. On lui passe "
"l'instance de l'erreur à gérer, qui est le plus souvent une :exc:`~werkzeug."
"exceptions.HTTPException`."

#: ../../errorhandling.rst:93
msgid ""
"The status code of the response will not be set to the handler's code. Make "
"sure to provide the appropriate HTTP status code when returning a response "
"from a handler."
msgstr ""
"Le code d'état de la réponse ne sera pas défini comme le code du "
"gestionnaire. Veillez à fournir le code d'état HTTP approprié lorsque vous "
"renvoyez une réponse d'un gestionnaire."

#: ../../errorhandling.rst:99
msgid "Registering"
msgstr "Enregistrement"

#: ../../errorhandling.rst:101
msgid ""
"Register handlers by decorating a function with :meth:`~flask.Flask."
"errorhandler`. Or use :meth:`~flask.Flask.register_error_handler` to "
"register the function later. Remember to set the error code when returning "
"the response."
msgstr ""
"Enregistrez les gestionnaires en décorant une fonction avec :meth:`~flask."
"Flask.errorhandler`. Ou utilisez :meth:`~flask.Flask.register_error_handler` "
"pour enregistrer la fonction plus tard. N'oubliez pas de définir le code "
"d'erreur lors du retour de la réponse."

#: ../../errorhandling.rst:115
msgid ""
":exc:`werkzeug.exceptions.HTTPException` subclasses like :exc:`~werkzeug."
"exceptions.BadRequest` and their HTTP codes are interchangeable when "
"registering handlers. (``BadRequest.code == 400``)"
msgstr ""
"Les sous-classes :exc:`werkzeug.exceptions.HTTPException` comme :exc:"
"`~werkzeug.exceptions.BadRequest` et leurs codes HTTP sont interchangeables "
"lors de l'enregistrement des gestionnaires. (``BadRequest.code == 400``)"

#: ../../errorhandling.rst:119
msgid ""
"Non-standard HTTP codes cannot be registered by code because they are not "
"known by Werkzeug. Instead, define a subclass of :class:`~werkzeug."
"exceptions.HTTPException` with the appropriate code and register and raise "
"that exception class."
msgstr ""
"Les codes HTTP non standard ne peuvent pas être enregistrés par le code car "
"ils ne sont pas connus par Werkzeug. Au lieu de cela, définissez une sous-"
"classe de :class:`~werkzeug.exceptions.HTTPException` avec le code approprié "
"et enregistrez et levez cette classe d'exception."

#: ../../errorhandling.rst:134
msgid ""
"Handlers can be registered for any exception class, not just :exc:`~werkzeug."
"exceptions.HTTPException` subclasses or HTTP status codes. Handlers can be "
"registered for a specific class, or for all subclasses of a parent class."
msgstr ""
"Les gestionnaires peuvent être enregistrés pour n'importe quelle classe "
"d'exception, pas seulement pour les sous-classes :exc:`~werkzeug.exceptions."
"HTTPException` ou les codes d'état HTTP. Les gestionnaires peuvent être "
"enregistrés pour une classe spécifique, ou pour toutes les sous-classes "
"d'une classe parente."

#: ../../errorhandling.rst:141
msgid "Handling"
msgstr "Gestion"

#: ../../errorhandling.rst:143
msgid ""
"When building a Flask application you *will* run into exceptions. If some "
"part of your code breaks while handling a request (and you have no error "
"handlers registered), a \"500 Internal Server Error\" (:exc:`~werkzeug."
"exceptions.InternalServerError`) will be returned by default. Similarly, "
"\"404 Not Found\" (:exc:`~werkzeug.exceptions.NotFound`) error will occur if "
"a request is sent to an unregistered route. If a route receives an unallowed "
"request method, a \"405 Method Not Allowed\" (:exc:`~werkzeug.exceptions."
"MethodNotAllowed`) will be raised. These are all subclasses of :class:"
"`~werkzeug.exceptions.HTTPException` and are provided by default in Flask."
msgstr ""
"Lorsque vous construisez une application Flask, vous rencontrerez des "
"exceptions. Si une partie de votre code échoue pendant le traitement d'une "
"requête (et que vous n'avez pas enregistré de gestionnaires d'erreurs), une "
"erreur \"500 Internal Server Error\" (:exc:`~werkzeug.exceptions."
"InternalServerError`) sera retournée par défaut. De même, une erreur \"404 "
"Not Found\" (:exc:`~werkzeug.exceptions.NotFound`) sera renvoyée si une "
"requête est envoyée à une route non enregistrée. Si une route reçoit une "
"méthode de requête non autorisée, une erreur \"405 Method Not Allowed\" (:"
"exc:`~werkzeug.exceptions.MethodNotAllowed`) sera générée. Toutes ces "
"exceptions sont des sous-classes de :class:`~werkzeug.exceptions."
"HTTPException` et sont fournies par défaut dans Flask."

#: ../../errorhandling.rst:154
msgid ""
"Flask gives you to the ability to raise any HTTP exception registered by "
"Werkzeug. However, the default HTTP exceptions return simple exception "
"pages. You might want to show custom error pages to the user when an error "
"occurs. This can be done by registering error handlers."
msgstr ""
"Flask vous donne la possibilité de lever toute exception HTTP enregistrée "
"par Werkzeug. Cependant, les exceptions HTTP par défaut renvoient des pages "
"d'exception simples. Vous pourriez vouloir afficher des pages d'erreur "
"personnalisées à l'utilisateur lorsqu'une erreur se produit. Cela peut être "
"fait en enregistrant des gestionnaires d'erreurs."

#: ../../errorhandling.rst:159
msgid ""
"When Flask catches an exception while handling a request, it is first looked "
"up by code. If no handler is registered for the code, Flask looks up the "
"error by its class hierarchy; the most specific handler is chosen. If no "
"handler is registered, :class:`~werkzeug.exceptions.HTTPException` "
"subclasses show a generic message about their code, while other exceptions "
"are converted to a generic \"500 Internal Server Error\"."
msgstr ""
"Lorsque Flask attrape une exception lors du traitement d'une requête, elle "
"est d'abord recherchée par code. Si aucun gestionnaire n'est enregistré pour "
"le code, Flask recherche l'erreur par sa hiérarchie de classe ; le "
"gestionnaire le plus spécifique est choisi. Si aucun gestionnaire n'est "
"enregistré, les sous-classes :class:`~werkzeug.exceptions.HTTPException` "
"affichent un message générique sur leur code, tandis que les autres "
"exceptions sont converties en un générique \"500 Internal Server Error\"."

#: ../../errorhandling.rst:165
msgid ""
"For example, if an instance of :exc:`ConnectionRefusedError` is raised, and "
"a handler is registered for :exc:`ConnectionError` and :exc:"
"`ConnectionRefusedError`, the more specific :exc:`ConnectionRefusedError` "
"handler is called with the exception instance to generate the response."
msgstr ""
"Par exemple, si une instance de :exc:`ConnectionRefusedError` est levée et "
"qu'un gestionnaire est enregistré pour :exc:`ConnectionError` et :exc:"
"`ConnectionRefusedError`, le gestionnaire plus spécifique :exc:"
"`ConnectionRefusedError` est appelé avec l'instance d'exception pour générer "
"la réponse."

#: ../../errorhandling.rst:170
msgid ""
"Handlers registered on the blueprint take precedence over those registered "
"globally on the application, assuming a blueprint is handling the request "
"that raises the exception. However, the blueprint cannot handle 404 routing "
"errors because the 404 occurs at the routing level before the blueprint can "
"be determined."
msgstr ""
"Les gestionnaires enregistrés sur le *blueprint* sont prioritaires par "
"rapport à ceux enregistrés globalement sur l'application, en supposant qu'un "
"blueprint traite la requête qui soulève l'exception. Cependant, le Blueprint "
"ne peut pas gérer les erreurs de routage 404 car le 404 se produit au niveau "
"du routage avant que le *blueprint* puisse être déterminé."

#: ../../errorhandling.rst:178
msgid "Generic Exception Handlers"
msgstr "Gestionnaires d'exceptions génériques"

#: ../../errorhandling.rst:180
msgid ""
"It is possible to register error handlers for very generic base classes such "
"as ``HTTPException`` or even ``Exception``. However, be aware that these "
"will catch more than you might expect."
msgstr ""
"Il est possible d'enregistrer des gestionnaires d'erreurs pour des classes "
"de base très génériques telles que ``HTTPException`` ou même ``Exception``. "
"Cependant, sachez que ces gestionnaires d'erreurs captureront plus d'erreurs "
"que vous ne le pensez."

#: ../../errorhandling.rst:184
msgid ""
"For example, an error handler for ``HTTPException`` might be useful for "
"turning the default HTML errors pages into JSON. However, this handler will "
"trigger for things you don't cause directly, such as 404 and 405 errors "
"during routing. Be sure to craft your handler carefully so you don't lose "
"information about the HTTP error."
msgstr ""
"Par exemple, un gestionnaire d'erreur pour ``HTTPException`` pourrait être "
"utile pour transformer les pages d'erreurs HTML par défaut en JSON. "
"Cependant, ce gestionnaire se déclenchera pour des choses que vous ne "
"provoquez pas directement, comme les erreurs 404 et 405 pendant le routage. "
"Veillez à bien concevoir votre gestionnaire afin de ne pas perdre les "
"informations relatives à l'erreur HTTP."

#: ../../errorhandling.rst:209
msgid ""
"An error handler for ``Exception`` might seem useful for changing how all "
"errors, even unhandled ones, are presented to the user. However, this is "
"similar to doing ``except Exception:`` in Python, it will capture *all* "
"otherwise unhandled errors, including all HTTP status codes."
msgstr ""
"Un gestionnaire d'erreur pour ``Exception`` peut sembler utile pour changer "
"la façon dont toutes les erreurs, même celles qui ne sont pas gérées, sont "
"présentées à l'utilisateur. Cependant, c'est similaire à l'utilisation de "
"``except Exception:`` en Python, cela capturera *toutes* les erreurs non "
"gérées, y compris tous les codes d'état HTTP."

#: ../../errorhandling.rst:215
msgid ""
"In most cases it will be safer to register handlers for more specific "
"exceptions. Since ``HTTPException`` instances are valid WSGI responses, you "
"could also pass them through directly."
msgstr ""
"Dans la plupart des cas, il sera plus sûr d'enregistrer des gestionnaires "
"pour des exceptions plus spécifiques. Comme les instances de "
"``HTTPException`` sont des réponses WSGI valides, vous pouvez aussi les "
"passer directement."

#: ../../errorhandling.rst:232
msgid ""
"Error handlers still respect the exception class hierarchy. If you register "
"handlers for both ``HTTPException`` and ``Exception``, the ``Exception`` "
"handler will not handle ``HTTPException`` subclasses because it the "
"``HTTPException`` handler is more specific."
msgstr ""
"Les gestionnaires d'erreurs respectent toujours la hiérarchie des classes "
"d'exceptions. Si vous enregistrez des gestionnaires à la fois pour "
"``HTTPException`` et ``Exception``, le gestionnaire ``Exception`` ne "
"traitera pas les sous-classes ``HTTPException`` car le gestionnaire "
"``HTTPException`` est plus spécifique."

#: ../../errorhandling.rst:239
msgid "Unhandled Exceptions"
msgstr "Exceptions non gérées"

#: ../../errorhandling.rst:241
msgid ""
"When there is no error handler registered for an exception, a 500 Internal "
"Server Error will be returned instead. See :meth:`flask.Flask."
"handle_exception` for information about this behavior."
msgstr ""
"Si aucun gestionnaire d'erreur n'est enregistré pour une exception, une "
"erreur de serveur interne 500 sera renvoyée à la place. Voir :meth:`flask."
"Flask.handle_exception` pour des informations sur ce comportement."

#: ../../errorhandling.rst:246
msgid ""
"If there is an error handler registered for ``InternalServerError``, this "
"will be invoked. As of Flask 1.1.0, this error handler will always be passed "
"an instance of ``InternalServerError``, not the original unhandled error."
msgstr ""
"S'il y a un gestionnaire d'erreur enregistré pour ``InternalServerError``, "
"il sera invoqué. Depuis Flask 1.1.0, ce gestionnaire d'erreur recevra "
"toujours une instance de ``InternalServerError``, et non l'erreur originale "
"non gérée."

#: ../../errorhandling.rst:251
msgid "The original error is available as ``e.original_exception``."
msgstr ""
"L'erreur originale est disponible en tant que ``e.original_exception``."

#: ../../errorhandling.rst:253
msgid ""
"An error handler for \"500 Internal Server Error\" will be passed uncaught "
"exceptions in addition to explicit 500 errors. In debug mode, a handler for "
"\"500 Internal Server Error\" will not be used. Instead, the interactive "
"debugger will be shown."
msgstr ""
"Un gestionnaire d'erreur pour \"500 Internal Server Error\" se verra "
"transmettre des exceptions non capturées en plus des erreurs 500 explicites. "
"En mode débogage, un gestionnaire d'erreur pour \"500 Internal Server Error"
"\" ne sera pas utilisé. Au lieu de cela, le débogueur interactif sera "
"affiché."

#: ../../errorhandling.rst:260
msgid "Custom Error Pages"
msgstr "Pages d'erreurs personnalisées"

#: ../../errorhandling.rst:262
msgid ""
"Sometimes when building a Flask application, you might want to raise a :exc:"
"`~werkzeug.exceptions.HTTPException` to signal to the user that something is "
"wrong with the request. Fortunately, Flask comes with a handy :func:`~flask."
"abort` function that aborts a request with a HTTP error from werkzeug as "
"desired. It will also provide a plain black and white error page for you "
"with a basic description, but nothing fancy."
msgstr ""
"Parfois, lors de la construction d'une application Flask, vous pouvez "
"vouloir lever une :exc:`~werkzeug.exceptions.HTTPException` pour signaler à "
"l'utilisateur que quelque chose ne va pas avec la requête. Heureusement, "
"Flask dispose d'une fonction :func:`~flask.abort` très pratique qui permet "
"d'interrompre une requête avec une erreur HTTP de werkzeug comme souhaité. "
"Elle vous fournira également une page d'erreur en noir et blanc avec une "
"description de base, mais rien d'extraordinaire."

#: ../../errorhandling.rst:269
msgid ""
"Depending on the error code it is less or more likely for the user to "
"actually see such an error."
msgstr ""
"En fonction du code d'erreur, il est plus ou moins probable que "
"l'utilisateur voit effectivement une telle erreur."

#: ../../errorhandling.rst:272
msgid ""
"Consider the code below, we might have a user profile route, and if the user "
"fails to pass a username we can raise a \"400 Bad Request\". If the user "
"passes a username and we can't find it, we raise a \"404 Not Found\"."
msgstr ""
"Considérez le code ci-dessous, nous pourrions avoir une route de profil "
"d'utilisateur, et si l'utilisateur ne parvient pas à fournir un nom "
"d'utilisateur, nous pouvons générer un \"400 Bad Request\". Si l'utilisateur "
"fournit un nom d'utilisateur et que nous ne pouvons pas le trouver, nous "
"envoyons un message \"404 Not Found\"."

#: ../../errorhandling.rst:296
msgid ""
"Here is another example implementation for a \"404 Page Not Found\" "
"exception:"
msgstr ""
"Voici un autre exemple de mise en œuvre d'une exception \"404 Page Not Found"
"\" :"

#: ../../errorhandling.rst:307 ../../errorhandling.rst:361
msgid "When using :doc:`/patterns/appfactories`:"
msgstr "Lorsque vous utilisez :doc:`/patterns/appfactories` :"

#: ../../errorhandling.rst:321
msgid "An example template might be this:"
msgstr "Un exemple de modèle pourrait être le suivant :"

#: ../../errorhandling.rst:335
msgid "Further Examples"
msgstr "Autres exemples"

#: ../../errorhandling.rst:337
msgid ""
"The above examples wouldn't actually be an improvement on the default "
"exception pages. We can create a custom 500.html template like this:"
msgstr ""
"Les exemples ci-dessus ne seraient pas vraiment une amélioration des pages "
"d'exception par défaut. Nous pouvons créer un modèle 500.html personnalisé "
"comme ceci :"

#: ../../errorhandling.rst:350
msgid ""
"It can be implemented by rendering the template on \"500 Internal Server "
"Error\":"
msgstr ""
"Il peut être mis en œuvre en rendant le modèle sur \"500 Internal Server "
"Error\" :"

#: ../../errorhandling.rst:375
msgid "When using :doc:`/blueprints`:"
msgstr "Lorsque vous utilisez :doc:`/blueprints` :"

#: ../../errorhandling.rst:393
msgid "Blueprint Error Handlers"
msgstr "Gestionnaires d'erreurs des *blueprints*"

#: ../../errorhandling.rst:395
msgid ""
"In :doc:`/blueprints`, most error handlers will work as expected. However, "
"there is a caveat concerning handlers for 404 and 405 exceptions. These "
"error handlers are only invoked from an appropriate ``raise`` statement or a "
"call to ``abort`` in another of the blueprint's view functions; they are not "
"invoked by, e.g., an invalid URL access."
msgstr ""
"Dans :doc:`/blueprints`, la plupart des gestionnaires d'erreurs fonctionnent "
"comme prévu. Cependant, il y a une réserve concernant les gestionnaires des "
"exceptions 404 et 405. Ces gestionnaires d'erreurs ne sont invoqués qu'à "
"partir d'une déclaration appropriée ``raise`` ou d'un appel à ``abort`` dans "
"une autre fonction de vue du *blueprint* ; ils ne sont pas invoqués par, par "
"exemple, un accès URL invalide."

#: ../../errorhandling.rst:401
msgid ""
"This is because the blueprint does not \"own\" a certain URL space, so the "
"application instance has no way of knowing which blueprint error handler it "
"should run if given an invalid URL. If you would like to execute different "
"handling strategies for these errors based on URL prefixes, they may be "
"defined at the application level using the ``request`` proxy object."
msgstr ""
"C'est parce que le *blueprint* ne \"possède\" pas un certain espace d'URL, "
"donc l'instance de l'application n'a aucun moyen de savoir quel gestionnaire "
"d'erreur de *blueprint* elle doit exécuter si elle reçoit une URL invalide. "
"Si vous souhaitez exécuter des stratégies de traitement différentes pour ces "
"erreurs en fonction des préfixes d'URL, elles peuvent être définies au "
"niveau de l'application en utilisant l'objet proxy ``request``."

#: ../../errorhandling.rst:436
msgid "Returning API Errors as JSON"
msgstr "Retourner les erreurs d'API en JSON"

#: ../../errorhandling.rst:438
msgid ""
"When building APIs in Flask, some developers realise that the built-in "
"exceptions are not expressive enough for APIs and that the content type of :"
"mimetype:`text/html` they are emitting is not very useful for API consumers."
msgstr ""
"Lors de la création d'API dans Flask, certains développeurs se rendent "
"compte que les exceptions intégrées ne sont pas assez expressives pour les "
"API et que le type de contenu :mimetype:`text/html` qu'elles émettent n'est "
"pas très utile pour les utilisateurs d'API."

#: ../../errorhandling.rst:442
msgid ""
"Using the same techniques as above and :func:`~flask.json.jsonify` we can "
"return JSON responses to API errors.  :func:`~flask.abort` is called with a "
"``description`` parameter. The error handler will use that as the JSON error "
"message, and set the status code to 404."
msgstr ""
"En utilisant les mêmes techniques que ci-dessus et :func:`~flask.json."
"jsonify`, nous pouvons renvoyer des réponses JSON aux erreurs d'API. :func:"
"`~flask.abort` est appelé avec un paramètre ``description``. Le gestionnaire "
"d'erreur l'utilisera comme message d'erreur JSON, et définira le code d'état "
"à 404."

#: ../../errorhandling.rst:464
msgid ""
"We can also create custom exception classes. For instance, we can introduce "
"a new custom exception for an API that can take a proper human readable "
"message, a status code for the error and some optional payload to give more "
"context for the error."
msgstr ""
"Nous pouvons également créer des classes d'exceptions personnalisées. Par "
"exemple, nous pouvons introduire une nouvelle exception personnalisée pour "
"une API qui peut prendre un message lisible par l'homme, un code d'état pour "
"l'erreur et des données utiles facultatives pour donner plus de contexte à "
"l'erreur."

#: ../../errorhandling.rst:469
msgid "This is a simple example:"
msgstr "Il s'agit d'un exemple simple :"

#: ../../errorhandling.rst:508
msgid ""
"A view can now raise that exception with an error message. Additionally some "
"extra payload can be provided as a dictionary through the `payload` "
"parameter."
msgstr ""
"Une vue peut maintenant lever cette exception avec un message d'erreur. De "
"plus, des données supplémentaires peuvent être fournies sous forme de "
"dictionnaire via le paramètre `payload`."

#: ../../errorhandling.rst:514
msgid "Logging"
msgstr "Journalisation"

#: ../../errorhandling.rst:516
msgid ""
"See :doc:`/logging` for information about how to log exceptions, such as by "
"emailing them to admins."
msgstr ""
"Voir :doc:`/logging` pour des informations sur la façon d'enregistrer les "
"exceptions, par exemple en les envoyant par courriel aux administrateurs."

#: ../../errorhandling.rst:521
msgid "Debugging"
msgstr "Débogage"

#: ../../errorhandling.rst:523
msgid ""
"See :doc:`/debugging` for information about how to debug errors in "
"development and production."
msgstr ""
"Voir :doc:`/debugging` pour des informations sur la façon de déboguer les "
"erreurs en développement et en production."
