# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# Komeil Parseh <ahmdparsh129@gmail.com>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"Language: xd\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0\n"

#: ../../extensiondev.rst:2
msgid "Flask Extension Development"
msgstr "توسعه افزونه فلاسک"

#: ../../extensiondev.rst:6
msgid ""
"Extensions are extra packages that add functionality to a Flask application."
" While `PyPI`_ contains many Flask extensions, you may not find one that "
"fits your need. If this is the case, you can create your own, and publish it"
" for others to use as well."
msgstr ""

#: ../../extensiondev.rst:11
msgid ""
"This guide will show how to create a Flask extension, and some of the common"
" patterns and requirements involved. Since extensions can do anything, this "
"guide won't be able to cover every possibility."
msgstr ""

#: ../../extensiondev.rst:15
msgid ""
"The best ways to learn about extensions are to look at how other extensions "
"you use are written, and discuss with others. Discuss your design ideas with"
" others on our `Discord Chat`_ or `GitHub Discussions`_."
msgstr ""

#: ../../extensiondev.rst:20
msgid ""
"The best extensions share common patterns, so that anyone familiar with "
"using one extension won't feel completely lost with another. This can only "
"work if collaboration happens early."
msgstr ""

#: ../../extensiondev.rst:26
msgid "Naming"
msgstr ""

#: ../../extensiondev.rst:28
msgid ""
"A Flask extension typically has ``flask`` in its name as a prefix or suffix."
" If it wraps another library, it should include the library name as well. "
"This makes it easy to search for extensions, and makes their purpose "
"clearer."
msgstr ""

#: ../../extensiondev.rst:33
msgid ""
"A general Python packaging recommendation is that the install name from the "
"package index and the name used in ``import`` statements should be related. "
"The import name is lowercase, with words separated by underscores (``_``). "
"The install name is either lower case or title case, with words separated by"
" dashes (``-``). If it wraps another library, prefer using the same case as "
"that library's name."
msgstr ""

#: ../../extensiondev.rst:40
msgid "Here are some example install and import names:"
msgstr ""

#: ../../extensiondev.rst:42
msgid "``Flask-Name`` imported as ``flask_name``"
msgstr ""

#: ../../extensiondev.rst:43
msgid "``flask-name-lower`` imported as ``flask_name_lower``"
msgstr ""

#: ../../extensiondev.rst:44
msgid "``Flask-ComboName`` imported as ``flask_comboname``"
msgstr ""

#: ../../extensiondev.rst:45
msgid "``Name-Flask`` imported as ``name_flask``"
msgstr ""

#: ../../extensiondev.rst:49
msgid "The Extension Class and Initialization"
msgstr ""

#: ../../extensiondev.rst:51
msgid ""
"All extensions will need some entry point that initializes the extension "
"with the application. The most common pattern is to create a class that "
"represents the extension's configuration and behavior, with an ``init_app`` "
"method to apply the extension instance to the given application instance."
msgstr ""

#: ../../extensiondev.rst:67
msgid ""
"It is important that the app is not stored on the extension, don't do "
"``self.app = app``. The only time the extension should have direct access to"
" an app is during ``init_app``, otherwise it should use :data:`current_app`."
msgstr ""

#: ../../extensiondev.rst:72
msgid ""
"This allows the extension to support the application factory pattern, avoids"
" circular import issues when importing the extension instance elsewhere in a"
" user's code, and makes testing with different configurations easier."
msgstr ""

#: ../../extensiondev.rst:86
msgid ""
"Above, the ``hello`` extension instance exists independently of the "
"application. This means that other modules in a user's project can do ``from"
" project import hello`` and use the extension in blueprints before the app "
"exists."
msgstr ""

#: ../../extensiondev.rst:91
msgid ""
"The :attr:`Flask.extensions` dict can be used to store a reference to the "
"extension on the application, or some other state specific to the "
"application. Be aware that this is a single namespace, so use a name unique "
"to your extension, such as the extension's name without the \"flask\" "
"prefix."
msgstr ""

#: ../../extensiondev.rst:99
msgid "Adding Behavior"
msgstr ""

#: ../../extensiondev.rst:101
msgid ""
"There are many ways that an extension can add behavior. Any setup methods "
"that are available on the :class:`Flask` object can be used during an "
"extension's ``init_app`` method."
msgstr ""

#: ../../extensiondev.rst:105
msgid ""
"A common pattern is to use :meth:`~Flask.before_request` to initialize some "
"data or a connection at the beginning of each request, then "
":meth:`~Flask.teardown_request` to clean it up at the end. This can be "
"stored on :data:`g`, discussed more below."
msgstr ""

#: ../../extensiondev.rst:110
msgid ""
"A more lazy approach is to provide a method that initializes and caches the "
"data or connection. For example, a ``ext.get_db`` method could create a "
"database connection the first time it's called, so that a view that doesn't "
"use the database doesn't create a connection."
msgstr ""

#: ../../extensiondev.rst:115
msgid ""
"Besides doing something before and after every view, your extension might "
"want to add some specific views as well. In this case, you could define a "
":class:`Blueprint`, then call :meth:`~Flask.register_blueprint` during "
"``init_app`` to add the blueprint to the app."
msgstr ""

#: ../../extensiondev.rst:122
msgid "Configuration Techniques"
msgstr ""

#: ../../extensiondev.rst:124
msgid ""
"There can be multiple levels and sources of configuration for an extension. "
"You should consider what parts of your extension fall into each one."
msgstr ""

#: ../../extensiondev.rst:128
msgid ""
"Configuration per application instance, through ``app.config`` values. This "
"is configuration that could reasonably change for each deployment of an "
"application. A common example is a URL to an external resource, such as a "
"database. Configuration keys should start with the extension's name so that "
"they don't interfere with other extensions."
msgstr ""

#: ../../extensiondev.rst:134
msgid ""
"Configuration per extension instance, through ``__init__`` arguments. This "
"configuration usually affects how the extension is used, such that it "
"wouldn't make sense to change it per deployment."
msgstr ""

#: ../../extensiondev.rst:138
msgid ""
"Configuration per extension instance, through instance attributes and "
"decorator methods. It might be more ergonomic to assign to ``ext.value``, or"
" use a ``@ext.register`` decorator to register a function, after the "
"extension instance has been created."
msgstr ""

#: ../../extensiondev.rst:142
msgid ""
"Global configuration through class attributes. Changing a class attribute "
"like ``Ext.connection_class`` can customize default behavior without making "
"a subclass. This could be combined per-extension configuration to override "
"defaults."
msgstr ""

#: ../../extensiondev.rst:146
msgid ""
"Subclassing and overriding methods and attributes. Making the API of the "
"extension itself something that can be overridden provides a very powerful "
"tool for advanced customization."
msgstr ""

#: ../../extensiondev.rst:150
msgid "The :class:`~flask.Flask` object itself uses all of these techniques."
msgstr ""

#: ../../extensiondev.rst:152
msgid ""
"It's up to you to decide what configuration is appropriate for your "
"extension, based on what you need and what you want to support."
msgstr ""

#: ../../extensiondev.rst:155
msgid ""
"Configuration should not be changed after the application setup phase is "
"complete and the server begins handling requests. Configuration is global, "
"any changes to it are not guaranteed to be visible to other workers."
msgstr ""

#: ../../extensiondev.rst:162
msgid "Data During a Request"
msgstr ""

#: ../../extensiondev.rst:164
msgid ""
"When writing a Flask application, the :data:`~flask.g` object is used to "
"store information during a request. For example the :doc:`tutorial "
"<tutorial/database>` stores a connection to a SQLite database as ``g.db``. "
"Extensions can also use this, with some care. Since ``g`` is a single global"
" namespace, extensions must use unique names that won't collide with user "
"data. For example, use the extension name as a prefix, or as a namespace."
msgstr ""

#: ../../extensiondev.rst:182
msgid ""
"The data in ``g`` lasts for an application context. An application context "
"is active when a request context is, or when a CLI command is run. If you're"
" storing something that should be closed, use "
":meth:`~flask.Flask.teardown_appcontext` to ensure that it gets closed when "
"the application context ends. If it should only be valid during a request, "
"or would not be used in the CLI outside a reqeust, use "
":meth:`~flask.Flask.teardown_request`."
msgstr ""

#: ../../extensiondev.rst:192
msgid "Views and Models"
msgstr ""

#: ../../extensiondev.rst:194
msgid ""
"Your extension views might want to interact with specific models in your "
"database, or some other extension or data connected to your application. For"
" example, let's consider a ``Flask-SimpleBlog`` extension that works with "
"Flask-SQLAlchemy to provide a ``Post`` model and views to write and read "
"posts."
msgstr ""

#: ../../extensiondev.rst:200
msgid ""
"The ``Post`` model needs to subclass the Flask-SQLAlchemy ``db.Model`` "
"object, but that's only available once you've created an instance of that "
"extension, not when your extension is defining its views. So how can the "
"view code, defined before the model exists, access the model?"
msgstr ""

#: ../../extensiondev.rst:205
msgid ""
"One method could be to use :doc:`views`. During ``__init__``, create the "
"model, then create the views by passing the model to the view class's "
":meth:`~views.View.as_view` method."
msgstr ""

#: ../../extensiondev.rst:235
msgid ""
"Another technique could be to use an attribute on the extension, such as "
"``self.post_model`` from above. Add the extension to ``app.extensions`` in "
"``init_app``, then access "
"``current_app.extensions[\"simple_blog\"].post_model`` from views."
msgstr ""

#: ../../extensiondev.rst:240
msgid ""
"You may also want to provide base classes so that users can provide their "
"own ``Post`` model that conforms to the API your extension expects. So they "
"could implement ``class Post(blog.BasePost)``, then set it as "
"``blog.post_model``."
msgstr ""

#: ../../extensiondev.rst:245
msgid ""
"As you can see, this can get a bit complex. Unfortunately, there's no "
"perfect solution here, only different strategies and tradeoffs depending on "
"your needs and how much customization you want to offer. Luckily, this sort "
"of resource dependency is not a common need for most extensions. Remember, "
"if you need help with design, ask on our `Discord Chat`_ or `GitHub "
"Discussions`_."
msgstr ""

#: ../../extensiondev.rst:254
msgid "Recommended Extension Guidelines"
msgstr ""

#: ../../extensiondev.rst:256
msgid ""
"Flask previously had the concept of \"approved extensions\", where the Flask"
" maintainers evaluated the quality, support, and compatibility of the "
"extensions before listing them. While the list became too difficult to "
"maintain over time, the guidelines are still relevant to all extensions "
"maintained and developed today, as they help the Flask ecosystem remain "
"consistent and compatible."
msgstr ""

#: ../../extensiondev.rst:263
msgid ""
"An extension requires a maintainer. In the event an extension author would "
"like to move beyond the project, the project should find a new maintainer "
"and transfer access to the repository, documentation, PyPI, and any other "
"services. The `Pallets-Eco`_ organization on GitHub allows for community "
"maintenance with oversight from the Pallets maintainers."
msgstr ""

#: ../../extensiondev.rst:269
msgid ""
"The naming scheme is *Flask-ExtensionName* or *ExtensionName-Flask*. It must"
" provide exactly one package or module named ``flask_extension_name``."
msgstr ""
"طرح نامگذاری *Flask-نام‌افزونه* یا *نام‌افزونه-Flask* است. باید دقیقاً یک "
"بسته یا ماژول به نام ``نام_افزونه_flask`` ارائه دهد."

#: ../../extensiondev.rst:272
#, fuzzy
msgid ""
"The extension must use an open source license. The Python web ecosystem "
"tends to prefer BSD or MIT. It must be open source and publicly available."
msgstr ""
"افزونه باید دارای مجوز BSD یا MIT و همچنین منبع باز و در دسترس عموم باشد."

#: ../../extensiondev.rst:275
msgid "The extension's API must have the following characteristics:"
msgstr "API افزونه باید دارای ویژگی های زیر باشد:"

#: ../../extensiondev.rst:277
msgid ""
"It must support multiple applications running in the same Python process. "
"Use ``current_app`` instead of ``self.app``, store configuration and state "
"per application instance."
msgstr ""
"باید از چندین برنامه در حال اجرا در یک فرآیند پایتون پشتیبانی کند. به جای "
"``self.app`` از ``current_app`` استفاده کنید، پیکربندی و وضعیت را در هر "
"نمونه برنامه ذخیره کنید."

#: ../../extensiondev.rst:280
msgid ""
"It must be possible to use the factory pattern for creating applications. "
"Use the ``ext.init_app()`` pattern."
msgstr ""
"باید امکان استفاده از الگوی کارخانه برای ایجاد برنامه ها وجود داشته باشد. از"
" الگوی ``ext.init_app()`` استفاده کنید."

#: ../../extensiondev.rst:283
#, fuzzy
msgid ""
"From a clone of the repository, an extension with its dependencies must be "
"installable in editable mode with ``pip install -e .``."
msgstr ""
"از یک کلون مخزن، یک افزونه با وابستگی های آن باید با ``pip install -e .`` "
"قابل نصب باشد."

#: ../../extensiondev.rst:285
msgid ""
"It must ship tests that can be invoked with a common tool like ``tox -e "
"py``, ``nox -s test`` or ``pytest``. If not using ``tox``, the test "
"dependencies should be specified in a requirements file. The tests must be "
"part of the sdist distribution."
msgstr ""

#: ../../extensiondev.rst:289
msgid ""
"A link to the documentation or project website must be in the PyPI metadata "
"or the readme. The documentation should use the Flask theme from the "
"`Official Pallets Themes`_."
msgstr ""

#: ../../extensiondev.rst:292
msgid ""
"The extension's dependencies should not use upper bounds or assume any "
"particular version scheme, but should use lower bounds to indicate minimum "
"compatibility support. For example, ``sqlalchemy>=1.4``."
msgstr ""

#: ../../extensiondev.rst:296
msgid ""
"Indicate the versions of Python supported using "
"``python_requires=\">=version\"``. Flask itself supports Python >=3.7 as of "
"December 2021, but this will update over time."
msgstr ""

#~ msgid ""
#~ "Flask, being a microframework, often requires some repetitive steps to get a"
#~ " third party library working. Many such extensions are already available on "
#~ "`PyPI`_."
#~ msgstr ""
#~ "فلاسک که یک میکروفریمورک است، اغلب به چند مرحله تکراری نیاز دارد تا یک "
#~ "کتابخانه شخص ثالث کار کند. بسیاری از چنین افزونه ها در حال حاضر در  `PyPI`_ "
#~ "در دسترس هستند."

#~ msgid ""
#~ "If you want to create your own Flask extension for something that does not "
#~ "exist yet, this guide to extension development will help you get your "
#~ "extension running in no time and to feel like users would expect your "
#~ "extension to behave."
#~ msgstr ""
#~ "اگر می خواهید افزونه فلاسک خود را برای چیزی که هنوز وجود ندارد ایجاد کنید، "
#~ "این راهنمای توسعه افزونه به شما کمک می کند تا افزونه خود را در کوتاه ترین "
#~ "زمان اجرا کنید و احساس کنید که کاربران انتظار دارند افزونه شما رفتار کند."

#~ msgid "Anatomy of an Extension"
#~ msgstr "آناتومی یک افزونه"

#~ msgid ""
#~ "Extensions are all located in a package called ``flask_something`` where "
#~ "\"something\" is the name of the library you want to bridge.  So for example"
#~ " if you plan to add support for a library named `simplexml` to Flask, you "
#~ "would name your extension's package ``flask_simplexml``."
#~ msgstr ""
#~ "افزونه ها همه در بسته‌ای به نام ``flask_something`` قرار دارند که در آن "
#~ "«something» نام کتابخانه‌ای است که می‌خواهید پل بزنید. بنابراین، برای مثال، "
#~ "اگر قصد دارید برای کتابخانه‌ای به نام `simplexml` به فلاسک پشتیبانی اضافه "
#~ "کنید، نام بسته افزونه خود را ``flask_simplexml`` بگذارید."

#~ msgid ""
#~ "The name of the actual extension (the human readable name) however would be "
#~ "something like \"Flask-SimpleXML\".  Make sure to include the name \"Flask\""
#~ " somewhere in that name and that you check the capitalization. This is how "
#~ "users can then register dependencies to your extension in their "
#~ ":file:`setup.py` files."
#~ msgstr ""
#~ "با این حال، نام افزونه واقعی (نام قابل خواندن برای انسان) چیزی شبیه «Flask-"
#~ "SimpleXML» خواهد بود. مطمئن شوید که نام «Flask» را در جایی در آن نام وارد "
#~ "کرده اید و حروف بزرگ را بررسی کنید. بدین ترتیب کاربران می توانند وابستگی "
#~ "هایی را به افزونه شما در فایل های :file:`setup.py` خود ثبت کنند."

#~ msgid ""
#~ "But what do extensions look like themselves?  An extension has to ensure "
#~ "that it works with multiple Flask application instances at once.  This is a "
#~ "requirement because many people will use patterns like the "
#~ ":doc:`/patterns/appfactories` pattern to create their application as needed "
#~ "to aid unittests and to support multiple configurations. Because of that it "
#~ "is crucial that your application supports that kind of behavior."
#~ msgstr ""
#~ "اما افزونه ها خودش چه شکلی هستند؟ یک افزونه باید اطمینان حاصل کند که با "
#~ "چندین نمونه برنامه فلاسک به طور همزمان کار می کند. این یک الزام است زیرا "
#~ "بسیاری از افراد از الگوهایی مانند الگوی :doc:`/patterns/appfactories` برای "
#~ "ایجاد برنامه کاربردی خود در صورت نیاز برای کمک به تست های واحد و پشتیبانی از"
#~ " چندین پیکربندی استفاده می کنند. به همین دلیل بسیار مهم است که برنامه شما از"
#~ " این نوع رفتار پشتیبانی کند."

#~ msgid ""
#~ "Most importantly the extension must be shipped with a :file:`setup.py` file "
#~ "and registered on PyPI.  Also the development checkout link should work so "
#~ "that people can easily install the development version into their virtualenv"
#~ " without having to download the library by hand."
#~ msgstr ""
#~ "مهمتر از همه، افزونه ها باید با فایل :file:`setup.py` ارسال شود و در PyPI "
#~ "ثبت شود. همچنین لینک توسعه دهندگان باید کار کند تا افراد بتوانند به راحتی "
#~ "نسخه توسعه را در virtualenv خود نصب کنند و نیازی به دانلود دستی کتابخانه "
#~ "نباشند."

#~ msgid ""
#~ "Flask extensions must be licensed under a BSD, MIT or more liberal license "
#~ "in order to be listed in the Flask Extension Registry.  Keep in mind that "
#~ "the Flask Extension Registry is a moderated place and libraries will be "
#~ "reviewed upfront if they behave as required."
#~ msgstr ""
#~ "افزونه های فلاسک باید تحت مجوز BSD، MIT یا مجوز آزادتر باشند تا در رجیستری "
#~ "افزونه فلاسک فهرست شوند. به خاطر داشته باشید که رجیستری افزونه فلاسک یک مکان"
#~ " مدیریت شده است و کتابخانه ها از قبل بررسی می شوند تا مطابق با نیاز رفتار "
#~ "کنند."

#~ msgid "\"Hello Flaskext!\""
#~ msgstr "\"Hello Flaskext!\""

#~ msgid ""
#~ "So let's get started with creating such a Flask extension.  The extension we"
#~ " want to create here will provide very basic support for SQLite3."
#~ msgstr ""
#~ "بنابراین بیایید با ایجاد افزونه فلاسک شروع کنیم. افزونه‌ای که می‌خواهیم در "
#~ "اینجا ایجاد کنیم، از SQLite3 پشتیبانی می‌کند."

#~ msgid "First we create the following folder structure::"
#~ msgstr "ابتدا ساختار پوشه زیر را ایجاد می کنیم::"

#~ msgid "Here's the contents of the most important files:"
#~ msgstr "در اینجا محتویات مهم ترین فایل ها آمده است:"

#~ msgid "setup.py"
#~ msgstr "فایل setup.py"

#~ msgid ""
#~ "The next file that is absolutely required is the :file:`setup.py` file which"
#~ " is used to install your Flask extension.  The following contents are "
#~ "something you can work with::"
#~ msgstr ""
#~ "فایل بعدی که کاملا مورد نیاز است فایل :file:`setup.py` است که برای نصب "
#~ "افزونه فلاسک شما استفاده می شود. مطالب زیر چیزی است که می توانید با آن کار "
#~ "کنید::"

#~ msgid ""
#~ "That's a lot of code but you can really just copy/paste that from existing "
#~ "extensions and adapt."
#~ msgstr ""
#~ "این کد زیادی است، اما می‌توانید آن را از افزونه های موجود کپی/پیست کنید و "
#~ "تطبیق دهید."

#~ msgid "flask_sqlite3.py"
#~ msgstr "فایل flask_sqlite3.py"

#~ msgid ""
#~ "Now this is where your extension code goes.  But how exactly should such an "
#~ "extension look like?  What are the best practices?  Continue reading for "
#~ "some insight."
#~ msgstr ""
#~ "اکنون این جایی است که کد افزونه شما می رود. اما دقیقاً چنین افزونه ای چگونه "
#~ "باید باشد؟ بهترین شیوه ها چیست؟ برای آگاهی بیشتر به خواندن ادامه دهید."

#~ msgid "Initializing Extensions"
#~ msgstr "راه اندازی برنامه های افزودنی"

#~ msgid ""
#~ "Many extensions will need some kind of initialization step.  For example, "
#~ "consider an application that's currently connecting to SQLite like the "
#~ "documentation suggests (:doc:`/patterns/sqlite3`). So how does the extension"
#~ " know the name of the application object?"
#~ msgstr ""
#~ "بسیاری از افزونه ها به نوعی مرحله اولیه سازی نیاز دارند. برای مثال، "
#~ "برنامه‌ای را در نظر بگیرید که در حال حاضر به SQLite متصل است( "
#~ ":doc:`/patterns/sqlite3` ). پس چگونه افزونه ها نام شی برنامه را می داند؟"

#~ msgid "Quite simple: you pass it to it."
#~ msgstr "خیلی ساده: شما آن را به آن منتقل می کنید."

#~ msgid "There are two recommended ways for an extension to initialize:"
#~ msgstr "دو روش پیشنهادی برای مقداردهی اولیه یک افزونه وجود دارد:"

#~ msgid "initialization functions:"
#~ msgstr "توابع اولیه سازی:"

#~ msgid ""
#~ "If your extension is called `helloworld` you might have a function called "
#~ "``init_helloworld(app[, extra_args])`` that initializes the extension for "
#~ "that application.  It could attach before / after handlers etc."
#~ msgstr ""
#~ "اگر افزونه شم `helloworld` نام دارد، ممکن است تابعی به نام "
#~ "``init_helloworld(app[, extra_args])`` داشته باشید که افزونه را برای آن "
#~ "برنامه مقداردهی اولیه می کند. می تواند قبل یا بعد از کنترل کننده ها و غیره "
#~ "متصل شود."

#~ msgid "classes:"
#~ msgstr "کلاس ها:"

#~ msgid ""
#~ "Classes work mostly like initialization functions but can later be used to "
#~ "further change the behavior."
#~ msgstr ""
#~ "کلاس ها بیشتر مانند توابع اولیه سازی کار می کنند، اما بعداً می توانند برای "
#~ "تغییر بیشتر رفتار استفاده شوند."

#~ msgid ""
#~ "What to use depends on what you have in mind.  For the SQLite 3 extension we"
#~ " will use the class-based approach because it will provide users with an "
#~ "object that handles opening and closing database connections."
#~ msgstr ""
#~ "اینکه چه چیزی استفاده شود بستگی به آنچه در ذهن دارید دارد. برای افزونه "
#~ "SQLite3 ما از رویکرد مبتنی بر کلاس استفاده خواهیم کرد زیرا شیئی را در اختیار"
#~ " کاربران قرار می دهد که اتصالات پایگاه داده را باز و بسته می کند."

#~ msgid ""
#~ "When designing your classes, it's important to make them easily reusable at "
#~ "the module level. This means the object itself must not under any "
#~ "circumstances store any application specific state and must be shareable "
#~ "between different applications."
#~ msgstr ""
#~ "هنگام طراحی کلاس های خود، مهم است که آنها را به راحتی در سطح ماژول قابل "
#~ "استفاده مجدد کنید. این بدان معنی است که خود شیء تحت هیچ شرایطی نباید هیچ "
#~ "حالت خاصی از برنامه را ذخیره کند و باید بین برنامه های مختلف قابل اشتراک "
#~ "گذاری باشد."

#~ msgid "The Extension Code"
#~ msgstr "کد افزونه"

#~ msgid "Here's the contents of the `flask_sqlite3.py` for copy/paste::"
#~ msgstr "در اینجا محتویات `flask_sqlite3.py` برای کپی/پیست کردن آمده است::"

#~ msgid "So here's what these lines of code do:"
#~ msgstr "بنابراین آنچه را که این خطوط کد انجام می دهند به شرح زیر است:"

#~ msgid ""
#~ "The ``__init__`` method takes an optional app object and, if supplied, will "
#~ "call ``init_app``."
#~ msgstr ""
#~ "روش ``__init__`` یک شی برنامه اختیاری می گیرد و در صورت ارائه، ``init_app`` "
#~ "را فراخوانی می کند."

#~ msgid ""
#~ "The ``init_app`` method exists so that the ``SQLite3`` object can be "
#~ "instantiated without requiring an app object.  This method supports the "
#~ "factory pattern for creating applications.  The ``init_app`` will set the "
#~ "configuration for the database, defaulting to an in memory database if no "
#~ "configuration is supplied.  In addition, the ``init_app`` method attaches "
#~ "the ``teardown`` handler."
#~ msgstr ""
#~ "متد  ``init_app`` وجود دارد تا شی ``SQLite3`` بدون نیاز به یک شی برنامه "
#~ "نمونه‌سازی شود. این روش از الگوی کارخانه برای ایجاد برنامه ها پشتیبانی می "
#~ "کند. ``init_app`` پیکربندی پایگاه داده را تنظیم می کند و در صورت عدم ارائه "
#~ "پیکربندی به صورت پیش فرض روی پایگاه داده در حافظه قرار می گیرد. علاوه بر "
#~ "این، روش ``init_app`` ، کنترل‌کننده ``teardown`` را متصل می‌کند."

#~ msgid "Next, we define a ``connect`` method that opens a database connection."
#~ msgstr ""
#~ "در مرحله بعد، یک متد  ``connect``  تعریف می کنیم که اتصال پایگاه داده را باز"
#~ " می کند."

#~ msgid ""
#~ "Finally, we add a ``connection`` property that on first access opens the "
#~ "database connection and stores it on the context.  This is also the "
#~ "recommended way to handling resources: fetch resources lazily the first time"
#~ " they are used."
#~ msgstr ""
#~ "در نهایت، یک ویژگی ``connection`` اضافه می کنیم که در اولین دسترسی، اتصال "
#~ "پایگاه داده را باز می کند و آن را در زمینه ذخیره می کند. این نیز روشی است که"
#~ " برای مدیریت منابع توصیه می‌شود: اولین باری که منابع را استفاده می‌کنید، "
#~ "آنها را با تنبلی واکشی کنید."

#~ msgid ""
#~ "Note here that we're attaching our database connection to the top "
#~ "application context via ``_app_ctx_stack.top``. Extensions should use the "
#~ "top context for storing their own information with a sufficiently complex "
#~ "name."
#~ msgstr ""
#~ "در اینجا توجه داشته باشید که ما اتصال پایگاه داده خود را از طریق "
#~ "``_app_ctx_stack.top`` به زمینه برنامه برتر متصل می کنیم. برنامه های افزودنی"
#~ " باید از زمینه بالا برای ذخیره اطلاعات خود با نامی به اندازه کافی پیچیده "
#~ "استفاده کنند."

#~ msgid ""
#~ "So why did we decide on a class-based approach here?  Because using our "
#~ "extension looks something like this::"
#~ msgstr ""
#~ "پس چرا در اینجا روی یک رویکرد کلاس محور تصمیم گرفتیم؟ زیرا استفاده از افزونه"
#~ " ما چیزی شبیه به این است::"

#~ msgid "You can then use the database from views like this::"
#~ msgstr "سپس می توانید از پایگاه داده از نماهایی مانند زیر استفاده کنید:"

#~ msgid ""
#~ "Likewise if you are outside of a request you can use the database by pushing"
#~ " an app context::"
#~ msgstr ""
#~ "به همین ترتیب، اگر خارج از یک درخواست هستید، می توانید با فشار دادن یک متن "
#~ "برنامه از پایگاه داده استفاده کنید::"

#~ msgid ""
#~ "At the end of the ``with`` block the teardown handles will be executed "
#~ "automatically."
#~ msgstr ""
#~ "در پایان بلوک ``with``، دسته های پارگی(teardown handles) به طور خودکار اجرا "
#~ "می‌شوند."

#~ msgid ""
#~ "Additionally, the ``init_app`` method is used to support the factory pattern"
#~ " for creating apps::"
#~ msgstr ""
#~ "علاوه بر این، از روش ``init_app`` برای پشتیبانی از الگوی کارخانه برای ایجاد "
#~ "برنامه ها استفاده می شود::"

#~ msgid ""
#~ "Keep in mind that supporting this factory pattern for creating apps is "
#~ "required for approved flask extensions (described below)."
#~ msgstr ""
#~ "به خاطر داشته باشید که پشتیبانی از این الگوی کارخانه برای ایجاد برنامه‌ها "
#~ "برای برنامه‌های افزودنی فلاسک تأیید شده (توضیح داده شده در زیر) لازم است."

#~ msgid "Note on ``init_app``"
#~ msgstr "یادداشتی در مورد ``init_app``"

#~ msgid ""
#~ "As you noticed, ``init_app`` does not assign ``app`` to ``self``.  This is "
#~ "intentional!  Class based Flask extensions must only store the application "
#~ "on the object when the application was passed to the constructor.  This "
#~ "tells the extension: I am not interested in using multiple applications."
#~ msgstr ""
#~ "همانطور که متوجه شدید، ``init_app`` ، ``app`` را به ``self`` اختصاص نمی دهد."
#~ " این عمدی است! افزونه های فلاسک مبتنی بر کلاس فقط زمانی باید برنامه را روی "
#~ "شی ذخیره کنند که برنامه به سازنده ارسال شود. این به افزونه می گوید: من علاقه"
#~ " ای به استفاده از چندین برنامه کاربردی ندارم."

#~ msgid ""
#~ "When the extension needs to find the current application and it does not "
#~ "have a reference to it, it must either use the :data:`~flask.current_app` "
#~ "context local or change the API in a way that you can pass the application "
#~ "explicitly."
#~ msgstr ""
#~ "هنگامی که افزونه نیاز به یافتن برنامه فعلی دارد و مرجعی به آن ندارد، باید یا"
#~ " از متن محلی :data:`~flask.current_app` استفاده کند یا API را به گونه ای "
#~ "تغییر دهد که بتوانید برنامه را به صراحت منتقل کنید."

#~ msgid "Using _app_ctx_stack"
#~ msgstr "استفاده از _app_ctx_stack"

#~ msgid ""
#~ "In the example above, before every request, a ``sqlite3_db`` variable is "
#~ "assigned to ``_app_ctx_stack.top``.  In a view function, this variable is "
#~ "accessible using the ``connection`` property of ``SQLite3``.  During the "
#~ "teardown of a request, the ``sqlite3_db`` connection is closed.  By using "
#~ "this pattern, the *same* connection to the sqlite3 database is accessible to"
#~ " anything that needs it for the duration of the request."
#~ msgstr ""
#~ "در مثال بالا، قبل از هر درخواست، یک متغیر ``sqlite3_db`` به "
#~ "``_app_ctx_stack.top`` اختصاص داده می شود. در یک تابع view، این متغیر با "
#~ "استفاده از ویژگی ``connection`` در ``SQLite3`` قابل دسترسی است. در حین از "
#~ "بین رفتن یک درخواست، اتصال ``sqlite3_db`` بسته می شود. با استفاده از این "
#~ "الگو، اتصال *همان* به پایگاه داده sqlite3 برای هر چیزی که در طول مدت درخواست"
#~ " به آن نیاز دارد، قابل دسترسی است."

#~ msgid "Learn from Others"
#~ msgstr "از دیگران یاد بگیرید"

#~ msgid ""
#~ "This documentation only touches the bare minimum for extension development. "
#~ "If you want to learn more, it's a very good idea to check out existing "
#~ "extensions on `PyPI`_.  If you feel lost there is `Discord Chat`_ or `GitHub"
#~ " Discussions`_ to get some ideas for nice looking APIs.  Especially if you "
#~ "do something nobody before you did, it might be a very good idea to get some"
#~ " more input.  This not only generates useful feedback on what people might "
#~ "want from an extension, but also avoids having multiple developers working "
#~ "in isolation on pretty much the same problem."
#~ msgstr ""
#~ "این مستندات فقط حداقل ها را برای توسعه برنامه های افزودنی لمس می کند. اگر "
#~ "می‌خواهید بیشتر بیاموزید، ایده بسیار خوبی است که برنامه‌های افزودنی موجود در"
#~ " `PyPI`_ را بررسی کنید. اگر احساس می‌کنید گم شده‌اید، `Discord Chat`_ یا "
#~ "`GitHub Discussions`_ وجود دارد تا ایده‌هایی برای APIهای زیبا به دست آورید. "
#~ "به خصوص اگر کاری را که قبل از انجام هیچ کس انجام نداده اید، انجام می دهید، "
#~ "ممکن است ایده بسیار خوبی باشد که اطلاعات بیشتری دریافت کنید. این نه تنها "
#~ "بازخورد مفیدی در مورد آنچه مردم ممکن است از یک برنامه افزودنی بخواهند ایجاد "
#~ "می کند، بلکه از داشتن چندین توسعه دهنده به صورت مجزا روی تقریباً یک مشکل "
#~ "جلوگیری می کند."

#~ msgid ""
#~ "Remember: good API design is hard, so introduce your project on `Discord "
#~ "Chat`_ or `GitHub Discussions`_, and let other developers give you a helping"
#~ " hand with designing the API."
#~ msgstr ""
#~ "به یاد داشته باشید: طراحی API خوب سخت است، بنابراین پروژه خود را در `Discord"
#~ " Chat`_ یا `GitHub Discussions`_» معرفی کنید، و اجازه دهید سایر توسعه "
#~ "دهندگان در طراحی API به شما کمک کنند."

#~ msgid ""
#~ "The best Flask extensions are extensions that share common idioms for the "
#~ "API.  And this can only work if collaboration happens early."
#~ msgstr ""
#~ "بهترین افزونه های فلاسک، افزونه هایی هستند که اصطلاحات مشترکی برای API "
#~ "دارند. و این تنها در صورتی می تواند کارساز باشد که همکاری زودتر اتفاق بیفتد."

#~ msgid "Approved Extensions"
#~ msgstr "افزونه های تایید شده"

#~ msgid ""
#~ "Flask previously had the concept of approved extensions. These came with "
#~ "some vetting of support and compatibility. While this list became too "
#~ "difficult to maintain over time, the guidelines are still relevant to all "
#~ "extensions maintained and developed today, as they help the Flask ecosystem "
#~ "remain consistent and compatible."
#~ msgstr ""
#~ "فلاسک قبلاً مفهوم افزونه های تأیید شده را داشت. اینها با بررسی پشتیبانی و "
#~ "سازگاری همراه بودند. در حالی که حفظ این فهرست در طول زمان بسیار دشوار شد، "
#~ "دستورالعمل‌ها همچنان به همه برنامه‌های افزودنی که امروزه حفظ و توسعه می‌شوند"
#~ " مرتبط هستند، زیرا به اکوسیستم فلاسک کمک می‌کنند سازگار و سازگار باقی بماند."

#~ msgid ""
#~ "An approved Flask extension requires a maintainer. In the event an extension"
#~ " author would like to move beyond the project, the project should find a new"
#~ " maintainer and transfer access to the repository, documentation, PyPI, and "
#~ "any other services. If no maintainer is available, give access to the "
#~ "Pallets core team."
#~ msgstr ""
#~ "یک افزونه به نگهدارنده نیاز دارد. در صورتی که نویسنده افزونه بخواهد فراتر از"
#~ " پروژه حرکت کند، پروژه باید یک نگهدارنده جدید پیدا کند و دسترسی به مخزن، "
#~ "اسناد، PyPI و هر سرویس دیگری را منتقل کند. اگر هیچ نگهدارنده ای در دسترس "
#~ "نباشید، باید تیم اصلی Pallets دسترسی پیدا کند."

#~ msgid ""
#~ "It must ship a testing suite that can be invoked with ``tox -e py`` or "
#~ "``pytest``. If not using ``tox``, the test dependencies should be specified "
#~ "in a ``requirements.txt`` file. The tests must be part of the sdist "
#~ "distribution."
#~ msgstr ""
#~ "باید یک مجموعه آزمایشی ارسال کنید که بتوان آن را با ``tox -e py`` یا "
#~ "``pytest`` فراخوانی کرد. اگر از ``tox`` استفاده نمی کنید، وابستگی های تست را"
#~ " در فایل ``requirements.txt`` مشخص کنید. آزمون ها نیز باید بخشی از توزیع "
#~ "sdist باشند."

#~ msgid ""
#~ "The documentation must use the ``flask`` theme from the `Official Pallets "
#~ "Themes`_. A link to the documentation or project website must be in the PyPI"
#~ " metadata or the readme."
#~ msgstr ""
#~ "اسناد باید از موضوع ``flask`` از  `Official Pallets Themes`_ استفاده کنند. "
#~ "پیوند به اسناد یا وب سایت پروژه نیز باید در  PyPI یا فایل README باشد."

#~ msgid ""
#~ "For maximum compatibility, the extension should support the same versions of"
#~ " Python that Flask supports. 3.7+ is recommended as of December 2021. Use "
#~ "``python_requires=\">= 3.7\"`` in ``setup.py`` to indicate supported "
#~ "versions."
#~ msgstr ""
#~ "برای حداکثر سازگاری، افزونه باید از همان نسخه‌های پایتون پشتیبانی کند که "
#~ "فلاسک پشتیبانی می‌کند.از سال ۲۰۲۰، نسخه ۳.۶ و بالاتر پایتون توصیه می شود. از"
#~ " ``python_requires=\">= 3.6\"`` در ``setup.py`` برای نشان دادن نسخه های "
#~ "پشتیبانی شده استفاده کنید."
