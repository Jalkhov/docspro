# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../async-await.rst:4
msgid "Using ``async`` and ``await``"
msgstr "Uso de ``async`` y ``await``"

#: ../../async-await.rst:8
msgid ""
"Routes, error handlers, before request, after request, and teardown "
"functions can all be coroutine functions if Flask is installed with the "
"``async`` extra (``pip install flask[async]``). This allows views to be "
"defined with ``async def`` and use ``await``."
msgstr ""
"Las rutas, los manejadores de errores, las funciones antes de la "
"solicitud, después de la solicitud y el desmontaje pueden ser funciones "
"coroutinas si Flask se instala con el extra ``async`` (``pip install "
"flask[async]``). Esto permite definir las vistas con ``async def`` y "
"utilizar ``await``."

#: ../../async-await.rst:20
msgid "Using ``async`` on Windows on Python 3.8"
msgstr "Uso de ``async`` en Windows con Python 3.8"

#: ../../async-await.rst:22
msgid ""
"Python 3.8 has a bug related to asyncio on Windows. If you encounter "
"something like ``ValueError: set_wakeup_fd only works in main thread``, "
"please upgrade to Python 3.9."
msgstr ""
"Python 3.8 tiene un error relacionado con asyncio en Windows. Si "
"encuentras algo como ``ValueError: set_wakeup_fd only works in main "
"thread``, por favor actualiza a Python 3.9."

#: ../../async-await.rst:28
msgid "Performance"
msgstr "Rendimiento"

#: ../../async-await.rst:30
msgid ""
"Async functions require an event loop to run. Flask, as a WSGI "
"application, uses one worker to handle one request/response cycle. When "
"a request comes in to an async view, Flask will start an event loop in a "
"thread, run the view function there, then return the result."
msgstr ""
"Las funciones asíncronas requieren un bucle de eventos para ejecutarse. "
"Flask, como aplicación WSGI, utiliza un trabajador para manejar un ciclo "
"de solicitud/respuesta. Cuando una solicitud llega a una vista "
"asíncrona, Flask iniciará un bucle de eventos en un hilo, ejecutará la "
"función de la vista allí, y luego devolverá el resultado."

#: ../../async-await.rst:35
msgid ""
"Each request still ties up one worker, even for async views. The upside "
"is that you can run async code within a view, for example to make "
"multiple concurrent database queries, HTTP requests to an external API, "
"etc. However, the number of requests your application can handle at one "
"time will remain the same."
msgstr ""
"Cada solicitud sigue ocupando un trabajador, incluso para las vistas "
"asíncronas. La ventaja es que puedes ejecutar código asíncrono dentro de "
"una vista, por ejemplo para hacer múltiples consultas concurrentes a la "
"base de datos, peticiones HTTP a una API externa, etc. Sin embargo, el "
"número de peticiones que tu aplicación puede manejar al mismo tiempo "
"seguirá siendo el mismo."

#: ../../async-await.rst:41
msgid ""
"**Async is not inherently faster than sync code.** Async is beneficial "
"when performing concurrent IO-bound tasks, but will probably not improve "
"CPU-bound tasks. Traditional Flask views will still be appropriate for "
"most use cases, but Flask's async support enables writing and using code "
"that wasn't possible natively before."
msgstr ""
"**Async no es inherentemente más rápido que el código sync.** Async es "
"beneficioso cuando se realizan tareas concurrentes ligadas al IO, pero "
"probablemente no mejorará las tareas ligadas a la CPU. Las vistas "
"tradicionales de Flask seguirán siendo apropiadas para la mayoría de los "
"casos de uso, pero el soporte asíncrono de Flask permite escribir y "
"utilizar código que antes no era posible de forma nativa."

#: ../../async-await.rst:49
msgid "Background tasks"
msgstr "Tareas de fondo"

#: ../../async-await.rst:51
msgid ""
"Async functions will run in an event loop until they complete, at which "
"stage the event loop will stop. This means any additional spawned tasks "
"that haven't completed when the async function completes will be "
"cancelled. Therefore you cannot spawn background tasks, for example via "
"``asyncio.create_task``."
msgstr ""
"Las funciones asíncronas se ejecutarán en un bucle de eventos hasta que "
"se completen, momento en el que el bucle de eventos se detendrá. Esto "
"significa que cualquier tarea adicional generada que no se haya "
"completado cuando la función asíncrona finalice será cancelada. Por lo "
"tanto, no puedes generar tareas en segundo plano, por ejemplo a través "
"de ``asyncio.create_task``."

#: ../../async-await.rst:57
msgid ""
"If you wish to use background tasks it is best to use a task queue to "
"trigger background work, rather than spawn tasks in a view function. "
"With that in mind you can spawn asyncio tasks by serving Flask with an "
"ASGI server and utilising the asgiref WsgiToAsgi adapter as described "
"in :ref:`asgi`. This works as the adapter creates an event loop that "
"runs continually."
msgstr ""
"Si desea utilizar tareas en segundo plano, es mejor utilizar una cola de "
"tareas para activar el trabajo en segundo plano, en lugar de generar "
"tareas en una función de vista. Teniendo esto en cuenta, puedes generar "
"tareas asyncio sirviendo a Flask con un servidor ASGI y utilizando el "
"adaptador asgiref WsgiToAsgi como se describe en :ref:`asgi`. Esto "
"funciona porque el adaptador crea un bucle de eventos que se ejecuta "
"continuamente."

#: ../../async-await.rst:66
msgid "When to use Quart instead"
msgstr "Cuándo utilizar Quart en su lugar"

#: ../../async-await.rst:68
msgid ""
"Flask's async support is less performant than async-first frameworks due "
"to the way it is implemented. If you have a mainly async codebase it "
"would make sense to consider `Quart`_. Quart is a reimplementation of "
"Flask based on the `ASGI`_ standard instead of WSGI. This allows it to "
"handle many concurrent requests, long running requests, and websockets "
"without requiring multiple worker processes or threads."
msgstr ""
"El soporte asíncrono de Flask es menos eficiente que los frameworks "
"asíncronos debido a la forma en que se implementa. Si tienes una base de "
"código principalmente asíncrona tendría sentido considerar `Quart`_. "
"Quart es una reimplementación de Flask basada en el estándar `ASGI`_ en "
"lugar de WSGI. Esto le permite manejar muchas peticiones concurrentes, "
"peticiones de larga duración, y websockets sin requerir procesos de "
"trabajo individuales o hilos."

#: ../../async-await.rst:75
msgid ""
"It has also already been possible to run Flask with Gevent or Eventlet "
"to get many of the benefits of async request handling. These libraries "
"patch low-level Python functions to accomplish this, whereas ``async``/ "
"``await`` and ASGI use standard, modern Python capabilities. Deciding "
"whether you should use Flask, Quart, or something else is ultimately up "
"to understanding the specific needs of your project."
msgstr ""
"También ha sido posible ejecutar Flask con Gevent o Eventlet para "
"obtener muchos de los beneficios del manejo de peticiones asíncronas. "
"Estas librerías parchean funciones de Python de bajo nivel para lograr "
"esto, mientras que ``async``/ ``await`` y ASGI utilizan capacidades "
"estándar y modernas de Python. Decidir si debes usar Flask, Quart, o "
"alguna otra cosa depende en última instancia de la comprensión de las "
"necesidades específicas de tu proyecto."

#: ../../async-await.rst:87
msgid "Extensions"
msgstr "Extensiones"

#: ../../async-await.rst:89
msgid ""
"Flask extensions predating Flask's async support do not expect async "
"views. If they provide decorators to add functionality to views, those "
"will probably not work with async views because they will not await the "
"function or be awaitable. Other functions they provide will not be "
"awaitable either and will probably be blocking if called within an async "
"view."
msgstr ""
"Las extensiones de Flask anteriores al soporte asíncrono de Flask no "
"esperan vistas asíncronas. Si proporcionan decoradores para añadir "
"funcionalidad a las vistas, probablemente no funcionarán con las vistas "
"asíncronas porque no esperarán la función o serán aguardables. Otras "
"funciones que proporcionan tampoco serán aguardables y probablemente se "
"bloquearán si se llaman dentro de una vista asíncrona."

#: ../../async-await.rst:95
msgid ""
"Extension authors can support async functions by utilising the :meth:"
"`flask.Flask.ensure_sync` method. For example, if the extension provides "
"a view function decorator add ``ensure_sync`` before calling the "
"decorated function,"
msgstr ""
"Los autores de extensiones pueden soportar funciones asíncronas "
"utilizando el método :meth:`flask.Flask.ensure_sync`. Por ejemplo, si la "
"extensión proporciona un decorador de función de vista, añada "
"``ensure_sync`` antes de llamar a la función decorada,"

#: ../../async-await.rst:110
msgid ""
"Check the changelog of the extension you want to use to see if they've "
"implemented async support, or make a feature request or PR to them."
msgstr ""
"Comprueba el registro de cambios de la extensión que quieres usar para "
"ver si han implementado el soporte asíncrono, o haz una petición de "
"funcionalidad o PR a ellos."

#: ../../async-await.rst:115
msgid "Other event loops"
msgstr "Otros bucles de eventos"

#: ../../async-await.rst:117
msgid ""
"At the moment Flask only supports :mod:`asyncio`. It's possible to "
"override :meth:`flask.Flask.ensure_sync` to change how async functions "
"are wrapped to use a different library."
msgstr ""
"Por el momento Flask sólo soporta :mod:`asyncio`. Es posible anular :"
"meth:`flask.Flask.ensure_sync` para cambiar la forma en que se envuelven "
"las funciones asíncronas para utilizar una biblioteca diferente."
