# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../reqcontext.rst:4
msgid "The Request Context"
msgstr "El contexto de la solicitud"

#: ../../reqcontext.rst:6
msgid ""
"The request context keeps track of the request-level data during a "
"request. Rather than passing the request object to each function that "
"runs during a request, the :data:`request` and :data:`session` proxies "
"are accessed instead."
msgstr ""
"El contexto de la solicitud mantiene un seguimiento de los datos a nivel "
"de petición durante una solicitud. En lugar de pasar el objeto de "
"solicitud a cada función que se ejecuta durante una solicitud, se accede "
"a los proxies :data:`request` y :data:`session`."

#: ../../reqcontext.rst:11
msgid ""
"This is similar to the :doc:`/appcontext`, which keeps track of the "
"application-level data independent of a request. A corresponding "
"application context is pushed when a request context is pushed."
msgstr ""
"Esto es similar al :doc:`/appcontext`, que mantiene un seguimiento de "
"los datos a nivel de aplicación independiente de una solicitud. Un "
"contexto de aplicación correspondiente es empujado cuando un contexto de "
"solicitud es empujado."

#: ../../reqcontext.rst:17
msgid "Purpose of the Context"
msgstr "Objetivo del Contexto"

#: ../../reqcontext.rst:19
msgid ""
"When the :class:`Flask` application handles a request, it creates a :"
"class:`Request` object based on the environment it received from the "
"WSGI server. Because a *worker* (thread, process, or coroutine depending "
"on the server) handles only one request at a time, the request data can "
"be considered global to that worker during that request. Flask uses the "
"term *context local* for this."
msgstr ""
"Cuando la aplicación :class:`Flask` maneja una petición, crea un objeto :"
"class:`Request` basado en el entorno que recibió del servidor WSGI. Dado "
"que un *worker* (hilo, proceso o coroutina, dependiendo del servidor) "
"maneja sólo una petición a la vez, los datos de la petición pueden "
"considerarse globales para ese worker durante esa petición. Flask "
"utiliza el término *contexto local* para esto."

#: ../../reqcontext.rst:26
msgid ""
"Flask automatically *pushes* a request context when handling a request. "
"View functions, error handlers, and other functions that run during a "
"request will have access to the :data:`request` proxy, which points to "
"the request object for the current request."
msgstr ""
"Flask automáticamente *empuja* un contexto de solicitud cuando maneja "
"una solicitud. Las funciones de vista, los manejadores de errores y "
"otras funciones que se ejecutan durante una solicitud tendrán acceso al "
"proxy :data:`request`, que apunta al objeto de solicitud para la "
"solicitud actual."

#: ../../reqcontext.rst:33
msgid "Lifetime of the Context"
msgstr "La duración del contexto"

#: ../../reqcontext.rst:35
msgid ""
"When a Flask application begins handling a request, it pushes a request "
"context, which also pushes an :doc:`/appcontext`. When the request ends "
"it pops the request context then the application context."
msgstr ""
"Cuando una aplicación Flask comienza a manejar una solicitud, empuja un "
"contexto de solicitud, que también empuja un :doc:`/appcontext`. Cuando "
"la solicitud finaliza, el contexto de la solicitud y el contexto de la "
"aplicación desaparecen."

#: ../../reqcontext.rst:39
msgid ""
"The context is unique to each thread (or other worker type). :data:"
"`request` cannot be passed to another thread, the other thread will have "
"a different context stack and will not know about the request the parent "
"thread was pointing to."
msgstr ""
"El contexto es único para cada hilo (u otro tipo de trabajador). :data:"
"`request` no puede ser pasado a otro hilo, el otro hilo tendrá una pila "
"de contexto diferente y no sabrá sobre la petición que el hilo padre "
"estaba apuntando."

#: ../../reqcontext.rst:44
msgid ""
"Context locals are implemented in Werkzeug. See :doc:`werkzeug:local` "
"for more information on how this works internally."
msgstr ""
"Los locales de contexto se implementan en Werkzeug. Ver :doc:`werkzeug:"
"local` para más información sobre cómo funciona internamente."

#: ../../reqcontext.rst:49
msgid "Manually Push a Context"
msgstr "Empujar manualmente un contexto"

#: ../../reqcontext.rst:51
msgid ""
"If you try to access :data:`request`, or anything that uses it, outside "
"a request context, you'll get this error message:"
msgstr ""
"Si intentas acceder a :data:`request`, o a cualquier cosa que lo "
"utilice, fuera de un contexto de petición, obtendrás este mensaje de "
"error:"

#: ../../reqcontext.rst:62
msgid ""
"This should typically only happen when testing code that expects an "
"active request. One option is to use the :meth:`test client <Flask."
"test_client>` to simulate a full request. Or you can use :meth:`~Flask."
"test_request_context` in a ``with`` block, and everything that runs in "
"the block will have access to :data:`request`, populated with your test "
"data. ::"
msgstr ""
"Esto debería ocurrir típicamente sólo cuando se prueba el código que "
"espera una solicitud activa. Una opción es utilizar el :meth:`cliente de "
"prueba <Flask.test_client>` para simular una petición completa. O puedes "
"usar :meth:`~Flask.test_request_context` en un bloque ``with``, y todo "
"lo que se ejecute en el bloque tendrá acceso a :data:`request`, poblado "
"con tus datos de prueba. ::"

#: ../../reqcontext.rst:77
msgid ""
"If you see that error somewhere else in your code not related to "
"testing, it most likely indicates that you should move that code into a "
"view function."
msgstr ""
"Si ves ese error en algún otro lugar de tu código no relacionado con las "
"pruebas, lo más probable es que indique que debes mover ese código a una "
"función de la vista."

#: ../../reqcontext.rst:81
msgid ""
"For information on how to use the request context from the interactive "
"Python shell, see :doc:`/shell`."
msgstr ""
"Para obtener información sobre cómo utilizar el contexto de petición "
"desde el shell interactivo de Python, consulte :doc:`/shell`."

#: ../../reqcontext.rst:86
msgid "How the Context Works"
msgstr "Cómo funciona el contexto"

#: ../../reqcontext.rst:88
msgid ""
"The :meth:`Flask.wsgi_app` method is called to handle each request. It "
"manages the contexts during the request. Internally, the request and "
"application contexts work as stacks, :data:`_request_ctx_stack` and :"
"data:`_app_ctx_stack`. When contexts are pushed onto the stack, the "
"proxies that depend on them are available and point at information from "
"the top context on the stack."
msgstr ""
"El método :meth:`Flask.wsgi_app` es llamado para manejar cada solicitud. "
"Gestiona los contextos durante la solicitud. Internamente, los contextos "
"de solicitud y aplicación funcionan como pilas, :data:"
"`_request_ctx_stack` y :data:`_app_ctx_stack`. Cuando los contextos son "
"empujados a la pila, los proxies que dependen de ellos están disponibles "
"y apuntan a la información del contexto superior en la pila."

#: ../../reqcontext.rst:95
msgid ""
"When the request starts, a :class:`~ctx.RequestContext` is created and "
"pushed, which creates and pushes an :class:`~ctx.AppContext` first if a "
"context for that application is not already the top context. While these "
"contexts are pushed, the :data:`current_app`, :data:`g`, :data:"
"`request`, and :data:`session` proxies are available to the original "
"thread handling the request."
msgstr ""
"Cuando se inicia la solicitud, se crea y empuja un :class:`~ctx."
"RequestContext`, que crea y empuja un :class:`~ctx.AppContext` primero "
"si un contexto para esa aplicación no es ya el contexto superior. "
"Mientras estos contextos son enviados, los proxies :data:`current_app`, :"
"data:`g`, :data:`request`, y :data:`session` están disponibles para el "
"hilo original que maneja la solicitud."

#: ../../reqcontext.rst:102
msgid ""
"Because the contexts are stacks, other contexts may be pushed to change "
"the proxies during a request. While this is not a common pattern, it can "
"be used in advanced applications to, for example, do internal redirects "
"or chain different applications together."
msgstr ""
"Debido a que los contextos son pilas, otros contextos pueden ser "
"empujados para cambiar los proxies durante una solicitud. Aunque esto no "
"es un patrón común, puede ser utilizado en aplicaciones avanzadas para, "
"por ejemplo, hacer redirecciones internas o encadenar diferentes "
"aplicaciones."

#: ../../reqcontext.rst:107
msgid ""
"After the request is dispatched and a response is generated and sent, "
"the request context is popped, which then pops the application context. "
"Immediately before they are popped, the :meth:`~Flask.teardown_request` "
"and :meth:`~Flask.teardown_appcontext` functions are executed. These "
"execute even if an unhandled exception occurred during dispatch."
msgstr ""
"Después de que la petición sea despachada y una respuesta sea generada y "
"enviada, el contexto de la petición es poppeado, que luego poppea el "
"contexto de la aplicación. Inmediatamente antes de que se vacíen, se "
"ejecutan las funciones :meth:`~Flask.teardown_request` y :meth:`~Flask."
"teardown_appcontext`. Éstas se ejecutan incluso si se ha producido una "
"excepción no controlada durante el envío."

#: ../../reqcontext.rst:117
msgid "Callbacks and Errors"
msgstr "Callbacks y errores"

#: ../../reqcontext.rst:119
msgid ""
"Flask dispatches a request in multiple stages which can affect the "
"request, response, and how errors are handled. The contexts are active "
"during all of these stages."
msgstr ""
"Flask despacha una petición en múltiples etapas que pueden afectar a la "
"petición, a la respuesta y a cómo se manejan los errores. Los contextos "
"están activos durante todas estas etapas."

#: ../../reqcontext.rst:123
msgid ""
"A :class:`Blueprint` can add handlers for these events that are specific "
"to the blueprint. The handlers for a blueprint will run if the blueprint "
"owns the route that matches the request."
msgstr ""
"Un :class:`Blueprint` puede añadir manejadores para estos eventos que "
"son específicos del blueprint. Los manejadores de un blueprint se "
"ejecutarán si el blueprint posee la ruta que coincide con la solicitud."

#: ../../reqcontext.rst:127
msgid ""
"Before each request, :meth:`~Flask.before_request` functions are called. "
"If one of these functions return a value, the other functions are "
"skipped. The return value is treated as the response and the view "
"function is not called."
msgstr ""
"Antes de cada petición, se llaman las funciones :meth:`~Flask."
"before_request`. Si una de estas funciones devuelve un valor, se saltan "
"las demás funciones. El valor devuelto se trata como la respuesta y no "
"se llama a la función de vista."

#: ../../reqcontext.rst:132
msgid ""
"If the :meth:`~Flask.before_request` functions did not return a "
"response, the view function for the matched route is called and returns "
"a response."
msgstr ""
"Si las funciones :meth:`~Flask.before_request` no devuelven una "
"respuesta, se llama a la función de vista de la ruta coincidente y "
"devuelve una respuesta."

#: ../../reqcontext.rst:136
msgid ""
"The return value of the view is converted into an actual response object "
"and passed to the :meth:`~Flask.after_request` functions. Each function "
"returns a modified or new response object."
msgstr ""
"El valor de retorno de la vista se convierte en un objeto de respuesta "
"real y se pasa a las funciones :meth:`~Flask.after_request`. Cada "
"función devuelve un objeto de respuesta modificado o nuevo."

#: ../../reqcontext.rst:140
msgid ""
"After the response is returned, the contexts are popped, which calls "
"the :meth:`~Flask.teardown_request` and :meth:`~Flask."
"teardown_appcontext` functions. These functions are called even if an "
"unhandled exception was raised at any point above."
msgstr ""
"Después de que la respuesta es devuelta, los contextos son vaciados, lo "
"que llama a las funciones :meth:`~Flask.teardown_request` y :meth:"
"`~Flask.teardown_appcontext`. Estas funciones son llamadas incluso si "
"una excepción no manejada fue lanzada en cualquier punto anterior."

#: ../../reqcontext.rst:145
msgid ""
"If an exception is raised before the teardown functions, Flask tries to "
"match it with an :meth:`~Flask.errorhandler` function to handle the "
"exception and return a response. If no error handler is found, or the "
"handler itself raises an exception, Flask returns a generic ``500 "
"Internal Server Error`` response. The teardown functions are still "
"called, and are passed the exception object."
msgstr ""
"Si se lanza una excepción antes de las funciones de desmontaje, Flask "
"intenta hacerla coincidir con una función :meth:`~Flask.errorhandler` "
"para manejar la excepción y devolver una respuesta. Si no se encuentra "
"ningún gestor de errores, o el propio gestor lanza una excepción, Flask "
"devuelve una respuesta genérica ``500 Internal Server Error``. Las "
"funciones de desmontaje siguen siendo llamadas, y se les pasa el objeto "
"de excepción."

#: ../../reqcontext.rst:152
msgid ""
"If debug mode is enabled, unhandled exceptions are not converted to a "
"``500`` response and instead are propagated to the WSGI server. This "
"allows the development server to present the interactive debugger with "
"the traceback."
msgstr ""
"Si el modo de depuración está habilitado, las excepciones no manejadas "
"no se convierten en una respuesta ``500`` y en su lugar se propagan al "
"servidor WSGI. Esto permite al servidor de desarrollo presentar el "
"depurador interactivo con el rastreo."

#: ../../reqcontext.rst:159
msgid "Teardown Callbacks"
msgstr ""

#: ../../reqcontext.rst:161
msgid ""
"The teardown callbacks are independent of the request dispatch, and are "
"instead called by the contexts when they are popped. The functions are "
"called even if there is an unhandled exception during dispatch, and for "
"manually pushed contexts. This means there is no guarantee that any "
"other parts of the request dispatch have run first. Be sure to write "
"these functions in a way that does not depend on other callbacks and "
"will not fail."
msgstr ""
"Las Teardown Callbacks son independientes del envío de la solicitud, y "
"son llamadas por los contextos cuando son expulsados. Las funciones son "
"llamadas incluso si hay una excepción no manejada durante el envío, y "
"para los contextos empujados manualmente. Esto significa que no hay "
"garantía de que cualquier otra parte del envío de la solicitud se haya "
"ejecutado primero. Asegúrate de escribir estas funciones de forma que no "
"dependan de otras llamadas de retorno y no fallen."

#: ../../reqcontext.rst:169
msgid ""
"During testing, it can be useful to defer popping the contexts after the "
"request ends, so that their data can be accessed in the test function. "
"Use the :meth:`~Flask.test_client` as a ``with`` block to preserve the "
"contexts until the ``with`` block exits."
msgstr ""
"Durante las pruebas, puede ser útil aplazar la salida de los contextos "
"después de que la solicitud termine, para que sus datos puedan ser "
"accedidos en la función de prueba. Utiliza el :meth:`~Flask.test_client` "
"como un bloque ``with`` para conservar los contextos hasta que el bloque "
"``with`` salga."

#: ../../reqcontext.rst:203
msgid "Signals"
msgstr "Señales"

#: ../../reqcontext.rst:205
msgid ""
"If :data:`~signals.signals_available` is true, the following signals are "
"sent:"
msgstr ""
"Si :data:`~signals.signals_available` es verdadero, se envían las "
"siguientes señales:"

#: ../../reqcontext.rst:208
msgid ""
":data:`request_started` is sent before the :meth:`~Flask.before_request` "
"functions are called."
msgstr ""
":data:`request_started` se envía antes de llamar a las funciones :meth:"
"`~Flask.before_request`."

#: ../../reqcontext.rst:211
msgid ""
":data:`request_finished` is sent after the :meth:`~Flask.after_request` "
"functions are called."
msgstr ""
":data:`request_finished` se envía después de llamar a las funciones :"
"meth:`~Flask.after_request`."

#: ../../reqcontext.rst:214
msgid ""
":data:`got_request_exception` is sent when an exception begins to be "
"handled, but before an :meth:`~Flask.errorhandler` is looked up or "
"called."
msgstr ""
":data:`got_request_exception` se envía cuando se empieza a gestionar una "
"excepción, pero antes de que se busque o llame a un :meth:`~Flask."
"errorhandler`."

#: ../../reqcontext.rst:218
msgid ""
":data:`request_tearing_down` is sent after the :meth:`~Flask."
"teardown_request` functions are called."
msgstr ""
":data:`request_tearing_down` se envía después de llamar a las funciones :"
"meth:`~Flask.teardown_request`.."

#: ../../reqcontext.rst:223
msgid "Context Preservation on Error"
msgstr "Preservación del contexto en caso de error"

#: ../../reqcontext.rst:225
msgid ""
"At the end of a request, the request context is popped and all data "
"associated with it is destroyed. If an error occurs during development, "
"it is useful to delay destroying the data for debugging purposes."
msgstr ""
"Al final de una solicitud, el contexto de la solicitud se vacía y todos "
"los datos asociados a ella se destruyen. Si se produce un error durante "
"el desarrollo, es útil retrasar la destrucción de los datos para fines "
"de depuración."

#: ../../reqcontext.rst:229
msgid ""
"When the development server is running in development mode (the "
"``FLASK_ENV`` environment variable is set to ``'development'``), the "
"error and data will be preserved and shown in the interactive debugger."
msgstr ""
"Cuando el servidor de desarrollo se ejecuta en modo de desarrollo (la "
"variable de entorno ``FLASK_ENV`` se establece en ``'desarrollo'``), el "
"error y los datos se conservarán y se mostrarán en el depurador "
"interactivo."

#: ../../reqcontext.rst:233
msgid ""
"This behavior can be controlled with the :data:"
"`PRESERVE_CONTEXT_ON_EXCEPTION` config. As described above, it defaults "
"to ``True`` in the development environment."
msgstr ""
"Este comportamiento puede controlarse con la configuración :data:"
"`PRESERVE_CONTEXT_ON_EXCEPTION`. Como se ha descrito anteriormente, el "
"valor predeterminado es ``True`` en el entorno de desarrollo."

#: ../../reqcontext.rst:237
msgid ""
"Do not enable :data:`PRESERVE_CONTEXT_ON_EXCEPTION` in production, as it "
"will cause your application to leak memory on exceptions."
msgstr ""
"No habilite :data:`PRESERVE_CONTEXT_ON_EXCEPTION` en producción, ya que "
"hará que su aplicación pierda memoria en las excepciones."

#: ../../reqcontext.rst:244
msgid "Notes On Proxies"
msgstr "Notas sobre los apoderados"

#: ../../reqcontext.rst:246
msgid ""
"Some of the objects provided by Flask are proxies to other objects. The "
"proxies are accessed in the same way for each worker thread, but point "
"to the unique object bound to each worker behind the scenes as described "
"on this page."
msgstr ""
"Algunos de los objetos proporcionados por Flask son proxies de otros "
"objetos. Los proxies se acceden de la misma manera para cada hilo de "
"trabajo, pero apuntan al objeto único vinculado a cada trabajador detrás "
"de las escenas como se describe en esta página."

#: ../../reqcontext.rst:251
msgid ""
"Most of the time you don't have to care about that, but there are some "
"exceptions where it is good to know that this object is actually a proxy:"
msgstr ""
"La mayoría de las veces no tienes que preocuparte por esto, pero hay "
"algunas excepciones en las que es bueno saber que este objeto es "
"realmente un proxy:"

#: ../../reqcontext.rst:254
msgid ""
"The proxy objects cannot fake their type as the actual object types. If "
"you want to perform instance checks, you have to do that on the object "
"being proxied."
msgstr ""
"Los objetos proxy no pueden fingir su tipo como los tipos de objetos "
"reales. Si quieres realizar comprobaciones de instancia, tienes que "
"hacerlo en el objeto proxy."

#: ../../reqcontext.rst:257
msgid ""
"The reference to the proxied object is needed in some situations, such "
"as sending :doc:`signals` or passing data to a background thread."
msgstr ""
"La referencia al objeto proxy es necesaria en algunas situaciones, como "
"el envío de :doc:`signals` o el paso de datos a un hilo de fondo."

#: ../../reqcontext.rst:261
msgid ""
"If you need to access the underlying object that is proxied, use the :"
"meth:`~werkzeug.local.LocalProxy._get_current_object` method::"
msgstr ""
"Si necesita acceder al objeto subyacente que se proxy, utilice el "
"método :meth:`~werkzeug.local.LocalProxy._get_current_object`::"
