# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"Language: xd\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0\n"

#: ../../extensiondev.rst:2
msgid "Flask Extension Development"
msgstr "Desarrollo de extensiones de Flask"

#: ../../extensiondev.rst:6
msgid ""
"Extensions are extra packages that add functionality to a Flask application."
" While `PyPI`_ contains many Flask extensions, you may not find one that "
"fits your need. If this is the case, you can create your own, and publish it"
" for others to use as well."
msgstr ""
"Las extensiones son paquetes adicionales que añaden funcionalidad a una "
"aplicación Flask. Aunque `PyPI`_ contiene muchas extensiones de Flask, puede"
" que no encuentres ninguna que se ajuste a tus necesidades. Si este es el "
"caso, puedes crear la tuya propia, y publicarla para que otros la usen "
"también."

#: ../../extensiondev.rst:11
msgid ""
"This guide will show how to create a Flask extension, and some of the common"
" patterns and requirements involved. Since extensions can do anything, this "
"guide won't be able to cover every possibility."
msgstr ""
"Esta guía mostrará cómo crear una extensión de Flask, y algunos de los "
"patrones y requisitos comunes involucrados. Como las extensiones pueden "
"hacer cualquier cosa, esta guía no podrá cubrir todas las posibilidades."

#: ../../extensiondev.rst:15
msgid ""
"The best ways to learn about extensions are to look at how other extensions "
"you use are written, and discuss with others. Discuss your design ideas with"
" others on our `Discord Chat`_ or `GitHub Discussions`_."
msgstr ""
"La mejor manera de aprender sobre las extensiones es mirar cómo están "
"escritas otras extensiones que utilizas, y discutir con otros. Discute tus "
"ideas de diseño con otros en nuestro `Discord Chat`_ o `GitHub "
"Discussions`_."

#: ../../extensiondev.rst:20
msgid ""
"The best extensions share common patterns, so that anyone familiar with "
"using one extension won't feel completely lost with another. This can only "
"work if collaboration happens early."
msgstr ""
"Las mejores extensiones comparten patrones comunes, de modo que quien esté "
"familiarizado con el uso de una extensión no se sienta completamente perdido"
" con otra. Esto sólo puede funcionar si la colaboración se produce desde el "
"principio."

#: ../../extensiondev.rst:26
msgid "Naming"
msgstr "Nombramiento"

#: ../../extensiondev.rst:28
msgid ""
"A Flask extension typically has ``flask`` in its name as a prefix or suffix."
" If it wraps another library, it should include the library name as well. "
"This makes it easy to search for extensions, and makes their purpose "
"clearer."
msgstr ""
"Una extensión de Flask normalmente tiene ``flask`` en su nombre como prefijo"
" o sufijo. Si envuelve otra biblioteca, debería incluir el nombre de la "
"biblioteca también. Esto facilita la búsqueda de extensiones, y hace que su "
"propósito sea más claro."

#: ../../extensiondev.rst:33
msgid ""
"A general Python packaging recommendation is that the install name from the "
"package index and the name used in ``import`` statements should be related. "
"The import name is lowercase, with words separated by underscores (``_``). "
"The install name is either lower case or title case, with words separated by"
" dashes (``-``). If it wraps another library, prefer using the same case as "
"that library's name."
msgstr ""
"Una recomendación general de empaquetado de Python es que el nombre de "
"instalación del índice del paquete y el nombre utilizado en las "
"declaraciones ``import`` deben estar relacionados. El nombre de importación "
"está en minúsculas, con palabras separadas por guiones bajos (``_``). El "
"nombre de instalación va en minúsculas o en mayúsculas, con las palabras "
"separadas por guiones (``-``). Si envuelve a otra biblioteca, es preferible "
"utilizar el mismo caso que el nombre de esa biblioteca."

#: ../../extensiondev.rst:40
msgid "Here are some example install and import names:"
msgstr "Estos son algunos ejemplos de nombres de instalación e importación:"

#: ../../extensiondev.rst:42
msgid "``Flask-Name`` imported as ``flask_name``"
msgstr "``Flask-Name`` importado como ``flask_name``"

#: ../../extensiondev.rst:43
msgid "``flask-name-lower`` imported as ``flask_name_lower``"
msgstr "``flask-name-lower`` importado como ``flask_name_lower``"

#: ../../extensiondev.rst:44
msgid "``Flask-ComboName`` imported as ``flask_comboname``"
msgstr "``Flask-ComboName`` importado como ``flask_comboname``"

#: ../../extensiondev.rst:45
msgid "``Name-Flask`` imported as ``name_flask``"
msgstr "``Name-Flask`` importado como ``name_flask``"

#: ../../extensiondev.rst:49
msgid "The Extension Class and Initialization"
msgstr "La clase de extensión y la inicialización"

#: ../../extensiondev.rst:51
msgid ""
"All extensions will need some entry point that initializes the extension "
"with the application. The most common pattern is to create a class that "
"represents the extension's configuration and behavior, with an ``init_app`` "
"method to apply the extension instance to the given application instance."
msgstr ""
"Todas las extensiones necesitarán algún punto de entrada que inicialice la "
"extensión con la aplicación. El patrón más común es crear una clase que "
"represente la configuración y el comportamiento de la extensión, con un "
"método ``init_app`` para aplicar la instancia de la extensión a la instancia"
" de la aplicación dada."

#: ../../extensiondev.rst:67
msgid ""
"It is important that the app is not stored on the extension, don't do "
"``self.app = app``. The only time the extension should have direct access to"
" an app is during ``init_app``, otherwise it should use :data:`current_app`."
msgstr ""
"Es importante que la aplicación no se almacene en la extensión, no hagas "
"``self.app = app``. La única vez que la extensión debe tener acceso directo "
"a una aplicación es durante ``init_app``, de lo contrario debe utilizar "
":data:`current_app``."

#: ../../extensiondev.rst:72
msgid ""
"This allows the extension to support the application factory pattern, avoids"
" circular import issues when importing the extension instance elsewhere in a"
" user's code, and makes testing with different configurations easier."
msgstr ""
"Esto permite que la extensión sea compatible con el patrón de fábrica de la "
"aplicación, evita problemas de importación circular cuando se importa la "
"instancia de la extensión en otra parte del código de un usuario, y facilita"
" las pruebas con diferentes configuraciones."

#: ../../extensiondev.rst:86
msgid ""
"Above, the ``hello`` extension instance exists independently of the "
"application. This means that other modules in a user's project can do ``from"
" project import hello`` and use the extension in blueprints before the app "
"exists."
msgstr ""
"Arriba, la instancia de la extensión ``hello`` existe independientemente de "
"la aplicación. Esto significa que otros módulos en el proyecto de un usuario"
" pueden hacer ``from project import hello`` y utilizar la extensión en los "
"blueprints antes de que la aplicación exista."

#: ../../extensiondev.rst:91
msgid ""
"The :attr:`Flask.extensions` dict can be used to store a reference to the "
"extension on the application, or some other state specific to the "
"application. Be aware that this is a single namespace, so use a name unique "
"to your extension, such as the extension's name without the \"flask\" "
"prefix."
msgstr ""
"El dict :attr:`Flask.extensions` puede utilizarse para almacenar una "
"referencia a la extensión en la aplicación, o algún otro estado específico "
"de la aplicación. Ten en cuenta que se trata de un espacio de nombres único,"
" así que utiliza un nombre único para tu extensión, como el nombre de la "
"extensión sin el prefijo \"flask\"."

#: ../../extensiondev.rst:99
msgid "Adding Behavior"
msgstr "Añadir comportamiento"

#: ../../extensiondev.rst:101
msgid ""
"There are many ways that an extension can add behavior. Any setup methods "
"that are available on the :class:`Flask` object can be used during an "
"extension's ``init_app`` method."
msgstr ""
"Hay muchas maneras de que una extensión pueda añadir comportamiento. "
"Cualquier método de configuración que esté disponible en el objeto "
":class:`Flask` puede utilizarse durante el método ``init_app`` de una "
"extensión."

#: ../../extensiondev.rst:105
msgid ""
"A common pattern is to use :meth:`~Flask.before_request` to initialize some "
"data or a connection at the beginning of each request, then "
":meth:`~Flask.teardown_request` to clean it up at the end. This can be "
"stored on :data:`g`, discussed more below."
msgstr ""
"Un patrón común es utilizar :meth:`~Flask.before_request` para inicializar "
"algunos datos o una conexión al principio de cada petición, y luego "
":meth:`~Flask.teardown_request` para limpiarla al final. Esto puede ser "
"almacenado en :data:`g`, discutido más adelante."

#: ../../extensiondev.rst:110
msgid ""
"A more lazy approach is to provide a method that initializes and caches the "
"data or connection. For example, a ``ext.get_db`` method could create a "
"database connection the first time it's called, so that a view that doesn't "
"use the database doesn't create a connection."
msgstr ""
"Un enfoque más perezoso es proporcionar un método que inicialice y almacene "
"en caché los datos o la conexión. Por ejemplo, un método ``ext.get_db`` "
"podría crear una conexión a la base de datos la primera vez que se llama, "
"para que una vista que no utilice la base de datos no cree una conexión."

#: ../../extensiondev.rst:115
msgid ""
"Besides doing something before and after every view, your extension might "
"want to add some specific views as well. In this case, you could define a "
":class:`Blueprint`, then call :meth:`~Flask.register_blueprint` during "
"``init_app`` to add the blueprint to the app."
msgstr ""
"Además de hacer algo antes y después de cada vista, tu extensión podría "
"querer añadir también algunas vistas específicas. En este caso, podrías "
"definir un :class:`Blueprint`, y luego llamar a "
":meth:`~Flask.register_blueprint` durante ``init_app`` para añadir el "
"blueprint a la aplicación."

#: ../../extensiondev.rst:122
msgid "Configuration Techniques"
msgstr "Técnicas de configuración"

#: ../../extensiondev.rst:124
msgid ""
"There can be multiple levels and sources of configuration for an extension. "
"You should consider what parts of your extension fall into each one."
msgstr ""
"Puede haber múltiples niveles y fuentes de configuración para una extensión."
" Debes considerar qué partes de tu extensión entran en cada uno de ellos."

#: ../../extensiondev.rst:128
msgid ""
"Configuration per application instance, through ``app.config`` values. This "
"is configuration that could reasonably change for each deployment of an "
"application. A common example is a URL to an external resource, such as a "
"database. Configuration keys should start with the extension's name so that "
"they don't interfere with other extensions."
msgstr ""
"Configuración por instancia de aplicación, a través de los valores de "
"``app.config``. Se trata de una configuración que podría cambiar "
"razonablemente en cada despliegue de una aplicación. Un ejemplo común es una"
" URL a un recurso externo, como una base de datos. Las claves de "
"configuración deben comenzar con el nombre de la extensión para que no "
"interfieran con otras extensiones."

#: ../../extensiondev.rst:134
msgid ""
"Configuration per extension instance, through ``__init__`` arguments. This "
"configuration usually affects how the extension is used, such that it "
"wouldn't make sense to change it per deployment."
msgstr ""
"Configuración por instancia de la extensión, a través de los argumentos "
"``__init__``. Esta configuración suele afectar al uso de la extensión, por "
"lo que no tendría sentido cambiarla por cada despliegue."

#: ../../extensiondev.rst:138
msgid ""
"Configuration per extension instance, through instance attributes and "
"decorator methods. It might be more ergonomic to assign to ``ext.value``, or"
" use a ``@ext.register`` decorator to register a function, after the "
"extension instance has been created."
msgstr ""
"Configuración por instancia de extensión, a través de atributos de instancia"
" y métodos de decorador. Podría ser más ergonómico asignar a ``ext.value``, "
"o utilizar un decorador ``@ext.register`` para registrar una función, "
"después de que la instancia de la extensión haya sido creada."

#: ../../extensiondev.rst:142
msgid ""
"Global configuration through class attributes. Changing a class attribute "
"like ``Ext.connection_class`` can customize default behavior without making "
"a subclass. This could be combined per-extension configuration to override "
"defaults."
msgstr ""
"Configuración global a través de atributos de clase. Cambiando un atributo "
"de clase como ``Ext.connection_class`` se puede personalizar el "
"comportamiento por defecto sin hacer una subclase. Esto podría combinarse "
"con la configuración por extensión para anular los valores predeterminados."

#: ../../extensiondev.rst:146
msgid ""
"Subclassing and overriding methods and attributes. Making the API of the "
"extension itself something that can be overridden provides a very powerful "
"tool for advanced customization."
msgstr ""
"Subclasificación y anulación de métodos y atributos. Hacer que la API de la "
"propia extensión sea algo que se pueda sobrescribir proporciona una "
"herramienta muy poderosa para la personalización avanzada."

#: ../../extensiondev.rst:150
msgid "The :class:`~flask.Flask` object itself uses all of these techniques."
msgstr "El propio objeto :class:`~flask.Flask` utiliza todas estas técnicas."

#: ../../extensiondev.rst:152
msgid ""
"It's up to you to decide what configuration is appropriate for your "
"extension, based on what you need and what you want to support."
msgstr ""
"Depende de ti decidir qué configuración es la adecuada para tu extensión, en"
" función de lo que necesites y de lo que quieras soportar."

#: ../../extensiondev.rst:155
msgid ""
"Configuration should not be changed after the application setup phase is "
"complete and the server begins handling requests. Configuration is global, "
"any changes to it are not guaranteed to be visible to other workers."
msgstr ""
"La configuración no debe ser modificada una vez que la fase de configuración"
" de la aplicación se ha completado y el servidor comienza a manejar las "
"solicitudes. La configuración es global, cualquier cambio en ella no se "
"garantiza que sea visible para otros trabajadores."

#: ../../extensiondev.rst:162
msgid "Data During a Request"
msgstr "Datos durante una solicitud"

#: ../../extensiondev.rst:164
msgid ""
"When writing a Flask application, the :data:`~flask.g` object is used to "
"store information during a request. For example the :doc:`tutorial "
"<tutorial/database>` stores a connection to a SQLite database as ``g.db``. "
"Extensions can also use this, with some care. Since ``g`` is a single global"
" namespace, extensions must use unique names that won't collide with user "
"data. For example, use the extension name as a prefix, or as a namespace."
msgstr ""
"Al escribir una aplicación Flask, el objeto :data:`~flask.g` se utiliza para"
" almacenar información durante una petición. Por ejemplo el :doc:`tutorial "
"<tutorial/database>` almacena una conexión a una base de datos SQLite como "
"``g.db``. Las extensiones también pueden usar esto, con cierto cuidado. Dado"
" que ``g`` es un único espacio de nombres global, las extensiones deben "
"utilizar nombres únicos que no colisionen con los datos del usuario. Por "
"ejemplo, utilizar el nombre de la extensión como prefijo, o como espacio de "
"nombres."

#: ../../extensiondev.rst:182
msgid ""
"The data in ``g`` lasts for an application context. An application context "
"is active when a request context is, or when a CLI command is run. If you're"
" storing something that should be closed, use "
":meth:`~flask.Flask.teardown_appcontext` to ensure that it gets closed when "
"the application context ends. If it should only be valid during a request, "
"or would not be used in the CLI outside a reqeust, use "
":meth:`~flask.Flask.teardown_request`."
msgstr ""
"Los datos de ``g`` duran para un contexto de aplicación. Un contexto de "
"aplicación está activo cuando un contexto de solicitud lo está, o cuando se "
"ejecuta un comando CLI. Si estás almacenando algo que debe ser cerrado, "
"utiliza :meth:`~flask.Flask.teardown_appcontext` para asegurarte de que se "
"cierra cuando el contexto de aplicación termina. Si sólo debe ser válido "
"durante una solicitud, o no se utilizará en la CLI fuera de una solicitud, "
"utilice :meth:`~flask.Flask.teardown_request`."

#: ../../extensiondev.rst:192
msgid "Views and Models"
msgstr "Vistas y modelos"

#: ../../extensiondev.rst:194
msgid ""
"Your extension views might want to interact with specific models in your "
"database, or some other extension or data connected to your application. For"
" example, let's consider a ``Flask-SimpleBlog`` extension that works with "
"Flask-SQLAlchemy to provide a ``Post`` model and views to write and read "
"posts."
msgstr ""
"Las vistas de tu extensión pueden querer interactuar con modelos específicos"
" de tu base de datos, o con alguna otra extensión o datos conectados a tu "
"aplicación. Por ejemplo, consideremos una extensión ``Flask-SimpleBlog`` que"
" trabaja con Flask-SQLAlchemy para proporcionar un modelo ``Post`` y vistas "
"para escribir y leer posts."

#: ../../extensiondev.rst:200
msgid ""
"The ``Post`` model needs to subclass the Flask-SQLAlchemy ``db.Model`` "
"object, but that's only available once you've created an instance of that "
"extension, not when your extension is defining its views. So how can the "
"view code, defined before the model exists, access the model?"
msgstr ""
"El modelo ``Post`` necesita subclasificar el objeto ``db.Model`` de Flask-"
"SQLAlchemy, pero eso sólo está disponible una vez que has creado una "
"instancia de esa extensión, no cuando tu extensión está definiendo sus "
"vistas. Entonces, ¿cómo puede el código de la vista, definido antes de que "
"el modelo exista, acceder al modelo?"

#: ../../extensiondev.rst:205
msgid ""
"One method could be to use :doc:`views`. During ``__init__``, create the "
"model, then create the views by passing the model to the view class's "
":meth:`~views.View.as_view` method."
msgstr ""
"Un método podría ser utilizar :doc:`views`. Durante ``__init__``, crea el "
"modelo, luego crea las vistas pasando el modelo al método "
":meth:`~views.View.as_view` de la clase vista."

#: ../../extensiondev.rst:235
msgid ""
"Another technique could be to use an attribute on the extension, such as "
"``self.post_model`` from above. Add the extension to ``app.extensions`` in "
"``init_app``, then access "
"``current_app.extensions[\"simple_blog\"].post_model`` from views."
msgstr ""
"Otra técnica podría ser utilizar un atributo en la extensión, como "
"``self.post_model`` de arriba. Añade la extensión a ``app.extensions`` en "
"``init_app``, y luego accede a "
"``current_app.extensions[\"simple_blog\"].post_model`` desde views."

#: ../../extensiondev.rst:240
msgid ""
"You may also want to provide base classes so that users can provide their "
"own ``Post`` model that conforms to the API your extension expects. So they "
"could implement ``class Post(blog.BasePost)``, then set it as "
"``blog.post_model``."
msgstr ""
"También puede querer proporcionar clases base para que los usuarios puedan "
"proporcionar su propio modelo ``Post`` que se ajuste a la API que su "
"extensión espera. Así que podrían implementar ``class Post(blog.BasePost)``,"
" y luego establecerlo como ``blog.post_model``."

#: ../../extensiondev.rst:245
msgid ""
"As you can see, this can get a bit complex. Unfortunately, there's no "
"perfect solution here, only different strategies and tradeoffs depending on "
"your needs and how much customization you want to offer. Luckily, this sort "
"of resource dependency is not a common need for most extensions. Remember, "
"if you need help with design, ask on our `Discord Chat`_ or `GitHub "
"Discussions`_."
msgstr ""
"Como puedes ver, esto puede ser un poco complejo. Desafortunadamente, no hay"
" una solución perfecta aquí, sólo diferentes estrategias y compensaciones "
"dependiendo de tus necesidades y de cuánta personalización quieras ofrecer. "
"Afortunadamente, este tipo de dependencia de recursos no es una necesidad "
"común para la mayoría de las extensiones. Recuerda, si necesitas ayuda con "
"el diseño, pregunta en nuestro `Chat de Discord`_ o `GitHub Discussions`_."

#: ../../extensiondev.rst:254
msgid "Recommended Extension Guidelines"
msgstr "Directrices de extensión recomendadas"

#: ../../extensiondev.rst:256
msgid ""
"Flask previously had the concept of \"approved extensions\", where the Flask"
" maintainers evaluated the quality, support, and compatibility of the "
"extensions before listing them. While the list became too difficult to "
"maintain over time, the guidelines are still relevant to all extensions "
"maintained and developed today, as they help the Flask ecosystem remain "
"consistent and compatible."
msgstr ""
"Anteriormente, Flask tenía el concepto de \"extensiones aprobadas\", donde "
"los mantenedores de Flask evaluaban la calidad, el soporte y la "
"compatibilidad de las extensiones antes de listarlas. Aunque la lista se "
"volvió demasiado difícil de mantener con el tiempo, las directrices siguen "
"siendo relevantes para todas las extensiones mantenidas y desarrolladas hoy "
"en día, ya que ayudan a que el ecosistema de Flask siga siendo consistente y"
" compatible."

#: ../../extensiondev.rst:263
msgid ""
"An extension requires a maintainer. In the event an extension author would "
"like to move beyond the project, the project should find a new maintainer "
"and transfer access to the repository, documentation, PyPI, and any other "
"services. The `Pallets-Eco`_ organization on GitHub allows for community "
"maintenance with oversight from the Pallets maintainers."
msgstr ""
"Una extensión requiere un mantenedor. En el caso de que el autor de una "
"extensión quiera dejar el proyecto, el proyecto debe encontrar un nuevo "
"mantenedor y transferir el acceso al repositorio, la documentación, PyPI y "
"cualquier otro servicio. La organización `Pallets-Eco`_ en GitHub permite el"
" mantenimiento comunitario con la supervisión de los mantenedores de "
"Pallets."

#: ../../extensiondev.rst:269
msgid ""
"The naming scheme is *Flask-ExtensionName* or *ExtensionName-Flask*. It must"
" provide exactly one package or module named ``flask_extension_name``."
msgstr ""
"El esquema de nomenclatura es *Flask-ExtensionName* o *ExtensionName-Flask*."
" Debe proporcionar exactamente un paquete o módulo llamado "
"``nombre_de_la_extensión``."

#: ../../extensiondev.rst:272
msgid ""
"The extension must use an open source license. The Python web ecosystem "
"tends to prefer BSD or MIT. It must be open source and publicly available."
msgstr ""
"La extensión debe utilizar una licencia de código abierto. El ecosistema web"
" de Python tiende a preferir BSD o MIT. Debe ser de código abierto y estar "
"disponible públicamente."

#: ../../extensiondev.rst:275
msgid "The extension's API must have the following characteristics:"
msgstr "La API de la extensión debe tener las siguientes características:"

#: ../../extensiondev.rst:277
msgid ""
"It must support multiple applications running in the same Python process. "
"Use ``current_app`` instead of ``self.app``, store configuration and state "
"per application instance."
msgstr ""
"Debe soportar múltiples aplicaciones que se ejecuten en el mismo proceso de "
"Python. Usar ``current_app`` en lugar de ``self.app``, almacenar la "
"configuración y el estado por instancia de aplicación."

#: ../../extensiondev.rst:280
msgid ""
"It must be possible to use the factory pattern for creating applications. "
"Use the ``ext.init_app()`` pattern."
msgstr ""
"Debe ser posible utilizar el patrón de fábrica para crear aplicaciones. "
"Utiliza el patrón ``ext.init_app()``."

#: ../../extensiondev.rst:283
msgid ""
"From a clone of the repository, an extension with its dependencies must be "
"installable in editable mode with ``pip install -e .``."
msgstr ""
"Desde un clon del repositorio, una extensión con sus dependencias debe ser "
"instalable en modo editable con ``pip install -e .``."

#: ../../extensiondev.rst:285
msgid ""
"It must ship tests that can be invoked with a common tool like ``tox -e "
"py``, ``nox -s test`` or ``pytest``. If not using ``tox``, the test "
"dependencies should be specified in a requirements file. The tests must be "
"part of the sdist distribution."
msgstr ""
"Debe enviar pruebas que puedan ser invocadas con una herramienta común como "
"``tox -e py``, ``nox -s test`` o ``pytest``. Si no se utiliza ``tox``, las "
"dependencias de las pruebas deben especificarse en un archivo de requisitos."
" Las pruebas deben formar parte de la distribución de sdist."

#: ../../extensiondev.rst:289
msgid ""
"A link to the documentation or project website must be in the PyPI metadata "
"or the readme. The documentation should use the Flask theme from the "
"`Official Pallets Themes`_."
msgstr ""
"Debe haber un enlace a la documentación o al sitio web del proyecto en los "
"metadatos de PyPI o en el readme. La documentación debe utilizar el tema de "
"Flask de los `Temas Oficiales de Pallets`_."

#: ../../extensiondev.rst:292
msgid ""
"The extension's dependencies should not use upper bounds or assume any "
"particular version scheme, but should use lower bounds to indicate minimum "
"compatibility support. For example, ``sqlalchemy>=1.4``."
msgstr ""
"Las dependencias de la extensión no deben usar límites superiores ni asumir "
"ningún esquema de versión en particular, sino que deben usar límites "
"inferiores para indicar el soporte mínimo de compatibilidad. Por ejemplo, "
"``sqlalchemy>=1.4``."

#: ../../extensiondev.rst:296
msgid ""
"Indicate the versions of Python supported using "
"``python_requires=\">=version\"``. Flask itself supports Python >=3.7 as of "
"December 2021, but this will update over time."
msgstr ""
"Indicar las versiones de Python soportadas usando "
"``python_requires=\">=version\"``. Flask soporta Python >=3.7 desde "
"diciembre de 2021, pero esto se actualizará con el tiempo."

#~ msgid ""
#~ "Flask, being a microframework, often requires some repetitive steps to get a"
#~ " third party library working. Many such extensions are already available on "
#~ "`PyPI`_."
#~ msgstr ""
#~ "Flask, al ser un microframework, a menudo requiere algunos pasos repetitivos"
#~ " para hacer funcionar una biblioteca de terceros. Muchas de estas "
#~ "extensiones ya están disponibles en `PyPI`_."

#~ msgid ""
#~ "If you want to create your own Flask extension for something that does not "
#~ "exist yet, this guide to extension development will help you get your "
#~ "extension running in no time and to feel like users would expect your "
#~ "extension to behave."
#~ msgstr ""
#~ "Si quieres crear tu propia extensión de Flask para algo que aún no existe, "
#~ "esta guía de desarrollo de extensiones te ayudará a que tu extensión "
#~ "funcione en poco tiempo y a que se comporte como los usuarios esperan que se"
#~ " comporte tu extensión."

#~ msgid "Anatomy of an Extension"
#~ msgstr "Anatomía de una extensión"

#~ msgid ""
#~ "Extensions are all located in a package called ``flask_something`` where "
#~ "\"something\" is the name of the library you want to bridge.  So for example"
#~ " if you plan to add support for a library named `simplexml` to Flask, you "
#~ "would name your extension's package ``flask_simplexml``."
#~ msgstr ""
#~ "Las extensiones se ubican en un paquete llamado ``flask_something`` donde "
#~ "\"algo\" es el nombre de la biblioteca que quieres puentear.  Así que, por "
#~ "ejemplo, si planeas añadir soporte para una biblioteca llamada `simplexml` a"
#~ " Flask, llamarías al paquete de tu extensión ``flask_simplexml``."

#~ msgid ""
#~ "The name of the actual extension (the human readable name) however would be "
#~ "something like \"Flask-SimpleXML\".  Make sure to include the name \"Flask\""
#~ " somewhere in that name and that you check the capitalization. This is how "
#~ "users can then register dependencies to your extension in their "
#~ ":file:`setup.py` files."
#~ msgstr ""
#~ "Sin embargo, el nombre de la extensión real (el nombre legible para los "
#~ "humanos) sería algo así como \"Flask-SimpleXML\". Asegúrate de incluir el "
#~ "nombre \"Flask\" en alguna parte de ese nombre y de comprobar las "
#~ "mayúsculas. Así es como los usuarios pueden registrar dependencias de su "
#~ "extensión en sus archivos :file:`setup.py`."

#~ msgid ""
#~ "But what do extensions look like themselves?  An extension has to ensure "
#~ "that it works with multiple Flask application instances at once.  This is a "
#~ "requirement because many people will use patterns like the "
#~ ":doc:`/patterns/appfactories` pattern to create their application as needed "
#~ "to aid unittests and to support multiple configurations. Because of that it "
#~ "is crucial that your application supports that kind of behavior."
#~ msgstr ""
#~ "Pero, ¿cómo son las extensiones en sí mismas? Una extensión tiene que "
#~ "asegurar que funciona con múltiples instancias de la aplicación Flask a la "
#~ "vez. Esto es un requisito porque mucha gente utilizará patrones como el "
#~ "patrón :doc:`/patterns/appfactories` para crear su aplicación según sea "
#~ "necesario para ayudar a los unittests y para soportar múltiples "
#~ "configuraciones. Por eso es crucial que tu aplicación soporte ese tipo de "
#~ "comportamiento."

#~ msgid ""
#~ "Most importantly the extension must be shipped with a :file:`setup.py` file "
#~ "and registered on PyPI.  Also the development checkout link should work so "
#~ "that people can easily install the development version into their virtualenv"
#~ " without having to download the library by hand."
#~ msgstr ""
#~ "Lo más importante es que la extensión debe ser enviada con un archivo "
#~ ":file:`setup.py` y registrada en PyPI. También el enlace de desarrollo debe "
#~ "funcionar para que la gente pueda instalar fácilmente la versión de "
#~ "desarrollo en su virtualenv sin tener que descargar la biblioteca a mano."

#~ msgid ""
#~ "Flask extensions must be licensed under a BSD, MIT or more liberal license "
#~ "in order to be listed in the Flask Extension Registry.  Keep in mind that "
#~ "the Flask Extension Registry is a moderated place and libraries will be "
#~ "reviewed upfront if they behave as required."
#~ msgstr ""
#~ "Las extensiones de Flask deben estar licenciadas bajo una licencia BSD, MIT "
#~ "o más liberal para poder ser listadas en el Registro de Extensiones de "
#~ "Flask. Tenga en cuenta que el Registro de Extensiones de Flask es un lugar "
#~ "moderado y las bibliotecas serán revisadas por adelantado si se comportan "
#~ "como es debido."

#~ msgid "\"Hello Flaskext!\""
#~ msgstr "\"¡Hola Flaskext!\""

#~ msgid ""
#~ "So let's get started with creating such a Flask extension.  The extension we"
#~ " want to create here will provide very basic support for SQLite3."
#~ msgstr ""
#~ "Así que vamos a empezar con la creación de dicha extensión de Flask. La "
#~ "extensión que queremos crear aquí proporcionará un soporte muy básico para "
#~ "SQLite3."

#~ msgid "First we create the following folder structure::"
#~ msgstr "Primero creamos la siguiente estructura de carpetas::"

#~ msgid "Here's the contents of the most important files:"
#~ msgstr "Aquí está el contenido de los archivos más importantes:"

#~ msgid "setup.py"
#~ msgstr "setup.py"

#~ msgid ""
#~ "The next file that is absolutely required is the :file:`setup.py` file which"
#~ " is used to install your Flask extension.  The following contents are "
#~ "something you can work with::"
#~ msgstr ""
#~ "El siguiente archivo que es absolutamente necesario es el archivo "
#~ ":file:`setup.py` que se utiliza para instalar su extensión Flask. El "
#~ "siguiente contenido es algo con lo que puedes trabajar::"

#~ msgid ""
#~ "That's a lot of code but you can really just copy/paste that from existing "
#~ "extensions and adapt."
#~ msgstr ""
#~ "Eso es mucho código, pero en realidad se puede copiar/pegar eso de las "
#~ "extensiones existentes y adaptarlo."

#~ msgid "flask_sqlite3.py"
#~ msgstr "flask_sqlite3.py"

#~ msgid ""
#~ "Now this is where your extension code goes.  But how exactly should such an "
#~ "extension look like?  What are the best practices?  Continue reading for "
#~ "some insight."
#~ msgstr ""
#~ "Aquí es donde va su código de extensión. Pero, ¿cómo debe ser exactamente "
#~ "esa extensión? ¿Cuáles son las mejores prácticas? Siga leyendo para obtener "
#~ "algunas ideas."

#~ msgid "Initializing Extensions"
#~ msgstr "Inicialización de las extensiones"

#~ msgid ""
#~ "Many extensions will need some kind of initialization step.  For example, "
#~ "consider an application that's currently connecting to SQLite like the "
#~ "documentation suggests (:doc:`/patterns/sqlite3`). So how does the extension"
#~ " know the name of the application object?"
#~ msgstr ""
#~ "Muchas extensiones necesitarán algún tipo de paso de inicialización. Por "
#~ "ejemplo, considere una aplicación que se está conectando a SQLite como "
#~ "sugiere la documentación (:doc:`/patterns/sqlite3`). Entonces, ¿cómo sabe la"
#~ " extensión el nombre del objeto de la aplicación?"

#~ msgid "Quite simple: you pass it to it."
#~ msgstr "Muy sencillo: Se lo pasas."

#~ msgid "There are two recommended ways for an extension to initialize:"
#~ msgstr "Hay dos formas recomendadas para que una extensión se inicialice:"

#~ msgid "initialization functions:"
#~ msgstr "funciones de inicialización:"

#~ msgid ""
#~ "If your extension is called `helloworld` you might have a function called "
#~ "``init_helloworld(app[, extra_args])`` that initializes the extension for "
#~ "that application.  It could attach before / after handlers etc."
#~ msgstr ""
#~ "Si tu extensión se llama `helloworld` podrías tener una función llamada "
#~ "``init_helloworld(app[, extra_args])`` que inicialice la extensión para esa "
#~ "aplicación. Podría adjuntar manejadores antes/después, etc."

#~ msgid "classes:"
#~ msgstr "classes:"

#~ msgid ""
#~ "Classes work mostly like initialization functions but can later be used to "
#~ "further change the behavior."
#~ msgstr ""
#~ "Las clases funcionan principalmente como funciones de inicialización, pero "
#~ "pueden utilizarse posteriormente para modificar el comportamiento."

#~ msgid ""
#~ "What to use depends on what you have in mind.  For the SQLite 3 extension we"
#~ " will use the class-based approach because it will provide users with an "
#~ "object that handles opening and closing database connections."
#~ msgstr ""
#~ "Qué usar depende de lo que tengas en mente. Para la extensión de SQLite 3 "
#~ "utilizaremos el enfoque basado en clases porque proporcionará a los usuarios"
#~ " un objeto que maneja la apertura y el cierre de las conexiones a la base de"
#~ " datos."

#~ msgid ""
#~ "When designing your classes, it's important to make them easily reusable at "
#~ "the module level. This means the object itself must not under any "
#~ "circumstances store any application specific state and must be shareable "
#~ "between different applications."
#~ msgstr ""
#~ "Cuando diseñes tus clases, es importante que sean fácilmente reutilizables a"
#~ " nivel de módulo. Esto significa que el objeto en sí mismo no debe almacenar"
#~ " bajo ninguna circunstancia ningún estado específico de la aplicación y debe"
#~ " ser compartible entre diferentes aplicaciones."

#~ msgid "The Extension Code"
#~ msgstr "El Código de la Extensión"

#~ msgid "Here's the contents of the `flask_sqlite3.py` for copy/paste::"
#~ msgstr "Aquí está el contenido del `flask_sqlite3.py` para copiar/pegar::"

#~ msgid "So here's what these lines of code do:"
#~ msgstr "Esto es lo que hacen estas líneas de código:"

#~ msgid ""
#~ "The ``__init__`` method takes an optional app object and, if supplied, will "
#~ "call ``init_app``."
#~ msgstr ""
#~ "El método ``__init__`` toma un objeto app opcional y, si se suministra, "
#~ "llamará a ``init_app``."

#~ msgid ""
#~ "The ``init_app`` method exists so that the ``SQLite3`` object can be "
#~ "instantiated without requiring an app object.  This method supports the "
#~ "factory pattern for creating applications.  The ``init_app`` will set the "
#~ "configuration for the database, defaulting to an in memory database if no "
#~ "configuration is supplied.  In addition, the ``init_app`` method attaches "
#~ "the ``teardown`` handler."
#~ msgstr ""
#~ "El método ``init_app`` existe para que el objeto ``SQLite3`` pueda ser "
#~ "instanciado sin requerir un objeto app.  Este método soporta el patrón de "
#~ "fábrica para crear aplicaciones. El método ``init_app`` establecerá la "
#~ "configuración de la base de datos, por defecto una base de datos en memoria "
#~ "si no se proporciona ninguna configuración. Además, el método ``init_app`` "
#~ "adjunta el manejador ``teardown``."

#~ msgid "Next, we define a ``connect`` method that opens a database connection."
#~ msgstr ""
#~ "A continuación, definimos un método ``connect`` que abre una conexión a la "
#~ "base de datos."

#~ msgid ""
#~ "Finally, we add a ``connection`` property that on first access opens the "
#~ "database connection and stores it on the context.  This is also the "
#~ "recommended way to handling resources: fetch resources lazily the first time"
#~ " they are used."
#~ msgstr ""
#~ "Finalmente, añadimos una propiedad ``connection`` que en el primer acceso "
#~ "abre la conexión a la base de datos y la almacena en el contexto.  Esta es "
#~ "también la forma recomendada de manejar los recursos: obtener los recursos "
#~ "perezosamente la primera vez que se usan."

#~ msgid ""
#~ "Note here that we're attaching our database connection to the top "
#~ "application context via ``_app_ctx_stack.top``. Extensions should use the "
#~ "top context for storing their own information with a sufficiently complex "
#~ "name."
#~ msgstr ""
#~ "Ten en cuenta que estamos adjuntando nuestra conexión de base de datos al "
#~ "contexto superior de la aplicación a través de ``_app_ctx_stack.top``. Las "
#~ "extensiones deben utilizar el contexto superior para almacenar su propia "
#~ "información con un nombre suficientemente complejo."

#~ msgid ""
#~ "So why did we decide on a class-based approach here?  Because using our "
#~ "extension looks something like this::"
#~ msgstr ""
#~ "Entonces, ¿por qué nos decidimos por un enfoque basado en clases? Porque el "
#~ "uso de nuestra extensión se parece a esto::"

#~ msgid "You can then use the database from views like this::"
#~ msgstr "A continuación, puede utilizar la base de datos de las vistas así::"

#~ msgid ""
#~ "Likewise if you are outside of a request you can use the database by pushing"
#~ " an app context::"
#~ msgstr ""
#~ "Del mismo modo, si usted está fuera de una solicitud puede utilizar la base "
#~ "de datos empujando un contexto de la aplicación::"

#~ msgid ""
#~ "At the end of the ``with`` block the teardown handles will be executed "
#~ "automatically."
#~ msgstr ""
#~ "Al final del bloque ``with`` se ejecutarán automáticamente las asas de "
#~ "desmontaje."

#~ msgid ""
#~ "Additionally, the ``init_app`` method is used to support the factory pattern"
#~ " for creating apps::"
#~ msgstr ""
#~ "Además, el método ``init_app`` se utiliza para soportar el patrón de fábrica"
#~ " para la creación de aplicaciones::"

#~ msgid ""
#~ "Keep in mind that supporting this factory pattern for creating apps is "
#~ "required for approved flask extensions (described below)."
#~ msgstr ""
#~ "Ten en cuenta que el soporte de este patrón de fábrica para la creación de "
#~ "aplicaciones es necesario para las extensiones de flask aprobadas (descritas"
#~ " a continuación)."

#~ msgid "Note on ``init_app``"
#~ msgstr "Nota sobre ``init_app``"

#~ msgid ""
#~ "As you noticed, ``init_app`` does not assign ``app`` to ``self``.  This is "
#~ "intentional!  Class based Flask extensions must only store the application "
#~ "on the object when the application was passed to the constructor.  This "
#~ "tells the extension: I am not interested in using multiple applications."
#~ msgstr ""
#~ "Como has notado, ``init_app`` no asigna ``app`` a ``self``. Esto es "
#~ "intencionado. Las extensiones de Flask basadas en clases sólo deben "
#~ "almacenar la aplicación en el objeto cuando la aplicación fue pasada al "
#~ "constructor. Esto le dice a la extensión: No estoy interesado en usar "
#~ "múltiples aplicaciones."

#~ msgid ""
#~ "When the extension needs to find the current application and it does not "
#~ "have a reference to it, it must either use the :data:`~flask.current_app` "
#~ "context local or change the API in a way that you can pass the application "
#~ "explicitly."
#~ msgstr ""
#~ "Cuando la extensión necesita encontrar la aplicación actual y no tiene una "
#~ "referencia a ella, debe usar el contexto local :data:`~flask.current_app` o "
#~ "cambiar la API de manera que pueda pasar la aplicación explícitamente."

#~ msgid "Using _app_ctx_stack"
#~ msgstr "Uso de _app_ctx_stack"

#~ msgid ""
#~ "In the example above, before every request, a ``sqlite3_db`` variable is "
#~ "assigned to ``_app_ctx_stack.top``.  In a view function, this variable is "
#~ "accessible using the ``connection`` property of ``SQLite3``.  During the "
#~ "teardown of a request, the ``sqlite3_db`` connection is closed.  By using "
#~ "this pattern, the *same* connection to the sqlite3 database is accessible to"
#~ " anything that needs it for the duration of the request."
#~ msgstr ""
#~ "En el ejemplo anterior, antes de cada petición, se asigna una variable "
#~ "``sqlite3_db`` a ``_app_ctx_stack.top``. En una función de vista, esta "
#~ "variable es accesible usando la propiedad ``connection`` de ``SQLite3``. "
#~ "Durante el desmontaje de una petición, la conexión ``sqlite3_db`` se cierra."
#~ " Usando este patrón, la *misma* conexión a la base de datos sqlite3 es "
#~ "accesible a cualquier cosa que la necesite mientras dure la petición."

#~ msgid "Learn from Others"
#~ msgstr "Aprender de los demás"

#~ msgid ""
#~ "This documentation only touches the bare minimum for extension development. "
#~ "If you want to learn more, it's a very good idea to check out existing "
#~ "extensions on the `PyPI`_.  If you feel lost there is still the "
#~ "`mailinglist`_ and the `Discord server`_ to get some ideas for nice looking "
#~ "APIs.  Especially if you do something nobody before you did, it might be a "
#~ "very good idea to get some more input.  This not only generates useful "
#~ "feedback on what people might want from an extension, but also avoids having"
#~ " multiple developers working in isolation on pretty much the same problem."
#~ msgstr ""
#~ "Esta documentación sólo toca lo mínimo para el desarrollo de extensiones. Si"
#~ " quieres aprender más, es una muy buena idea revisar las extensiones "
#~ "existentes en la `PyPI`_. Si te sientes perdido todavía está la "
#~ "`mailinglist`_ y el `Discord server`_ para obtener algunas ideas de APIs de "
#~ "buen aspecto. Especialmente si haces algo que nadie hizo antes, puede ser "
#~ "una muy buena idea para obtener algunas aportaciones más. Esto no sólo "
#~ "genera una retroalimentación útil sobre lo que la gente podría querer de una"
#~ " extensión, sino que también evita tener múltiples desarrolladores "
#~ "trabajando de forma aislada en prácticamente el mismo problema."

#~ msgid ""
#~ "Remember: good API design is hard, so introduce your project on the mailing "
#~ "list, and let other developers give you a helping hand with designing the "
#~ "API."
#~ msgstr ""
#~ "Recuerda: Un buen diseño de API es difícil, así que presenta tu proyecto en "
#~ "la lista de correo y deja que otros desarrolladores te echen una mano con el"
#~ " diseño de la API."

#~ msgid ""
#~ "The best Flask extensions are extensions that share common idioms for the "
#~ "API.  And this can only work if collaboration happens early."
#~ msgstr ""
#~ "Las mejores extensiones de Flask son las que comparten modismos comunes para"
#~ " la API.  Y esto solo puede funcionar si la colaboración se produce desde el"
#~ " principio."

#~ msgid "Approved Extensions"
#~ msgstr "Extensiones aprobadas"

#~ msgid ""
#~ "Flask previously had the concept of approved extensions. These came with "
#~ "some vetting of support and compatibility. While this list became too "
#~ "difficult to maintain over time, the guidelines are still relevant to all "
#~ "extensions maintained and developed today, as they help the Flask ecosystem "
#~ "remain consistent and compatible."
#~ msgstr ""
#~ "Flask tenía anteriormente el concepto de extensiones aprobadas. Éstas venían"
#~ " acompañadas de una lista de soporte y compatibilidad. Aunque esta lista se "
#~ "volvió demasiado difícil de mantener con el tiempo, las directrices siguen "
#~ "siendo relevantes para todas las extensiones mantenidas y desarrolladas hoy "
#~ "en día, ya que ayudan a que el ecosistema Flask siga siendo consistente y "
#~ "compatible."

#~ msgid ""
#~ "An approved Flask extension requires a maintainer. In the event an extension"
#~ " author would like to move beyond the project, the project should find a new"
#~ " maintainer and transfer access to the repository, documentation, PyPI, and "
#~ "any other services. If no maintainer is available, give access to the "
#~ "Pallets core team."
#~ msgstr ""
#~ "Una extensión Flask aprobada requiere un mantenedor. En el caso de que el "
#~ "autor de una extensión quiera dejar el proyecto, el proyecto debe encontrar "
#~ "un nuevo mantenedor y transferir el acceso al repositorio, la documentación,"
#~ " PyPI y cualquier otro servicio. Si no hay un mantenedor disponible, dar "
#~ "acceso al equipo central de Pallets."

#~ msgid ""
#~ "It must ship a testing suite that can be invoked with ``tox -e py`` or "
#~ "``pytest``. If not using ``tox``, the test dependencies should be specified "
#~ "in a ``requirements.txt`` file. The tests must be part of the sdist "
#~ "distribution."
#~ msgstr ""
#~ "Debe enviar un conjunto de pruebas que pueda ser invocado con ``tox -e py`` "
#~ "o ``pytest``. Si no se utiliza ``tox``, las dependencias de las pruebas "
#~ "deben especificarse en un archivo ``requirements.txt``. Los tests deben "
#~ "formar parte de la distribución de sdist."

#~ msgid ""
#~ "The documentation must use the ``flask`` theme from the `Official Pallets "
#~ "Themes`_. A link to the documentation or project website must be in the PyPI"
#~ " metadata or the readme."
#~ msgstr ""
#~ "La documentación debe utilizar el tema ``flask`` de la sección `Official "
#~ "Pallets Themes`_. Un enlace a la documentación o al sitio web del proyecto "
#~ "debe estar en los metadatos de PyPI o en el readme."

#~ msgid ""
#~ "For maximum compatibility, the extension should support the same versions of"
#~ " Python that Flask supports. 3.6+ is recommended as of 2020. Use "
#~ "``python_requires=\">= 3.6\"`` in ``setup.py`` to indicate supported "
#~ "versions."
#~ msgstr ""
#~ "Para una máxima compatibilidad, la extensión debe soportar las mismas "
#~ "versiones de Python que soporta Flask. Se recomienda la versión 3.6+ a "
#~ "partir de 2020. Utiliza ``python_requires=\">= 3.6\"`` en ``setup.py`` para "
#~ "indicar las versiones soportadas."
