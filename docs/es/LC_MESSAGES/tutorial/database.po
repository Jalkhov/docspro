# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/database.rst:4
msgid "Define and Access the Database"
msgstr "Definir y acceder a la base de datos"

#: ../../tutorial/database.rst:6
msgid ""
"The application will use a `SQLite`_ database to store users and posts. Python "
"comes with built-in support for SQLite in the :mod:`sqlite3` module."
msgstr ""
"La aplicación utilizará una base de datos `SQLite`_ para almacenar los "
"usuarios y los mensajes. Python viene con soporte incorporado para SQLite en "
"el módulo :mod:`sqlite3`."

#: ../../tutorial/database.rst:10
msgid ""
"SQLite is convenient because it doesn't require setting up a separate database "
"server and is built-in to Python. However, if concurrent requests try to write "
"to the database at the same time, they will slow down as each write happens "
"sequentially. Small applications won't notice this. Once you become big, you "
"may want to switch to a different database."
msgstr ""
"SQLite es conveniente porque no requiere configurar un servidor de base de "
"datos separado y está incorporado a Python. Sin embargo, si las solicitudes "
"concurrentes intentan escribir en la base de datos al mismo tiempo, se "
"ralentizarán ya que cada escritura se produce de forma secuencial. Las "
"aplicaciones pequeñas no notarán esto. Una vez que se convierta en grande, es "
"posible que desee cambiar a una base de datos diferente."

#: ../../tutorial/database.rst:17
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar with "
"it, the SQLite docs describe the `language`_."
msgstr ""
"El tutorial no entra en detalles sobre SQL. Si no estás familiarizado con él, "
"los documentos de SQLite describen el `lenguaje`_."

#: ../../tutorial/database.rst:25
msgid "Connect to the Database"
msgstr "Conectar con la base de datos"

#: ../../tutorial/database.rst:27
msgid ""
"The first thing to do when working with a SQLite database (and most other "
"Python database libraries) is to create a connection to it. Any queries and "
"operations are performed using the connection, which is closed after the work "
"is finished."
msgstr ""
"Lo primero que hay que hacer cuando se trabaja con una base de datos SQLite (y "
"con la mayoría de las bibliotecas de bases de datos de Python) es crear una "
"conexión a la misma. Todas las consultas y operaciones se realizan utilizando "
"la conexión, que se cierra una vez finalizado el trabajo."

#: ../../tutorial/database.rst:32
msgid ""
"In web applications this connection is typically tied to the request. It is "
"created at some point when handling a request, and closed before the response "
"is sent."
msgstr ""
"En las aplicaciones web esta conexión suele estar ligada a la petición. Se "
"crea en algún momento cuando se maneja una solicitud, y se cierra antes de que "
"se envíe la respuesta."

#: ../../tutorial/database.rst:36 ../../tutorial/database.rst:120
#: ../../tutorial/database.rst:157
msgid "``flaskr/db.py``"
msgstr "``flaskr/db.py``"

#: ../../tutorial/database.rst:63
msgid ""
":data:`g` is a special object that is unique for each request. It is used to "
"store data that might be accessed by multiple functions during the request. "
"The connection is stored and reused instead of creating a new connection if "
"``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` es un objeto especial que es único para cada solicitud. Se utiliza "
"para almacenar datos a los que podrían acceder varias funciones durante la "
"petición. La conexión se almacena y se reutiliza en lugar de crear una nueva "
"conexión si se llama a ``get_db`` por segunda vez en la misma petición."

#: ../../tutorial/database.rst:69
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, there "
"is no application object when writing the rest of your code. ``get_db`` will "
"be called when the application has been created and is handling a request, so :"
"data:`current_app` can be used."
msgstr ""
":data:`current_app` es otro objeto especial que apunta a la aplicación Flask "
"que maneja la solicitud. Como has utilizado una fábrica de aplicaciones, no "
"hay ningún objeto de aplicación cuando escribes el resto de tu código. La "
"llamada a ``get_db`` se realizará cuando la aplicación haya sido creada y esté "
"gestionando una petición, por lo que se puede utilizar :data:`current_app`."

#: ../../tutorial/database.rst:75
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at by the "
"``DATABASE`` configuration key. This file doesn't have to exist yet, and won't "
"until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` establece una conexión con el fichero apuntado por la "
"clave de configuración ``DATABASE``. Este archivo no tiene que existir "
"todavía, y no lo hará hasta que se inicialice la base de datos más tarde."

#: ../../tutorial/database.rst:79
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave like "
"dicts. This allows accessing the columns by name."
msgstr ""
":class:`sqlite3.Row` indica a la conexión que devuelva filas que se comporten "
"como dicts. Esto permite acceder a las columnas por su nombre."

#: ../../tutorial/database.rst:82
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` was "
"set. If the connection exists, it is closed. Further down you will tell your "
"application about the ``close_db`` function in the application factory so that "
"it is called after each request."
msgstr ""
"``close_db`` comprueba si se ha creado una conexión comprobando si se ha "
"establecido ``g.db``. Si la conexión existe, se cierra. Más adelante le dirás "
"a tu aplicación sobre la función ``close_db`` en la fábrica de la aplicación "
"para que sea llamada después de cada petición."

#: ../../tutorial/database.rst:89
msgid "Create the Tables"
msgstr "Crear las tablas"

#: ../../tutorial/database.rst:91
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be created "
"before you can store and retrieve data. Flaskr will store users in the "
"``user`` table, and posts in the ``post`` table. Create a file with the SQL "
"commands needed to create empty tables:"
msgstr ""
"En SQLite, los datos se almacenan en *tablas* y *columnas*. Estas deben ser "
"creadas antes de poder almacenar y recuperar los datos. Flaskr almacenará los "
"usuarios en la tabla ``user``, y las entradas en la tabla ``post``. Crea un "
"archivo con los comandos SQL necesarios para crear tablas vacías:"

#: ../../tutorial/database.rst:96
msgid "``flaskr/schema.sql``"
msgstr "``flaskr/schema.sql``"

#: ../../tutorial/database.rst:117
msgid ""
"Add the Python functions that will run these SQL commands to the ``db.py`` "
"file:"
msgstr ""
"Añade las funciones de Python que ejecutarán estos comandos SQL al archivo "
"``db.py``:"

#: ../../tutorial/database.rst:137
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to the "
"``flaskr`` package, which is useful since you won't necessarily know where "
"that location is when deploying the application later. ``get_db`` returns a "
"database connection, which is used to execute the commands read from the file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` abre un archivo relativo al "
"paquete ``flaskr``, lo cual es útil ya que no necesariamente se sabrá dónde "
"está esa ubicación cuando se despliegue la aplicación posteriormente. "
"``get_db`` devuelve una conexión a la base de datos, que se utiliza para "
"ejecutar los comandos leídos del archivo."

#: ../../tutorial/database.rst:143
msgid ""
":func:`click.command` defines a command line command called ``init-db`` that "
"calls the ``init_db`` function and shows a success message to the user. You "
"can read :doc:`/cli` to learn more about writing commands."
msgstr ""
":func:`click.command` define un comando de línea de comandos llamado ``init-"
"db`` que llama a la función ``init_db`` y muestra un mensaje de éxito al "
"usuario. Puedes leer :doc:`/cli` para aprender más sobre la escritura de "
"comandos."

#: ../../tutorial/database.rst:149
msgid "Register with the Application"
msgstr "Regístrese con la aplicación"

#: ../../tutorial/database.rst:151
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered with "
"the application instance; otherwise, they won't be used by the application. "
"However, since you're using a factory function, that instance isn't available "
"when writing the functions. Instead, write a function that takes an "
"application and does the registration."
msgstr ""
"Las funciones ``close_db`` y ``init_db_command`` necesitan ser registradas con "
"la instancia de la aplicación; de lo contrario, no serán utilizadas por la "
"aplicación. Sin embargo, como estás usando una función de fábrica, esa "
"instancia no está disponible cuando escribes las funciones. En su lugar, "
"escribe una función que tome una aplicación y haga el registro."

#: ../../tutorial/database.rst:164
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells Flask to "
"call that function when cleaning up after returning the response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` le dice a Flask "
"que llame a esa función cuando se limpie después de devolver la respuesta."

#: ../../tutorial/database.rst:168
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new command "
"that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` añade un nuevo comando "
"que puede ser llamado con el comando ``flask``."

#: ../../tutorial/database.rst:171
msgid ""
"Import and call this function from the factory. Place the new code at the end "
"of the factory function before returning the app."
msgstr ""
"Importa y llama a esta función desde la fábrica. Coloca el nuevo código al "
"final de la función de fábrica antes de devolver la aplicación."

#: ../../tutorial/database.rst:188
msgid "Initialize the Database File"
msgstr "Inicializar el archivo de la base de datos"

#: ../../tutorial/database.rst:190
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called using "
"the ``flask`` command, similar to the ``run`` command from the previous page."
msgstr ""
"Ahora que ``init-db`` ha sido registrado con la aplicación, puede ser llamado "
"usando el comando ``flask``, similar al comando ``run`` de la página anterior."

#: ../../tutorial/database.rst:196
msgid ""
"If you're still running the server from the previous page, you can either stop "
"the server, or run this command in a new terminal. If you use a new terminal, "
"remember to change to your project directory and activate the env as described "
"in :doc:`/installation`. You'll also need to set ``FLASK_APP`` and "
"``FLASK_ENV`` as shown on the previous page."
msgstr ""
"Si todavía está ejecutando el servidor de la página anterior, puede detener el "
"servidor o ejecutar este comando en un nuevo terminal. Si usas un nuevo "
"terminal, recuerda cambiar al directorio de tu proyecto y activar la env como "
"se describe en :doc:`/installation`. También necesitarás configurar "
"``FLASK_APP`` y ``FLASK_ENV`` como se muestra en la página anterior."

#: ../../tutorial/database.rst:203
msgid "Run the ``init-db`` command:"
msgstr "Ejecuta el comando ``init-db``:"

#: ../../tutorial/database.rst:210
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in your "
"project."
msgstr ""
"Ahora habrá un archivo ``flaskr.sqlite`` en la carpeta ``instance`` de tu "
"proyecto."

#: ../../tutorial/database.rst:213
msgid "Continue to :doc:`views`."
msgstr "Continúa con :doc:`views`."
