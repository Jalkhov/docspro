# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../tutorial/blog.rst:4
msgid "Blog Blueprint"
msgstr "Blog Blueprint"

#: ../../tutorial/blog.rst:6
msgid ""
"You'll use the same techniques you learned about when writing the "
"authentication blueprint to write the blog blueprint. The blog should list all "
"posts, allow logged in users to create posts, and allow the author of a post "
"to edit or delete it."
msgstr ""
"Utilizarás las mismas técnicas que aprendiste al escribir el Blueprint de "
"autenticación para escribir el Blueprint del blog. El blog debe listar todas "
"las entradas, permitir a los usuarios registrados crear entradas, y permitir "
"al autor de una entrada editarla o eliminarla."

#: ../../tutorial/blog.rst:11
msgid ""
"As you implement each view, keep the development server running. As you save "
"your changes, try going to the URL in your browser and testing them out."
msgstr ""
"A medida que implementes cada vista, mantén el servidor de desarrollo en "
"funcionamiento. A medida que guarde los cambios, intente ir a la URL en su "
"navegador y probarlos."

#: ../../tutorial/blog.rst:16
msgid "The Blueprint"
msgstr "El Blueprint"

#: ../../tutorial/blog.rst:18
msgid "Define the blueprint and register it in the application factory."
msgstr "Define el blueprint y regístralo en la fábrica de aplicaciones."

#: ../../tutorial/blog.rst:20 ../../tutorial/blog.rst:76
#: ../../tutorial/blog.rst:142 ../../tutorial/blog.rst:198
#: ../../tutorial/blog.rst:228 ../../tutorial/blog.rst:320
msgid "``flaskr/blog.py``"
msgstr "``flaskr/blog.py``"

#: ../../tutorial/blog.rst:33 ../../tutorial/views.rst:46
msgid ""
"Import and register the blueprint from the factory using :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Place the new code at the "
"end of the factory function before returning the app."
msgstr ""
"Importa y registra el blueprint de la fábrica usando :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Coloca el nuevo código al "
"final de la función de fábrica antes de devolver la app."

#: ../../tutorial/blog.rst:37 ../../tutorial/database.rst:174
#: ../../tutorial/factory.rst:35 ../../tutorial/views.rst:50
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/blog.rst:51
msgid ""
"Unlike the auth blueprint, the blog blueprint does not have a ``url_prefix``. "
"So the ``index`` view will be at ``/``, the ``create`` view at ``/create``, "
"and so on. The blog is the main feature of Flaskr, so it makes sense that the "
"blog index will be the main index."
msgstr ""
"A diferencia del plano de autenticidad, el blueprint del blog no tiene una "
"``url_prefix``. Así que la vista ``index`` estará en ``/``, la vista "
"``create`` en ``/create``, y así sucesivamente. El blog es la característica "
"principal de Flaskr, así que tiene sentido que el índice del blog sea el "
"índice principal."

#: ../../tutorial/blog.rst:56
msgid ""
"However, the endpoint for the ``index`` view defined below will be ``blog."
"index``. Some of the authentication views referred to a plain ``index`` "
"endpoint. :meth:`app.add_url_rule() <Flask.add_url_rule>` associates the "
"endpoint name ``'index'`` with the ``/`` url so that ``url_for('index')`` or "
"``url_for('blog.index')`` will both work, generating the same ``/`` URL either "
"way."
msgstr ""
"Sin embargo, el endpoint para la vista ``index`` definida a continuación será "
"``blog.index``. Algunas de las vistas de autenticación hacían referencia a un "
"punto final simple ``index``. :meth:`app.add_url_rule() <Flask.add_url_rule>` "
"asocia el nombre del punto final ``'index`` con la url ``/`` para que "
"``url_for('index')`` o ``url_for('blog.index')`` funcionen ambos, generando la "
"misma URL ``/`` de cualquier manera."

#: ../../tutorial/blog.rst:63
msgid ""
"In another application you might give the blog blueprint a ``url_prefix`` and "
"define a separate ``index`` view in the application factory, similar to the "
"``hello`` view. Then the ``index`` and ``blog.index`` endpoints and URLs would "
"be different."
msgstr ""
"En otra aplicación podrías dar al blueprint del blog un ``url_prefix`` y "
"definir una vista ``index`` separada en la fábrica de la aplicación, similar a "
"la vista ``hello``. Entonces los endpoints y las URL de ``index`` y ``blog."
"index`` serían diferentes."

#: ../../tutorial/blog.rst:70
msgid "Index"
msgstr "Índice"

#: ../../tutorial/blog.rst:72
msgid ""
"The index will show all of the posts, most recent first. A ``JOIN`` is used so "
"that the author information from the ``user`` table is available in the result."
msgstr ""
"El índice mostrará todos los mensajes, el más reciente primero. Se utiliza un "
"``JOIN`` para que la información del autor de la tabla ``user`` esté "
"disponible en el resultado."

#: ../../tutorial/blog.rst:89
msgid "``flaskr/templates/blog/index.html``"
msgstr "``flaskr/templates/blog/index.html``"

#: ../../tutorial/blog.rst:121
msgid ""
"When a user is logged in, the ``header`` block adds a link to the ``create`` "
"view. When the user is the author of a post, they'll see an \"Edit\" link to "
"the ``update`` view for that post. ``loop.last`` is a special variable "
"available inside `Jinja for loops`_. It's used to display a line after each "
"post except the last one, to visually separate them."
msgstr ""
"Cuando un usuario está conectado, el bloque ``header`` añade un enlace a la "
"vista ``create``. Cuando el usuario es el autor de una entrada, verá un enlace "
"\"Edit\" a la vista ``update`` para esa entrada. ``loop.last`` es una variable "
"especial disponible dentro de `Jinja para bucles`_. Se utiliza para mostrar "
"una línea después de cada entrada excepto la última, para separarlas "
"visualmente."

#: ../../tutorial/blog.rst:132
msgid "Create"
msgstr "Crear"

#: ../../tutorial/blog.rst:134
msgid ""
"The ``create`` view works the same as the auth ``register`` view. Either the "
"form is displayed, or the posted data is validated and the post is added to "
"the database or an error is shown."
msgstr ""
"La vista ``create`` funciona igual que la vista auth ``register``. O bien se "
"muestra el formulario, o bien se validan los datos publicados y se añaden a la "
"base de datos o se muestra un error."

#: ../../tutorial/blog.rst:138
msgid ""
"The ``login_required`` decorator you wrote earlier is used on the blog views. "
"A user must be logged in to visit these views, otherwise they will be "
"redirected to the login page."
msgstr ""
"El decorador ``login_required`` que escribiste antes se utiliza en las vistas "
"del blog. Un usuario debe estar conectado para visitar estas vistas, de lo "
"contrario será redirigido a la página de inicio de sesión."

#: ../../tutorial/blog.rst:170
msgid "``flaskr/templates/blog/create.html``"
msgstr "``flaskr/templates/blog/create.html``"

#: ../../tutorial/blog.rst:191
msgid "Update"
msgstr "Actualización"

#: ../../tutorial/blog.rst:193
msgid ""
"Both the ``update`` and ``delete`` views will need to fetch a ``post`` by "
"``id`` and check if the author matches the logged in user. To avoid "
"duplicating code, you can write a function to get the ``post`` and call it "
"from each view."
msgstr ""
"Tanto la vista ``update`` como la vista ``delete`` necesitarán obtener un "
"``post`` por ``id`` y comprobar si el autor coincide con el usuario conectado. "
"Para evitar duplicar el código, puedes escribir una función para obtener el "
"``post`` y llamarla desde cada vista."

#: ../../tutorial/blog.rst:217
msgid ""
":func:`abort` will raise a special exception that returns an HTTP status code. "
"It takes an optional message to show with the error, otherwise a default "
"message is used. ``404`` means \"Not Found\", and ``403`` means \"Forbidden\". "
"(``401`` means \"Unauthorized\", but you redirect to the login page instead of "
"returning that status.)"
msgstr ""
":func:`abort` lanzará una excepción especial que devuelve un código de estado "
"HTTP. Toma un mensaje opcional para mostrar con el error, de lo contrario se "
"utiliza un mensaje por defecto. ``404`` significa \"Not Found\", y ``403`` "
"significa \"Forbidden\". (``401`` significa \"Unauthorized\", pero redirige a "
"la página de acceso en lugar de devolver ese estado)."

#: ../../tutorial/blog.rst:223
msgid ""
"The ``check_author`` argument is defined so that the function can be used to "
"get a ``post`` without checking the author. This would be useful if you wrote "
"a view to show an individual post on a page, where the user doesn't matter "
"because they're not modifying the post."
msgstr ""
"El argumento ``check_author`` se define para que la función pueda ser "
"utilizada para obtener un ``post`` sin comprobar el autor. Esto sería útil si "
"escribes una vista para mostrar un post individual en una página, donde el "
"usuario no importa porque no está modificando el post."

#: ../../tutorial/blog.rst:258
msgid ""
"Unlike the views you've written so far, the ``update`` function takes an "
"argument, ``id``. That corresponds to the ``<int:id>`` in the route. A real "
"URL will look like ``/1/update``. Flask will capture the ``1``, ensure it's "
"an :class:`int`, and pass it as the ``id`` argument. If you don't specify "
"``int:`` and instead do ``<id>``, it will be a string. To generate a URL to "
"the update page, :func:`url_for` needs to be passed the ``id`` so it knows "
"what to fill in: ``url_for('blog.update', id=post['id'])``. This is also in "
"the ``index.html`` file above."
msgstr ""
"A diferencia de las vistas que has escrito hasta ahora, la función ``update`` "
"toma un argumento, ``id``. Este corresponde al ``<int:id>` de la ruta. Una URL "
"real será como ``/1/update``. Flask capturará el ``1``, se asegurará de que es "
"un :class:`int`, y lo pasará como el argumento ``id``. Si no especificas ``int:"
"`` y en su lugar haces ``<id>``, será una cadena. Para generar una URL a la "
"página de actualización, a :func:`url_for` hay que pasarle el ``id`` para que "
"sepa qué rellenar: ``url_for('blog.update', id=post['id'])``. Esto también "
"está en el archivo ``index.html`` de arriba."

#: ../../tutorial/blog.rst:268
msgid ""
"The ``create`` and ``update`` views look very similar. The main difference is "
"that the ``update`` view uses a ``post`` object and an ``UPDATE`` query "
"instead of an ``INSERT``. With some clever refactoring, you could use one view "
"and template for both actions, but for the tutorial it's clearer to keep them "
"separate."
msgstr ""
"Las vistas ``create`` y ``update`` son muy similares. La principal diferencia "
"es que la vista ``update`` utiliza un objeto ``post`` y una consulta "
"``UPDATE`` en lugar de un ``INSERT``. Con un poco de refactorización "
"inteligente, podrías usar una vista y una plantilla para ambas acciones, pero "
"para el tutorial es más claro mantenerlas separadas."

#: ../../tutorial/blog.rst:274
msgid "``flaskr/templates/blog/update.html``"
msgstr "``flaskr/templates/blog/update.html``"

#: ../../tutorial/blog.rst:298
msgid ""
"This template has two forms. The first posts the edited data to the current "
"page (``/<id>/update``). The other form contains only a button and specifies "
"an ``action`` attribute that posts to the delete view instead. The button uses "
"some JavaScript to show a confirmation dialog before submitting."
msgstr ""
"Esta plantilla tiene dos formas. El primero publica los datos editados en la "
"página actual (``/<id>/update``). El otro formulario contiene sólo un botón y "
"especifica un atributo ``action`` que envía a la vista de borrado. El botón "
"utiliza algo de JavaScript para mostrar un diálogo de confirmación antes de "
"enviarlo."

#: ../../tutorial/blog.rst:304
msgid ""
"The pattern ``{{ request.form['title'] or post['title'] }}`` is used to choose "
"what data appears in the form. When the form hasn't been submitted, the "
"original ``post`` data appears, but if invalid form data was posted you want "
"to display that so the user can fix the error, so ``request.form`` is used "
"instead. :data:`request` is another variable that's automatically available in "
"templates."
msgstr ""
"El patrón ``{{ request.form['title'] o post['title'] }}` se utiliza para "
"elegir qué datos aparecen en el formulario. Cuando el formulario no se ha "
"enviado, aparecen los datos originales de ``post``, pero si se han publicado "
"datos de formulario no válidos, se desea mostrarlos para que el usuario pueda "
"solucionar el error, por lo que se utiliza ``request.form`` en su lugar. :data:"
"`request` es otra variable que está disponible automáticamente en las "
"plantillas."

#: ../../tutorial/blog.rst:313
msgid "Delete"
msgstr "Borrar"

#: ../../tutorial/blog.rst:315
msgid ""
"The delete view doesn't have its own template, the delete button is part of "
"``update.html`` and posts to the ``/<id>/delete`` URL. Since there is no "
"template, it will only handle the ``POST`` method and then redirect to the "
"``index`` view."
msgstr ""
"La vista de borrado no tiene su propia plantilla, el botón de borrado es parte "
"de ``update.html`` y publica en la URL ``/<id>/delete``. Como no hay "
"plantilla, sólo manejará el método ``POST`` y luego redirigirá a la vista "
"``index``."

#: ../../tutorial/blog.rst:332
msgid ""
"Congratulations, you've now finished writing your application! Take some time "
"to try out everything in the browser. However, there's still more to do before "
"the project is complete."
msgstr ""
"Enhorabuena, ya has terminado de escribir tu aplicación. Tómate un tiempo para "
"probarlo todo en el navegador. Sin embargo, todavía hay más cosas que hacer "
"antes de que el proyecto esté completo."

#: ../../tutorial/blog.rst:336
msgid "Continue to :doc:`install`."
msgstr "Continúa con :doc:`install`."
