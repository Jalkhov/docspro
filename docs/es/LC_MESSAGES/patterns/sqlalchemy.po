# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/sqlalchemy.rst:2
msgid "SQLAlchemy in Flask"
msgstr "SQLAlchemy en Flask"

#: ../../patterns/sqlalchemy.rst:4
msgid ""
"Many people prefer `SQLAlchemy`_ for database access.  In this case it's "
"encouraged to use a package instead of a module for your flask application and "
"drop the models into a separate module (:doc:`packages`). While that is not "
"necessary, it makes a lot of sense."
msgstr ""
"Mucha gente prefiere `SQLAlchemy`_ para el acceso a la base de datos. En este "
"caso se recomienda utilizar un paquete en lugar de un módulo para su aplicación "
"flask y dejar los modelos en un módulo separado (:doc:`packages`). Aunque no es "
"necesario, tiene mucho sentido."

#: ../../patterns/sqlalchemy.rst:9
msgid ""
"There are four very common ways to use SQLAlchemy.  I will outline each of them "
"here:"
msgstr ""
"Hay cuatro formas muy comunes de utilizar SQLAlchemy. A continuación, "
"describiré cada una de ellas:"

#: ../../patterns/sqlalchemy.rst:13
msgid "Flask-SQLAlchemy Extension"
msgstr "Extensión Flask-SQLAlchemy"

#: ../../patterns/sqlalchemy.rst:15
msgid ""
"Because SQLAlchemy is a common database abstraction layer and object relational "
"mapper that requires a little bit of configuration effort, there is a Flask "
"extension that handles that for you.  This is recommended if you want to get "
"started quickly."
msgstr ""
"Debido a que SQLAlchemy es una capa de abstracción de base de datos común y un "
"mapeador relacional de objetos que requiere un poco de esfuerzo de "
"configuración, hay una extensión de Flask que maneja eso por ti. Esto se "
"recomienda si quieres empezar rápidamente."

#: ../../patterns/sqlalchemy.rst:20
msgid ""
"You can download `Flask-SQLAlchemy`_ from `PyPI <https://pypi.org/project/Flask-"
"SQLAlchemy/>`_."
msgstr ""
"Puedes descargar `Flask-SQLAlchemy`_ desde `PyPI <https://pypi.org/project/"
"Flask-SQLAlchemy/>`_."

#: ../../patterns/sqlalchemy.rst:27
msgid "Declarative"
msgstr "Declarativo"

#: ../../patterns/sqlalchemy.rst:29
msgid ""
"The declarative extension in SQLAlchemy is the most recent method of using "
"SQLAlchemy.  It allows you to define tables and models in one go, similar to "
"how Django works.  In addition to the following text I recommend the official "
"documentation on the `declarative`_ extension."
msgstr ""
"La extensión declarativa en SQLAlchemy es el método más reciente de utilizar "
"SQLAlchemy. Permite definir tablas y modelos de una sola vez, de forma similar "
"a como funciona Django. Además del siguiente texto recomiendo la documentación "
"oficial sobre la extensión `declarative`_."

#: ../../patterns/sqlalchemy.rst:34
msgid "Here's the example :file:`database.py` module for your application::"
msgstr "Aquí está el módulo de ejemplo :file:`database.py` para su aplicación::"

#: ../../patterns/sqlalchemy.rst:54
msgid ""
"To define your models, just subclass the `Base` class that was created by the "
"code above.  If you are wondering why we don't have to care about threads here "
"(like we did in the SQLite3 example above with the :data:`~flask.g` object): "
"that's because SQLAlchemy does that for us already with the :class:`~sqlalchemy."
"orm.scoped_session`."
msgstr ""
"Para definir tus modelos, sólo tienes que subclasificar la clase `Base` que fue "
"creada por el código anterior. Si te preguntas por qué no tenemos que "
"preocuparnos de los hilos aquí (como hicimos en el ejemplo de SQLite3 anterior "
"con el objeto :data:`~flask.g`): es porque SQLAlchemy ya lo hace por nosotros "
"con la clase :class:`~sqlalchemy.orm.scoped_session`."

#: ../../patterns/sqlalchemy.rst:60
msgid ""
"To use SQLAlchemy in a declarative way with your application, you just have to "
"put the following code into your application module.  Flask will automatically "
"remove database sessions at the end of the request or when the application "
"shuts down::"
msgstr ""
"Para utilizar SQLAlchemy de forma declarativa con tu aplicación, sólo tienes "
"que poner el siguiente código en tu módulo de aplicación. Flask eliminará "
"automáticamente las sesiones de la base de datos al final de la solicitud o "
"cuando la aplicación se cierre::"

#: ../../patterns/sqlalchemy.rst:71
msgid "Here is an example model (put this into :file:`models.py`, e.g.)::"
msgstr "He aquí un modelo de ejemplo (ponlo en :file:`models.py`, por ejemplo)::"

#: ../../patterns/sqlalchemy.rst:89
msgid "To create the database you can use the `init_db` function:"
msgstr "Para crear la base de datos puedes utilizar la función `init_db`:"

#: ../../patterns/sqlalchemy.rst:94
msgid "You can insert entries into the database like this:"
msgstr "Puede insertar entradas en la base de datos de la siguiente manera:"

#: ../../patterns/sqlalchemy.rst:102
msgid "Querying is simple as well:"
msgstr "La consulta también es sencilla:"

#: ../../patterns/sqlalchemy.rst:113
msgid "Manual Object Relational Mapping"
msgstr "Mapeo relacional de objetos manual"

#: ../../patterns/sqlalchemy.rst:115
msgid ""
"Manual object relational mapping has a few upsides and a few downsides versus "
"the declarative approach from above.  The main difference is that you define "
"tables and classes separately and map them together.  It's more flexible but a "
"little more to type.  In general it works like the declarative approach, so "
"make sure to also split up your application into multiple modules in a package."
msgstr ""
"El mapeo relacional de objetos manual tiene algunas ventajas y algunas "
"desventajas frente al enfoque declarativo anterior. La principal diferencia es "
"que se definen tablas y clases por separado y se mapean juntas. Es más "
"flexible, pero un poco más complicado de escribir. En general, funciona como el "
"enfoque declarativo, así que asegúrese de dividir también su aplicación en "
"varios módulos en un paquete."

#: ../../patterns/sqlalchemy.rst:122
msgid "Here is an example :file:`database.py` module for your application::"
msgstr "Aquí hay un ejemplo de módulo :file:`database.py` para tu aplicación::"

#: ../../patterns/sqlalchemy.rst:135
msgid ""
"As in the declarative approach, you need to close the session after each "
"request or application context shutdown.  Put this into your application "
"module::"
msgstr ""
"Al igual que en el enfoque declarativo, es necesario cerrar la sesión después "
"de cada solicitud o cierre del contexto de la aplicación. Ponga esto en su "
"módulo de aplicación::"

#: ../../patterns/sqlalchemy.rst:145
msgid "Here is an example table and model (put this into :file:`models.py`)::"
msgstr "He aquí una tabla y un modelo de ejemplo (ponlo en :file:`models.py`)::"

#: ../../patterns/sqlalchemy.rst:168
msgid "Querying and inserting works exactly the same as in the example above."
msgstr ""
"La consulta y la inserción funcionan exactamente igual que en el ejemplo "
"anterior."

#: ../../patterns/sqlalchemy.rst:172
msgid "SQL Abstraction Layer"
msgstr "Capa de abstracción SQL"

#: ../../patterns/sqlalchemy.rst:174
msgid ""
"If you just want to use the database system (and SQL) abstraction layer you "
"basically only need the engine::"
msgstr ""
"Si sólo quieres utilizar la capa de abstracción del sistema de base de datos (y "
"SQL) básicamente sólo necesitas el motor::"

#: ../../patterns/sqlalchemy.rst:182
msgid ""
"Then you can either declare the tables in your code like in the examples above, "
"or automatically load them::"
msgstr ""
"Entonces puedes declarar las tablas en tu código como en los ejemplos "
"anteriores, o cargarlas automáticamente::"

#: ../../patterns/sqlalchemy.rst:189
msgid ""
"To insert data you can use the `insert` method.  We have to get a connection "
"first so that we can use a transaction:"
msgstr ""
"Para insertar datos se puede utilizar el método `insert`.  Primero tenemos que "
"obtener una conexión para poder utilizar una transacción:"

#: ../../patterns/sqlalchemy.rst:195
msgid "SQLAlchemy will automatically commit for us."
msgstr "SQLAlchemy se compromete automáticamente por nosotros."

#: ../../patterns/sqlalchemy.rst:197
msgid "To query your database, you use the engine directly or use a connection:"
msgstr ""
"Para consultar la base de datos, se utiliza el motor directamente o se utiliza "
"una conexión:"

#: ../../patterns/sqlalchemy.rst:202
msgid "These results are also dict-like tuples:"
msgstr "Estos resultados también son tuplas de tipo dictado:"

#: ../../patterns/sqlalchemy.rst:208
msgid ""
"You can also pass strings of SQL statements to the :meth:`~sqlalchemy.engine."
"base.Connection.execute` method:"
msgstr ""
"También puedes pasar cadenas de sentencias SQL al método :meth:`~sqlalchemy."
"engine.base.Connection.execute`:"

#: ../../patterns/sqlalchemy.rst:214
msgid ""
"For more information about SQLAlchemy, head over to the `website <https://www."
"sqlalchemy.org/>`_."
msgstr ""
"Para obtener más información sobre SQLAlchemy, diríjase al `sitio web <https://"
"www.sqlalchemy.org/>`_."
