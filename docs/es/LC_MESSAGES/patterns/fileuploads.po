# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/fileuploads.rst:2
msgid "Uploading Files"
msgstr "Carga de archivos"

#: ../../patterns/fileuploads.rst:4
msgid ""
"Ah yes, the good old problem of file uploads.  The basic idea of file uploads "
"is actually quite simple.  It basically works like this:"
msgstr ""
"Ah, sí, el viejo problema de la subida de archivos.  La idea básica de la "
"subida de archivos es en realidad bastante simple.  Básicamente funciona así:"

#: ../../patterns/fileuploads.rst:7
msgid ""
"A ``<form>`` tag is marked with ``enctype=multipart/form-data`` and an ``<input "
"type=file>`` is placed in that form."
msgstr ""
"Una etiqueta ``<form>`` se marca con ``enctype=multipart/form-data`` y se "
"coloca un ``<input type=file>`` en ese formulario."

#: ../../patterns/fileuploads.rst:9
msgid ""
"The application accesses the file from the :attr:`~flask.request.files` "
"dictionary on the request object."
msgstr ""
"La aplicación accede al archivo desde el diccionario :attr:`~flask.request."
"files` del objeto de la petición."

#: ../../patterns/fileuploads.rst:11
msgid ""
"use the :meth:`~werkzeug.datastructures.FileStorage.save` method of the file to "
"save the file permanently somewhere on the filesystem."
msgstr ""
"utiliza el método :meth:`~werkzeug.datastructures.FileStorage.save` del archivo "
"para guardar el archivo de forma permanente en algún lugar del sistema de "
"archivos."

#: ../../patterns/fileuploads.rst:15
msgid "A Gentle Introduction"
msgstr "Una gentil introducción"

#: ../../patterns/fileuploads.rst:17
msgid ""
"Let's start with a very basic application that uploads a file to a specific "
"upload folder and displays a file to the user.  Let's look at the bootstrapping "
"code for our application::"
msgstr ""
"Comencemos con una aplicación muy básica que sube un archivo a una carpeta de "
"subida específica y muestra un archivo al usuario.  Veamos el código de "
"arranque de nuestra aplicación::"

#: ../../patterns/fileuploads.rst:31
msgid ""
"So first we need a couple of imports.  Most should be straightforward, the :"
"func:`werkzeug.secure_filename` is explained a little bit later.  The "
"``UPLOAD_FOLDER`` is where we will store the uploaded files and the "
"``ALLOWED_EXTENSIONS`` is the set of allowed file extensions."
msgstr ""
"Así que primero necesitamos un par de importaciones.  La mayoría deberían ser "
"sencillas, la :func:`werkzeug.secure_filename` se explica un poco más tarde.  "
"El ``UPLOAD_FOLDER`` es donde almacenaremos los archivos subidos y el "
"``ALLOWED_EXTENSIONS`` es el conjunto de extensiones de archivo permitidas."

#: ../../patterns/fileuploads.rst:36
msgid ""
"Why do we limit the extensions that are allowed?  You probably don't want your "
"users to be able to upload everything there if the server is directly sending "
"out the data to the client.  That way you can make sure that users are not able "
"to upload HTML files that would cause XSS problems (see :ref:`security-xss`).  "
"Also make sure to disallow ``.php`` files if the server executes them, but who "
"has PHP installed on their server, right?  :)"
msgstr ""
"¿Por qué limitamos las extensiones permitidas? Probablemente no quiera que sus "
"usuarios puedan subir todo allí si el servidor está enviando directamente los "
"datos al cliente. De este modo, puede asegurarse de que los usuarios no puedan "
"subir archivos HTML que puedan causar problemas de XSS (véase :ref:`security-"
"xss`). También asegúrese de no permitir archivos ``.php`` si el servidor los "
"ejecuta, pero ¿quién tiene PHP instalado en su servidor, verdad? :)"

#: ../../patterns/fileuploads.rst:43
msgid ""
"Next the functions that check if an extension is valid and that uploads the "
"file and redirects the user to the URL for the uploaded file::"
msgstr ""
"A continuación las funciones que comprueban si una extensión es válida y que "
"suben el archivo y redirigen al usuario a la URL del archivo subido::"

#: ../../patterns/fileuploads.rst:77
msgid ""
"So what does that :func:`~werkzeug.utils.secure_filename` function actually do? "
"Now the problem is that there is that principle called \"never trust user input"
"\".  This is also true for the filename of an uploaded file.  All submitted "
"form data can be forged, and filenames can be dangerous.  For the moment just "
"remember: always use that function to secure a filename before storing it "
"directly on the filesystem."
msgstr ""
"Entonces, ¿qué hace realmente esa función :func:`~werkzeug.utils."
"secure_filename`? Ahora el problema es que existe ese principio llamado \"nunca "
"confíes en la entrada del usuario\". Esto también es cierto para el nombre de "
"un archivo subido. Todos los datos de los formularios enviados pueden ser "
"falsificados, y los nombres de los archivos pueden ser peligrosos. Por el "
"momento sólo recuerda: utiliza siempre esa función para asegurar un nombre de "
"archivo antes de almacenarlo directamente en el sistema de archivos."

#: ../../patterns/fileuploads.rst:84
msgid "Information for the Pros"
msgstr "Información para los profesionales"

#: ../../patterns/fileuploads.rst:86
msgid ""
"So you're interested in what that :func:`~werkzeug.utils.secure_filename` "
"function does and what the problem is if you're not using it?  So just imagine "
"someone would send the following information as `filename` to your application::"
msgstr ""
"¿Así que te interesa saber qué hace esa función :func:`~werkzeug.utils."
"secure_filename` y cuál es el problema si no la usas?  Pues imagina que alguien "
"envía la siguiente información como `filename` a tu aplicación::"

#: ../../patterns/fileuploads.rst:93
msgid ""
"Assuming the number of ``../`` is correct and you would join this with the "
"``UPLOAD_FOLDER`` the user might have the ability to modify a file on the "
"server's filesystem he or she should not modify.  This does require some "
"knowledge about how the application looks like, but trust me, hackers are "
"patient :)"
msgstr ""
"Asumiendo que el número de ``../`` es correcto y que unirías esto con el "
"``UPLOAD_FOLDER`` el usuario podría tener la capacidad de modificar un archivo "
"en el sistema de archivos del servidor que no debería modificar.  Esto requiere "
"un poco de conocimiento sobre el aspecto de la aplicación, pero créeme, los "
"hackers son pacientes :)"

#: ../../patterns/fileuploads.rst:99
msgid "Now let's look how that function works:"
msgstr "Ahora veamos cómo funciona esa función:"

#: ../../patterns/fileuploads.rst:104
msgid ""
"We want to be able to serve the uploaded files so they can be downloaded by "
"users. We'll define a ``download_file`` view to serve files in the upload "
"folder by name. ``url_for(\"download_file\", name=name)`` generates download "
"URLs."
msgstr ""
"Queremos ser capaces de servir los archivos subidos para que puedan ser "
"descargados por los usuarios. Definiremos una vista ``download_file`` para "
"servir los archivos de la carpeta de subida por su nombre. "
"``url_for(\"download_file\", name=name)`` genera URLs de descarga."

#: ../../patterns/fileuploads.rst:117
msgid ""
"If you're using middleware or the HTTP server to serve files, you can register "
"the ``download_file`` endpoint as ``build_only`` so ``url_for`` will work "
"without a view function."
msgstr ""
"Si estás utilizando middleware o el servidor HTTP para servir archivos, puedes "
"registrar el endpoint ``download_file`` como ``build_only`` para que "
"``url_for`` funcione sin una función de vista."

#: ../../patterns/fileuploads.rst:129
msgid "Improving Uploads"
msgstr "Mejora de las cargas"

#: ../../patterns/fileuploads.rst:133
msgid ""
"So how exactly does Flask handle uploads?  Well it will store them in the "
"webserver's memory if the files are reasonably small, otherwise in a temporary "
"location (as returned by :func:`tempfile.gettempdir`).  But how do you specify "
"the maximum file size after which an upload is aborted?  By default Flask will "
"happily accept file uploads with an unlimited amount of memory, but you can "
"limit that by setting the ``MAX_CONTENT_LENGTH`` config key::"
msgstr ""
"¿Cómo gestiona Flask las subidas de archivos? Bueno, los almacenará en la "
"memoria del servidor web si los archivos son razonablemente pequeños, de lo "
"contrario en una ubicación temporal (como se devuelve con :func:`tempfile."
"gettempdir`). ¿Pero cómo se especifica el tamaño máximo de los archivos después "
"del cual se aborta la carga? Por defecto, Flask aceptará sin problemas subidas "
"de archivos con una cantidad ilimitada de memoria, pero se puede limitar "
"estableciendo la clave de configuración ``MAX_CONTENT_LENGTH``:"

#: ../../patterns/fileuploads.rst:146
msgid ""
"The code above will limit the maximum allowed payload to 16 megabytes. If a "
"larger file is transmitted, Flask will raise a :exc:`~werkzeug.exceptions."
"RequestEntityTooLarge` exception."
msgstr ""
"El código anterior limitará la carga útil máxima permitida a 16 megabytes. Si "
"se transmite un archivo mayor, Flask lanzará una excepción :exc:`~werkzeug."
"exceptions.RequestEntityTooLarge`."

#: ../../patterns/fileuploads.rst:150
msgid "Connection Reset Issue"
msgstr "Problema de reinicio de la conexión"

#: ../../patterns/fileuploads.rst:152
msgid ""
"When using the local development server, you may get a connection reset error "
"instead of a 413 response. You will get the correct status response when "
"running the app with a production WSGI server."
msgstr ""
"Cuando se utiliza el servidor de desarrollo local, es posible que obtenga un "
"error de restablecimiento de la conexión en lugar de una respuesta 413. "
"Obtendrá la respuesta de estado correcta cuando ejecute la aplicación con un "
"servidor WSGI de producción."

#: ../../patterns/fileuploads.rst:156
msgid ""
"This feature was added in Flask 0.6 but can be achieved in older versions as "
"well by subclassing the request object.  For more information on that consult "
"the Werkzeug documentation on file handling."
msgstr ""
"Esta característica fue añadida en Flask 0.6, pero también se puede conseguir "
"en versiones anteriores subclasificando el objeto request. Para más información "
"al respecto consulte la documentación de Werkzeug sobre el manejo de archivos."

#: ../../patterns/fileuploads.rst:162
msgid "Upload Progress Bars"
msgstr "Cargar barras de progreso"

#: ../../patterns/fileuploads.rst:164
msgid ""
"A while ago many developers had the idea to read the incoming file in small "
"chunks and store the upload progress in the database to be able to poll the "
"progress with JavaScript from the client. The client asks the server every 5 "
"seconds how much it has transmitted, but this is something it should already "
"know."
msgstr ""
"Hace un tiempo muchos desarrolladores tuvieron la idea de leer el archivo "
"entrante en pequeños trozos y almacenar el progreso de subida en la base de "
"datos para poder sondear el progreso con JavaScript desde el cliente. El "
"cliente pregunta al servidor cada 5 segundos cuánto ha transmitido, pero esto "
"es algo que ya debería saber."

#: ../../patterns/fileuploads.rst:171
msgid "An Easier Solution"
msgstr "Una solución más fácil"

#: ../../patterns/fileuploads.rst:173
msgid ""
"Now there are better solutions that work faster and are more reliable. There "
"are JavaScript libraries like jQuery_ that have form plugins to ease the "
"construction of progress bar."
msgstr ""
"Ahora hay mejores soluciones que funcionan más rápido y son más fiables. Hay "
"bibliotecas de JavaScript como jQuery_ que tienen plugins de formulario para "
"facilitar la construcción de la barra de progreso."

#: ../../patterns/fileuploads.rst:177
msgid ""
"Because the common pattern for file uploads exists almost unchanged in all "
"applications dealing with uploads, there is also a Flask extension called "
"`Flask-Uploads`_ that implements a full fledged upload mechanism that allows "
"controlling which file extensions are allowed to be uploaded."
msgstr ""
"Debido a que el patrón común para la subida de archivos existe casi sin cambios "
"en todas las aplicaciones que se ocupan de las subidas, también hay una "
"extensión de Flask llamada `Flask-Uploads`_ que implementa un mecanismo de "
"subida completo que permite controlar qué extensiones de archivo se pueden "
"subir."
