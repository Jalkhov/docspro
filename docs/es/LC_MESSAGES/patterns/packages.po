# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/packages.rst:2
msgid "Large Applications as Packages"
msgstr "Grandes aplicaciones como paquetes"

#: ../../patterns/packages.rst:4
msgid "Imagine a simple flask application structure that looks like this::"
msgstr ""
"Imagina una estructura de aplicación simple de flask que se parece a esto::"

#: ../../patterns/packages.rst:16
msgid ""
"While this is fine for small applications, for larger applications it's a good "
"idea to use a package instead of a module. The :doc:`/tutorial/index` is "
"structured to use the package pattern, see the :gh:`example code <examples/"
"tutorial>`."
msgstr ""
"Aunque esto está bien para aplicaciones pequeñas, para aplicaciones más grandes "
"es una buena idea usar un paquete en lugar de un módulo. El :doc:`/tutorial/"
"index` está estructurado para utilizar el patrón de paquete, véase el :gh:"
"`código de ejemplo <examples/tutorial>`."

#: ../../patterns/packages.rst:22
msgid "Simple Packages"
msgstr "Paquetes sencillos"

#: ../../patterns/packages.rst:24
msgid ""
"To convert that into a larger one, just create a new folder :file:"
"`yourapplication` inside the existing one and move everything below it. Then "
"rename :file:`yourapplication.py` to :file:`__init__.py`.  (Make sure to delete "
"all ``.pyc`` files first, otherwise things would most likely break)"
msgstr ""
"Para convertirlo en uno más grande, simplemente crea una nueva carpeta :file:"
"`yourapplication` dentro de la existente y mueve todo debajo de ella. Entonces "
"renombra :file:`yourapplication.py` a :file:`__init__.py`.  (Asegúrate de "
"borrar todos los archivos ``.pyc`` primero, de lo contrario lo más probable es "
"que surgan errores)"

#: ../../patterns/packages.rst:29 ../../patterns/packages.rst:139
msgid "You should then end up with something like that::"
msgstr "Entonces deberías terminar con algo así::"

#: ../../patterns/packages.rst:42
msgid ""
"But how do you run your application now?  The naive ``python yourapplication/"
"__init__.py`` will not work.  Let's just say that Python does not want modules "
"in packages to be the startup file.  But that is not a big problem, just add a "
"new file called :file:`setup.py` next to the inner :file:`yourapplication` "
"folder with the following contents::"
msgstr ""
"Pero, ¿cómo se ejecuta la aplicación ahora? El sencillo ``python "
"yourapplication/__init__.py`` no funcionará. Digamos que Python no quiere que "
"los módulos de los paquetes sean el archivo de inicio. Pero eso no es un gran "
"problema, simplemente añade un nuevo fichero llamado :file:`setup.py` junto a "
"la carpeta interna :file:`yourapplication` con el siguiente contenido::"

#: ../../patterns/packages.rst:59
msgid ""
"In order to run the application you need to export an environment variable that "
"tells Flask where to find the application instance:"
msgstr ""
"Para ejecutar la aplicación es necesario exportar una variable de entorno que "
"indique a Flask dónde encontrar la instancia de la aplicación:"

#: ../../patterns/packages.rst:82
msgid ""
"If you are outside of the project directory make sure to provide the exact path "
"to your application directory. Similarly you can turn on the development "
"features like this:"
msgstr ""
"Si está fuera del directorio del proyecto, asegúrese de proporcionar la ruta "
"exacta al directorio de su aplicación. Del mismo modo, puede activar las "
"funciones de desarrollo así:"

#: ../../patterns/packages.rst:106
msgid ""
"In order to install and run the application you need to issue the following "
"commands::"
msgstr ""
"Para instalar y ejecutar la aplicación es necesario emitir los siguientes "
"comandos::"

#: ../../patterns/packages.rst:112
msgid ""
"What did we gain from this?  Now we can restructure the application a bit into "
"multiple modules.  The only thing you have to remember is the following quick "
"checklist:"
msgstr ""
"¿Qué ganamos con esto? Ahora podemos reestructurar un poco la aplicación en "
"varios módulos. Lo único que tienes que recordar es la siguiente lista de "
"comprobación rápida:"

#: ../../patterns/packages.rst:116
msgid ""
"the `Flask` application object creation has to be in the :file:`__init__.py` "
"file.  That way each module can import it safely and the `__name__` variable "
"will resolve to the correct package."
msgstr ""
"la creación del objeto de aplicación `Flask` tiene que estar en el archivo :"
"file:`__init__.py`. De esta manera cada módulo puede importarlo con seguridad y "
"la variable `__name__` resolverá el paquete correcto."

#: ../../patterns/packages.rst:119
msgid ""
"all the view functions (the ones with a :meth:`~flask.Flask.route` decorator on "
"top) have to be imported in the :file:`__init__.py` file. Not the object "
"itself, but the module it is in. Import the view module **after the application "
"object is created**."
msgstr ""
"todas las funciones de vista (las que tienen un decorador :meth:`~flask.Flask."
"route` encima) tienen que ser importadas en el archivo :file:`__init__.py`. No "
"el objeto en sí, sino el módulo en el que se encuentra. Importa el módulo de la "
"vista **después de crear el objeto de la aplicación**."

#: ../../patterns/packages.rst:124
msgid "Here's an example :file:`__init__.py`::"
msgstr "Este es un ejemplo :file:`__init__.py`::"

#: ../../patterns/packages.rst:131
msgid "And this is what :file:`views.py` would look like::"
msgstr "Y así es como quedaría :file:`views.py`::"

#: ../../patterns/packages.rst:154
msgid "Circular Imports"
msgstr "Importaciones circulares"

#: ../../patterns/packages.rst:156
msgid ""
"Every Python programmer hates them, and yet we just added some: circular "
"imports (That's when two modules depend on each other.  In this case :file:"
"`views.py` depends on :file:`__init__.py`).  Be advised that this is a bad idea "
"in general but here it is actually fine.  The reason for this is that we are "
"not actually using the views in :file:`__init__.py` and just ensuring the "
"module is imported and we are doing that at the bottom of the file."
msgstr ""
"Todos los programadores de Python los odian, y sin embargo acabamos de añadir "
"algunos: importaciones circulares (Es cuando dos módulos dependen el uno del "
"otro. En este caso :file:`views.py` depende de :file:`__init__.py`). Ten en "
"cuenta que esto es una mala idea en general, pero aquí está bien. La razón es "
"que no estamos usando las vistas en :file:`__init__.py` y sólo nos aseguramos "
"de que el módulo es importado y lo hacemos al final del fichero."

#: ../../patterns/packages.rst:164
msgid ""
"There are still some problems with that approach but if you want to use "
"decorators there is no way around that.  Check out the :doc:`/becomingbig` "
"section for some inspiration how to deal with that."
msgstr ""
"Todavía hay algunos problemas con ese enfoque, pero si quieres usar decoradores "
"no hay manera de evitarlo. Consulte la sección :doc:`/becomingbig` para "
"inspirarse en la forma de tratar con eso."

#: ../../patterns/packages.rst:170
msgid "Working with Blueprints"
msgstr "Trabajar con Blueprints"

#: ../../patterns/packages.rst:172
msgid ""
"If you have larger applications it's recommended to divide them into smaller "
"groups where each group is implemented with the help of a blueprint.  For a "
"gentle introduction into this topic refer to the :doc:`/blueprints` chapter of "
"the documentation."
msgstr ""
"Si tienes aplicaciones más grandes es recomendable dividirlas en grupos más "
"pequeños donde cada grupo se implementa con la ayuda de un blueprint.  Para una "
"suave introducción a este tema, consulte el capítulo :doc:`/blueprints` de la "
"documentación."
