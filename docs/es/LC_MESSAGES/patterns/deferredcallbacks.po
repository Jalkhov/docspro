# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/deferredcallbacks.rst:2
msgid "Deferred Request Callbacks"
msgstr "Callbacks en diferido"

#: ../../patterns/deferredcallbacks.rst:4
msgid ""
"One of the design principles of Flask is that response objects are created and "
"passed down a chain of potential callbacks that can modify them or replace "
"them. When the request handling starts, there is no response object yet. It is "
"created as necessary either by a view function or by some other component in "
"the system."
msgstr ""
"Uno de los principios de diseño de Flask es que los objetos de respuesta son "
"creados y pasados por una cadena de potenciales callbacks que pueden "
"modificarlos o reemplazarlos. Cuando se inicia la gestión de la solicitud, "
"todavía no hay un objeto de respuesta. Se crea según sea necesario por una "
"función de la vista o por algún otro componente del sistema."

#: ../../patterns/deferredcallbacks.rst:10
msgid ""
"What happens if you want to modify the response at a point where the response "
"does not exist yet?  A common example for that would be a :meth:`~flask.Flask."
"before_request` callback that wants to set a cookie on the response object."
msgstr ""
"¿Qué ocurre si se quiere modificar la respuesta en un punto en el que ésta aún "
"no existe?  Un ejemplo común para esto sería un callback :meth:`~flask.Flask."
"before_request` que quiere establecer una cookie en el objeto de respuesta."

#: ../../patterns/deferredcallbacks.rst:15
msgid ""
"One way is to avoid the situation. Very often that is possible. For instance "
"you can try to move that logic into a :meth:`~flask.Flask.after_request` "
"callback instead. However, sometimes moving code there makes it more "
"complicated or awkward to reason about."
msgstr ""
"Una forma es evitar la situación. Muy a menudo eso es posible. Por ejemplo, "
"puedes intentar mover esa lógica a un callback :meth:`~flask.Flask."
"after_request` en su lugar. Sin embargo, a veces mover el código allí lo hace "
"más complicado o incómodo de razonar."

#: ../../patterns/deferredcallbacks.rst:20
msgid ""
"As an alternative, you can use :func:`~flask.after_this_request` to register "
"callbacks that will execute after only the current request. This way you can "
"defer code execution from anywhere in the application, based on the current "
"request."
msgstr ""
"Como alternativa, puedes usar :func:`~flask.after_this_request` para registrar "
"callbacks que se ejecutarán sólo después de la petición actual. De esta manera "
"puedes diferir la ejecución de código desde cualquier parte de la aplicación, "
"basándote en la petición actual."

#: ../../patterns/deferredcallbacks.rst:25
msgid ""
"At any time during a request, we can register a function to be called at the "
"end of the request. For example you can remember the current language of the "
"user in a cookie in a :meth:`~flask.Flask.before_request` callback::"
msgstr ""
"En cualquier momento durante una petición, podemos registrar una función para "
"ser llamada al final de la petición. Por ejemplo puedes recordar el idioma "
"actual del usuario en una cookie en un callback :meth:`~flask.Flask."
"before_request`::"
