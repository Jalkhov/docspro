# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/urlprocessors.rst:2
msgid "Using URL Processors"
msgstr "Uso de procesadores de URL"

#: ../../patterns/urlprocessors.rst:6
msgid ""
"Flask 0.7 introduces the concept of URL processors.  The idea is that you might "
"have a bunch of resources with common parts in the URL that you don't always "
"explicitly want to provide.  For instance you might have a bunch of URLs that "
"have the language code in it but you don't want to have to handle it in every "
"single function yourself."
msgstr ""
"Flask 0.7 introduce el concepto de procesadores de URL. La idea es que puedes "
"tener un montón de recursos con partes comunes en la URL que no siempre quieres "
"proporcionar explícitamente. Por ejemplo, puedes tener un montón de URLs que "
"tienen el código del lenguaje en él, pero no quieres tener que manejarlo tú "
"mismo en cada función."

#: ../../patterns/urlprocessors.rst:12
msgid ""
"URL processors are especially helpful when combined with blueprints.  We will "
"handle both application specific URL processors here as well as blueprint "
"specifics."
msgstr ""
"Los procesadores de URL son especialmente útiles cuando se combinan con "
"blueprints. Aquí trataremos tanto los procesadores de URL específicos de la "
"aplicación como los específicos de los planos."

#: ../../patterns/urlprocessors.rst:17
msgid "Internationalized Application URLs"
msgstr "URLs de aplicaciones internacionalizadas"

#: ../../patterns/urlprocessors.rst:19
msgid "Consider an application like this::"
msgstr "Considere una aplicación como esta::"

#: ../../patterns/urlprocessors.rst:35
msgid ""
"This is an awful lot of repetition as you have to handle the language code "
"setting on the :data:`~flask.g` object yourself in every single function. Sure, "
"a decorator could be used to simplify this, but if you want to generate URLs "
"from one function to another you would have to still provide the language code "
"explicitly which can be annoying."
msgstr ""
"Esto es un montón de repeticiones, ya que tienes que manejar la configuración "
"del código de idioma en el objeto :data:`~flask.g` tú mismo en cada función. "
"Por supuesto, se podría utilizar un decorador para simplificar esto, pero si "
"quieres generar URLs de una función a otra tendrías que seguir proporcionando "
"el código de idioma explícitamente, lo que puede ser molesto."

#: ../../patterns/urlprocessors.rst:41
msgid ""
"For the latter, this is where :func:`~flask.Flask.url_defaults` functions come "
"in.  They can automatically inject values into a call to :func:`~flask."
"url_for`.  The code below checks if the language code is not yet in the "
"dictionary of URL values and if the endpoint wants a value named "
"``'lang_code'``::"
msgstr ""
"Para esto último, es donde entran las funciones :func:`~flask.Flask."
"url_defaults`. Pueden inyectar automáticamente valores en una llamada a :func:"
"`~flask.url_for`. El código siguiente comprueba si el código de idioma no está "
"todavía en el diccionario de valores de URL y si el endpoint quiere un valor "
"llamado ``'lang_code``::"

#: ../../patterns/urlprocessors.rst:54
msgid ""
"The method :meth:`~werkzeug.routing.Map.is_endpoint_expecting` of the URL map "
"can be used to figure out if it would make sense to provide a language code for "
"the given endpoint."
msgstr ""
"El método :meth:`~werkzeug.routing.Map.is_endpoint_expecting` del mapa URL "
"puede utilizarse para averiguar si tiene sentido proporcionar un código de "
"idioma para el punto final dado."

#: ../../patterns/urlprocessors.rst:58
msgid ""
"The reverse of that function are :meth:`~flask.Flask.url_value_preprocessor`"
"\\s.  They are executed right after the request was matched and can execute "
"code based on the URL values.  The idea is that they pull information out of "
"the values dictionary and put it somewhere else::"
msgstr ""
"El reverso de esa función son los :meth:`~flask.Flask.url_value_preprocessor`.  "
"Se ejecutan justo después de que la solicitud haya sido emparejada y pueden "
"ejecutar código basado en los valores de la URL. La idea es que saquen "
"información del diccionario de valores y la pongan en otro lugar::"

#: ../../patterns/urlprocessors.rst:68
msgid ""
"That way you no longer have to do the `lang_code` assignment to :data:`~flask."
"g` in every function.  You can further improve that by writing your own "
"decorator that prefixes URLs with the language code, but the more beautiful "
"solution is using a blueprint.  Once the ``'lang_code'`` is popped from the "
"values dictionary and it will no longer be forwarded to the view function "
"reducing the code to this::"
msgstr ""
"De esta manera ya no tienes que hacer la asignación de `lang_code` a :data:"
"`~flask.g` en cada función. Puedes mejorar esto escribiendo tu propio decorador "
"que anteponga a las URLs el código de idioma, pero la solución más bonita es "
"usar un blueprint. Una vez que el ``'lang_code'`` es sacado del diccionario de "
"valores y ya no será reenviado a la función de la vista reduciendo el código a "
"esto::"

#: ../../patterns/urlprocessors.rst:99
msgid "Internationalized Blueprint URLs"
msgstr "URLs de Blueprint internacionalizadas"

#: ../../patterns/urlprocessors.rst:101
msgid ""
"Because blueprints can automatically prefix all URLs with a common string it's "
"easy to automatically do that for every function.  Furthermore blueprints can "
"have per-blueprint URL processors which removes a whole lot of logic from the :"
"meth:`~flask.Flask.url_defaults` function because it no longer has to check if "
"the URL is really interested in a ``'lang_code'`` parameter::"
msgstr ""
"Debido a que los blueprints pueden anteponer automáticamente todas las URLs con "
"una cadena común, es fácil hacerlo automáticamente para cada función. Además, "
"los blueprints pueden tener procesadores de URL por blueprint, lo que elimina "
"un montón de lógica de la función :meth:`~flask.Flask.url_defaults` porque ya "
"no tiene que comprobar si la URL está realmente interesada en un parámetro "
"``'lang_code'``::"
