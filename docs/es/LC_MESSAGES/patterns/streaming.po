# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/streaming.rst:2
msgid "Streaming Contents"
msgstr "Contenidos en streaming"

#: ../../patterns/streaming.rst:4
msgid ""
"Sometimes you want to send an enormous amount of data to the client, much more "
"than you want to keep in memory.  When you are generating the data on the fly "
"though, how do you send that back to the client without the roundtrip to the "
"filesystem?"
msgstr ""
"A veces quieres enviar una enorme cantidad de datos al cliente, mucho más de lo "
"que quieres mantener en la memoria. Sin embargo, cuando estás generando los "
"datos sobre la marcha, ¿Cómo los envías de vuelta al cliente sin el viaje de "
"ida y vuelta al sistema de archivos?"

#: ../../patterns/streaming.rst:9
msgid "The answer is by using generators and direct responses."
msgstr "La respuesta es utilizar generadores y respuestas directas."

#: ../../patterns/streaming.rst:12
msgid "Basic Usage"
msgstr "Uso básico"

#: ../../patterns/streaming.rst:14
msgid ""
"This is a basic view function that generates a lot of CSV data on the fly. The "
"trick is to have an inner function that uses a generator to generate data and "
"to then invoke that function and pass it to a response object::"
msgstr ""
"Esta es una función de vista básica que genera un montón de datos CSV sobre la "
"marcha. El truco es tener una función interna que utilice un generador para "
"generar los datos y luego invocar esa función y pasarla a un objeto de "
"respuesta::"

#: ../../patterns/streaming.rst:25
msgid ""
"Each ``yield`` expression is directly sent to the browser.  Note though that "
"some WSGI middlewares might break streaming, so be careful there in debug "
"environments with profilers and other things you might have enabled."
msgstr ""
"Cada expresión ``yield`` se envía directamente al navegador. Sin embargo, ten "
"en cuenta que algunos middlewares WSGI pueden romper el streaming, así que ten "
"cuidado en entornos de depuración con perfiladores y otras cosas que puedas "
"tener activadas."

#: ../../patterns/streaming.rst:30
msgid "Streaming from Templates"
msgstr "Streaming desde plantillas"

#: ../../patterns/streaming.rst:32
msgid ""
"The Jinja2 template engine also supports rendering templates piece by piece.  "
"This functionality is not directly exposed by Flask because it is quite "
"uncommon, but you can easily do it yourself::"
msgstr ""
"El motor de plantillas de Jinja2 también soporta el renderizado de plantillas "
"pieza a pieza. Esta funcionalidad no está expuesta directamente por Flask "
"porque es bastante infrecuente, pero puedes hacerlo fácilmente tú mismo::"

#: ../../patterns/streaming.rst:48
msgid ""
"The trick here is to get the template object from the Jinja2 environment on the "
"application and to call :meth:`~jinja2.Template.stream` instead of :meth:"
"`~jinja2.Template.render` which returns a stream object instead of a string.  "
"Since we're bypassing the Flask template render functions and using the "
"template object itself we have to make sure to update the render context "
"ourselves by calling :meth:`~flask.Flask.update_template_context`. The template "
"is then evaluated as the stream is iterated over.  Since each time you do a "
"yield the server will flush the content to the client you might want to buffer "
"up a few items in the template which you can do with ``rv."
"enable_buffering(size)``.  ``5`` is a sane default."
msgstr ""
"El truco aquí es obtener el objeto plantilla del entorno Jinja2 en la "
"aplicación y llamar a :meth:`~jinja2.Template.stream` en lugar de :meth:"
"`~jinja2.Template.render` que devuelve un objeto stream en lugar de una cadena. "
"Dado que estamos obviando las funciones de renderizado de plantillas de Flask y "
"utilizando el propio objeto plantilla, tenemos que asegurarnos de actualizar el "
"contexto de renderizado nosotros mismos llamando a :meth:`~flask.Flask."
"update_template_context`."

#: ../../patterns/streaming.rst:60
msgid "Streaming with Context"
msgstr "Streaming con Contexto"

#: ../../patterns/streaming.rst:64
msgid ""
"Note that when you stream data, the request context is already gone the moment "
"the function executes.  Flask 0.9 provides you with a helper that can keep the "
"request context around during the execution of the generator::"
msgstr ""
"Ten en cuenta que cuando transmites datos, el contexto de la petición ya ha "
"desaparecido en el momento en que se ejecuta la función. Flask 0.9 le "
"proporciona un ayudante que puede mantener el contexto de la solicitud durante "
"la ejecución del generador::"

#: ../../patterns/streaming.rst:79
msgid ""
"Without the :func:`~flask.stream_with_context` function you would get a :class:"
"`RuntimeError` at that point."
msgstr ""
"Sin la función :func:`~flask.stream_with_context` obtendrías un :class:"
"`RuntimeError` en ese punto."
