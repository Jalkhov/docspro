# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/viewdecorators.rst:2
msgid "View Decorators"
msgstr "Ver decoradores"

#: ../../patterns/viewdecorators.rst:4
msgid ""
"Python has a really interesting feature called function decorators.  This "
"allows some really neat things for web applications.  Because each view in "
"Flask is a function, decorators can be used to inject additional functionality "
"to one or more functions.  The :meth:`~flask.Flask.route` decorator is the one "
"you probably used already.  But there are use cases for implementing your own "
"decorator.  For instance, imagine you have a view that should only be used by "
"people that are logged in.  If a user goes to the site and is not logged in, "
"they should be redirected to the login page.  This is a good example of a use "
"case where a decorator is an excellent solution."
msgstr ""
"Python tiene una característica muy interesante llamada decoradores de "
"funciones. Esto permite algunas cosas realmente asombrosas para las "
"aplicaciones web. Dado que cada vista en Flask es una función, los decoradores "
"se pueden utilizar para inyectar funcionalidad adicional a una o más funciones. "
"El decorador :meth:`~flask.Flask.route` es el que probablemente ya hayas "
"utilizado."

#: ../../patterns/viewdecorators.rst:16
msgid "Login Required Decorator"
msgstr "Decorador de inicio de sesión requerido"

#: ../../patterns/viewdecorators.rst:18
msgid ""
"So let's implement such a decorator.  A decorator is a function that wraps and "
"replaces another function.  Since the original function is replaced, you need "
"to remember to copy the original function's information to the new function.  "
"Use :func:`functools.wraps` to handle this for you."
msgstr ""
"Así que vamos a implementar tal decorador. Un decorador es una función que "
"envuelve y reemplaza a otra función. Como la función original es reemplazada, "
"necesitas recordar copiar la información de la función original a la nueva "
"función. Usa :func:`functools.wraps` para manejar esto por ti."

#: ../../patterns/viewdecorators.rst:23
msgid ""
"This example assumes that the login page is called ``'login'`` and that the "
"current user is stored in ``g.user`` and is ``None`` if there is no-one logged "
"in. ::"
msgstr ""
"Este ejemplo asume que la página de inicio de sesión se llama ``inicio de "
"sesión`` y que el usuario actual se almacena en ``g.user`` y es ``None`` si no "
"hay nadie conectado. ::"

#: ../../patterns/viewdecorators.rst:38
msgid ""
"To use the decorator, apply it as innermost decorator to a view function. When "
"applying further decorators, always remember that the :meth:`~flask.Flask."
"route` decorator is the outermost. ::"
msgstr ""
"Para utilizar el decorador, aplíquelo como decorador más interno a una función "
"de la vista. Al aplicar otros decoradores, recuerde siempre que el decorador :"
"meth:`~flask.Flask.route` es el más externo. ::"

#: ../../patterns/viewdecorators.rst:48
msgid ""
"The ``next`` value will exist in ``request.args`` after a ``GET`` request for "
"the login page.  You'll have to pass it along when sending the ``POST`` request "
"from the login form.  You can do this with a hidden input tag, then retrieve it "
"from ``request.form`` when logging the user in. ::"
msgstr ""
"El valor ``next`` existirá en ``request.args`` después de una petición ``GET`` "
"para la página de acceso. Tendrás que pasarlo cuando envíes la petición "
"``POST`` desde el formulario de acceso. Puedes hacer esto con una etiqueta de "
"entrada oculta, y luego recuperarla de ``request.form`` cuando el usuario se "
"registre. ::"

#: ../../patterns/viewdecorators.rst:57
msgid "Caching Decorator"
msgstr "Decoradores y caché"

#: ../../patterns/viewdecorators.rst:59
msgid ""
"Imagine you have a view function that does an expensive calculation and because "
"of that you would like to cache the generated results for a certain amount of "
"time.  A decorator would be nice for that.  We're assuming you have set up a "
"cache like mentioned in :doc:`caching`."
msgstr ""
"Imagina que tienes una función de la vista que realiza un cálculo costoso y por "
"ello te gustaría almacenar en caché los resultados generados durante un tiempo "
"determinado. Un decorador estaría bien para eso. Suponemos que has configurado "
"una caché como la mencionada en :doc:`caching`."

#: ../../patterns/viewdecorators.rst:64
msgid ""
"Here is an example cache function.  It generates the cache key from a specific "
"prefix (actually a format string) and the current path of the request.  Notice "
"that we are using a function that first creates the decorator that then "
"decorates the function.  Sounds awful? Unfortunately it is a little bit more "
"complex, but the code should still be straightforward to read."
msgstr ""
"He aquí un ejemplo de función de caché. Genera la clave de la caché a partir de "
"un prefijo específico (en realidad una cadena de formato) y la ruta actual de "
"la solicitud. Fíjate que estamos usando una función que primero crea el "
"decorador que luego decora la función. ¿Suena horrible? Desgraciadamente es un "
"poco más complejo, pero el código debería seguir siendo sencillo de leer."

#: ../../patterns/viewdecorators.rst:71
msgid "The decorated function will then work as follows"
msgstr "La función decorada funcionará entonces de la siguiente manera"

#: ../../patterns/viewdecorators.rst:73
msgid ""
"get the unique cache key for the current request based on the current path."
msgstr ""
"obtener la clave de caché única para la solicitud actual basada en la ruta "
"actual."

#: ../../patterns/viewdecorators.rst:75
msgid ""
"get the value for that key from the cache. If the cache returned something we "
"will return that value."
msgstr ""
"obtenga el valor de esa clave de la caché. Si la caché devolvió algo, "
"devolveremos ese valor."

#: ../../patterns/viewdecorators.rst:77
msgid ""
"otherwise the original function is called and the return value is stored in the "
"cache for the timeout provided (by default 5 minutes)."
msgstr ""
"en caso contrario, se llama a la función original y el valor devuelto se "
"almacena en la caché durante el tiempo de espera previsto (por defecto, 5 "
"minutos)."

#: ../../patterns/viewdecorators.rst:80
msgid "Here the code::"
msgstr "Aquí el código::"

#: ../../patterns/viewdecorators.rst:99
msgid ""
"Notice that this assumes an instantiated ``cache`` object is available, see :"
"doc:`caching`."
msgstr ""
"Tenga en cuenta que esto asume que un objeto ``cache`` instanciado está "
"disponible, ver :doc:`caching`."

#: ../../patterns/viewdecorators.rst:104
msgid "Templating Decorator"
msgstr "Decorador de plantillas"

#: ../../patterns/viewdecorators.rst:106
msgid ""
"A common pattern invented by the TurboGears guys a while back is a templating "
"decorator.  The idea of that decorator is that you return a dictionary with the "
"values passed to the template from the view function and the template is "
"automatically rendered.  With that, the following three examples do exactly the "
"same::"
msgstr ""
"Un patrón común inventado por los chicos de TurboGears hace un tiempo es un "
"decorador de plantillas. La idea de ese decorador es que devuelve un "
"diccionario con los valores pasados a la plantilla desde la función de vista y "
"la plantilla se renderiza automáticamente. Con eso, los siguientes tres "
"ejemplos hacen exactamente lo mismo::"

#: ../../patterns/viewdecorators.rst:126
msgid ""
"As you can see, if no template name is provided it will use the endpoint of the "
"URL map with dots converted to slashes + ``'.html'``.  Otherwise the provided "
"template name is used.  When the decorated function returns, the dictionary "
"returned is passed to the template rendering function.  If ``None`` is "
"returned, an empty dictionary is assumed, if something else than a dictionary "
"is returned we return it from the function unchanged.  That way you can still "
"use the redirect function or return simple strings."
msgstr ""
"Como puede ver, si no se proporciona un nombre de plantilla se utilizará el "
"punto final del mapa de la URL con los puntos convertidos en barras inclinadas "
"+ ``'.html'``. En caso contrario, se utilizará el nombre de la plantilla "
"proporcionada. Cuando la función decorada devuelve, el diccionario devuelto se "
"pasa a la función de renderización de la plantilla. Si se devuelve ``None``, se "
"asume un diccionario vacío, si se devuelve algo más que un diccionario lo "
"devolvemos desde la función sin cambios. De este modo, se puede seguir "
"utilizando la función de redirección o devolver cadenas simples."

#: ../../patterns/viewdecorators.rst:134
msgid "Here is the code for that decorator::"
msgstr "Aquí está el código para ese decorador::"

#: ../../patterns/viewdecorators.rst:157
msgid "Endpoint Decorator"
msgstr "Decorador endpoint"

#: ../../patterns/viewdecorators.rst:159
msgid ""
"When you want to use the werkzeug routing system for more flexibility you need "
"to map the endpoint as defined in the :class:`~werkzeug.routing.Rule` to a view "
"function. This is possible with this decorator. For example::"
msgstr ""
"Cuando quieras utilizar el sistema de enrutamiento de werkzeug para tener más "
"flexibilidad, necesitas mapear el endpoint definido en la :class:`~werkzeug."
"routing.Rule` a una función de la vista. Esto es posible con este decorador. "
"Por ejemplo::"
