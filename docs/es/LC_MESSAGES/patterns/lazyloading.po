# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/lazyloading.rst:2
msgid "Lazily Loading Views"
msgstr "Vistas de carga lenta"

#: ../../patterns/lazyloading.rst:4
msgid ""
"Flask is usually used with the decorators.  Decorators are simple and you have "
"the URL right next to the function that is called for that specific URL.  "
"However there is a downside to this approach: it means all your code that uses "
"decorators has to be imported upfront or Flask will never actually find your "
"function."
msgstr ""
"Flask se utiliza generalmente con los decoradores. Los decoradores son simples "
"y tienes la URL justo al lado de la función que se llama para esa URL "
"específica. Sin embargo, hay una desventaja en este enfoque: significa que todo "
"su código que utiliza decoradores tiene que ser importado por adelantado o "
"Flask nunca encontrará su función."

#: ../../patterns/lazyloading.rst:10
msgid ""
"This can be a problem if your application has to import quick.  It might have "
"to do that on systems like Google's App Engine or other systems.  So if you "
"suddenly notice that your application outgrows this approach you can fall back "
"to a centralized URL mapping."
msgstr ""
"Esto puede ser un problema si su aplicación tiene que importar rápidamente. "
"Puede que tenga que hacerlo en sistemas como el App Engine de Google u otros "
"sistemas. Así que si de repente notas que tu aplicación se queda pequeña con "
"este enfoque puedes volver a un mapeo de URLs centralizado."

#: ../../patterns/lazyloading.rst:15
msgid ""
"The system that enables having a central URL map is the :meth:`~flask.Flask."
"add_url_rule` function.  Instead of using decorators, you have a file that sets "
"up the application with all URLs."
msgstr ""
"El sistema que permite tener un mapa de URLs central es la función :meth:"
"`~flask.Flask.add_url_rule`. En lugar de usar decoradores, tienes un archivo "
"que configura la aplicación con todas las URLs."

#: ../../patterns/lazyloading.rst:20
msgid "Converting to Centralized URL Map"
msgstr "Conversión a mapa de URLs centralizado"

#: ../../patterns/lazyloading.rst:22
msgid "Imagine the current application looks somewhat like this::"
msgstr "Imagina que la aplicación actual tiene un aspecto similar al siguiente::"

#: ../../patterns/lazyloading.rst:35
msgid ""
"Then, with the centralized approach you would have one file with the views (:"
"file:`views.py`) but without any decorator::"
msgstr ""
"Entonces, con el enfoque centralizado tendrías un archivo con las vistas (:file:"
"`views.py`) pero sin ningún decorador:: algo así::"

#: ../../patterns/lazyloading.rst:44
msgid ""
"And then a file that sets up an application which maps the functions to URLs::"
msgstr ""
"Y luego un archivo que configura una aplicación que mapea las funciones a URLs::"

#: ../../patterns/lazyloading.rst:54
msgid "Loading Late"
msgstr "Cargando con retraso"

#: ../../patterns/lazyloading.rst:56
msgid ""
"So far we only split up the views and the routing, but the module is still "
"loaded upfront.  The trick is to actually load the view function as needed. "
"This can be accomplished with a helper class that behaves just like a function "
"but internally imports the real function on first use::"
msgstr ""
"Hasta ahora sólo hemos dividido las vistas y el enrutamiento, pero el módulo se "
"sigue cargando por adelantado. El truco está en cargar realmente la función de "
"la vista cuando se necesita. Esto se puede lograr con una clase helper que se "
"comporta como una función pero que importa internamente la función real en el "
"primer uso::"

#: ../../patterns/lazyloading.rst:76
msgid ""
"What's important here is is that `__module__` and `__name__` are properly set.  "
"This is used by Flask internally to figure out how to name the URL rules in "
"case you don't provide a name for the rule yourself."
msgstr ""
"Lo importante aquí es que `__module__` y `__name__` estén correctamente "
"configurados. Esto es utilizado por Flask internamente para averiguar cómo "
"nombrar las reglas URL en caso de que no proporciones un nombre para la regla "
"tú mismo."

#: ../../patterns/lazyloading.rst:80
msgid "Then you can define your central place to combine the views like this::"
msgstr "Entonces puedes definir tu lugar central para combinar las vistas así::"

#: ../../patterns/lazyloading.rst:90
msgid ""
"You can further optimize this in terms of amount of keystrokes needed to write "
"this by having a function that calls into :meth:`~flask.Flask.add_url_rule` by "
"prefixing a string with the project name and a dot, and by wrapping `view_func` "
"in a `LazyView` as needed.  ::"
msgstr ""
"Puedes optimizar aún más esto en términos de cantidad de pulsaciones de teclas "
"necesarias para escribir esto teniendo una función que llame a :meth:`~flask."
"Flask.add_url_rule` prefijando una cadena con el nombre del proyecto y un "
"punto, y envolviendo `view_func` en un `LazyView` según sea necesario. ::"

#: ../../patterns/lazyloading.rst:107
msgid ""
"One thing to keep in mind is that before and after request handlers have to be "
"in a file that is imported upfront to work properly on the first request.  The "
"same goes for any kind of remaining decorator."
msgstr ""
"Una cosa a tener en cuenta es que los manejadores de antes y después de la "
"solicitud tienen que estar en un archivo que se importa por adelantado para que "
"funcione correctamente en la primera solicitud. Lo mismo ocurre con cualquier "
"tipo de decorador restante."
