# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../patterns/appdispatch.rst:2
msgid "Application Dispatching"
msgstr "Despacho de aplicaciones"

#: ../../patterns/appdispatch.rst:4
msgid ""
"Application dispatching is the process of combining multiple Flask applications "
"on the WSGI level.  You can combine not only Flask applications but any WSGI "
"application.  This would allow you to run a Django and a Flask application in "
"the same interpreter side by side if you want.  The usefulness of this depends "
"on how the applications work internally."
msgstr ""
"El despacho de aplicaciones es el proceso de combinar múltiples aplicaciones "
"Flask en el nivel WSGI. Puedes combinar no sólo aplicaciones Flask sino "
"cualquier aplicación WSGI. Esto te permitiría ejecutar una aplicación Django y "
"una aplicación Flask en el mismo intérprete una al lado de la otra si lo "
"deseas. La utilidad de esto depende de cómo funcionen las aplicaciones "
"internamente."

#: ../../patterns/appdispatch.rst:11
msgid ""
"The fundamental difference from :doc:`packages` is that in this case you are "
"running the same or different Flask applications that are entirely isolated "
"from each other. They run different configurations and are dispatched on the "
"WSGI level."
msgstr ""
"La diferencia fundamental con :doc:`packages` es que en este caso estás "
"ejecutando la misma o diferentes aplicaciones Flask que están completamente "
"aisladas entre sí. Ejecutan configuraciones diferentes y se despachan en el "
"nivel WSGI."

#: ../../patterns/appdispatch.rst:18
msgid "Working with this Document"
msgstr "Trabajar con este documento"

#: ../../patterns/appdispatch.rst:20
msgid ""
"Each of the techniques and examples below results in an ``application`` object "
"that can be run with any WSGI server. For production, see :doc:`/deploying/"
"index`. For development, Werkzeug provides a server through :func:`werkzeug."
"serving.run_simple`::"
msgstr ""
"Cada una de las técnicas y ejemplos que aparecen a continuación dan como "
"resultado un objeto ``aplicación`` que puede ejecutarse con cualquier servidor "
"WSGI. Para producción, vea :doc:`/deploying/index`. Para desarrollo, Werkzeug "
"proporciona un servidor a través de :func:`werkzeug.serving.run_simple`::"

#: ../../patterns/appdispatch.rst:28
msgid ""
"Note that :func:`run_simple <werkzeug.serving.run_simple>` is not intended for "
"use in production.  Use a production WSGI server. See :doc:`/deploying/index`."
msgstr ""
"Tenga en cuenta que :func:`run_simple <werkzeug.serving.run_simple>` no está "
"pensado para su uso en producción.  Utilice un servidor WSGI de producción. "
"Consulte :doc:`/deploying/index`."

#: ../../patterns/appdispatch.rst:31
msgid ""
"In order to use the interactive debugger, debugging must be enabled both on the "
"application and the simple server. Here is the \"hello world\" example with "
"debugging and :func:`run_simple <werkzeug.serving.run_simple>`::"
msgstr ""
"Para poder utilizar el depurador interactivo, la depuración debe estar "
"habilitada tanto en la aplicación como en el servidor simple. Aquí está el "
"ejemplo de \"hola mundo\" con depuración y :func:`run_simple <werkzeug.serving."
"run_simple>`::"

#: ../../patterns/appdispatch.rst:51
msgid "Combining Applications"
msgstr "Combinación de aplicaciones"

#: ../../patterns/appdispatch.rst:53
msgid ""
"If you have entirely separated applications and you want them to work next to "
"each other in the same Python interpreter process you can take advantage of "
"the :class:`werkzeug.wsgi.DispatcherMiddleware`.  The idea here is that each "
"Flask application is a valid WSGI application and they are combined by the "
"dispatcher middleware into a larger one that is dispatched based on prefix."
msgstr ""
"Si tienes aplicaciones completamente separadas y quieres que funcionen una al "
"lado de la otra en el mismo proceso de interpretación de Python puedes "
"aprovechar la :class:`werkzeug.wsgi.DispatcherMiddleware`. La idea aquí es que "
"cada aplicación Flask es una aplicación WSGI válida y son combinadas por el "
"middleware despachador en una más grande que es despachada basada en el prefijo."

#: ../../patterns/appdispatch.rst:60
msgid ""
"For example you could have your main application run on ``/`` and your backend "
"interface on ``/backend``::"
msgstr ""
"Por ejemplo, podrías tener tu aplicación principal ejecutada en ``/`` y tu "
"interfaz backend en ``/backend``::"

#: ../../patterns/appdispatch.rst:73
msgid "Dispatch by Subdomain"
msgstr "Despacho por subdominio"

#: ../../patterns/appdispatch.rst:75
msgid ""
"Sometimes you might want to use multiple instances of the same application with "
"different configurations.  Assuming the application is created inside a "
"function and you can call that function to instantiate it, that is really easy "
"to implement.  In order to develop your application to support creating new "
"instances in functions have a look at the :doc:`appfactories` pattern."
msgstr ""
"A veces puedes querer usar múltiples instancias de la misma aplicación con "
"diferentes configuraciones. Asumiendo que la aplicación es creada dentro de una "
"función y que puedes llamar a esa función para instanciarla, eso es realmente "
"fácil de implementar. Para desarrollar tu aplicación de forma que soporte la "
"creación de nuevas instancias en funciones echa un vistazo al patrón :doc:"
"`appfactories`."

#: ../../patterns/appdispatch.rst:82
msgid ""
"A very common example would be creating applications per subdomain.  For "
"instance you configure your webserver to dispatch all requests for all "
"subdomains to your application and you then use the subdomain information to "
"create user-specific instances.  Once you have your server set up to listen on "
"all subdomains you can use a very simple WSGI application to do the dynamic "
"application creation."
msgstr ""
"Un ejemplo muy común sería crear aplicaciones por subdominio. Por ejemplo, "
"configuras tu servidor web para que envíe todas las peticiones de todos los "
"subdominios a tu aplicación y luego utilizas la información del subdominio para "
"crear instancias específicas para cada usuario. Una vez que tengas tu servidor "
"configurado para escuchar en todos los subdominios puedes usar una aplicación "
"WSGI muy simple para hacer la creación de aplicaciones dinámicas."

#: ../../patterns/appdispatch.rst:89
msgid ""
"The perfect level for abstraction in that regard is the WSGI layer.  You write "
"your own WSGI application that looks at the request that comes and delegates it "
"to your Flask application.  If that application does not exist yet, it is "
"dynamically created and remembered::"
msgstr ""
"El nivel perfecto de abstracción en ese sentido es la capa WSGI. Escribes tu "
"propia aplicación WSGI que mira la petición que llega y la delega a tu "
"aplicación Flask. Si esa aplicación no existe todavía, se crea dinámicamente y "
"se recuerda::"

#: ../../patterns/appdispatch.rst:120
msgid "This dispatcher can then be used like this::"
msgstr "Este despachador puede usarse así::"

#: ../../patterns/appdispatch.rst:142
msgid "Dispatch by Path"
msgstr "Despacho por Ruta"

#: ../../patterns/appdispatch.rst:144
msgid ""
"Dispatching by a path on the URL is very similar.  Instead of looking at the "
"``Host`` header to figure out the subdomain one simply looks at the request "
"path up to the first slash::"
msgstr ""
"La distribución por una ruta en la URL es muy similar. En lugar de mirar la "
"cabecera ``Host`` para averiguar el subdominio simplemente se mira la ruta de "
"la petición hasta la primera barra::"

#: ../../patterns/appdispatch.rst:176
msgid ""
"The big difference between this and the subdomain one is that this one falls "
"back to another application if the creator function returns ``None``::"
msgstr ""
"La gran diferencia entre ésta y la del subdominio es que ésta retrocede a otra "
"aplicación si la función del creador devuelve ``None``::"
