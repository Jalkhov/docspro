# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <pedrotorcattsoto@gmail.com>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 2.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-27 07:20-0400\n"
"PO-Revision-Date: 2022-02-15 21:58-0400\n"
"Language-Team: es_LA <pedrotorcattsoto@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: Pedro Torcatt <pedrotorcattsoto@gmail.com>\n"
"Language: es\n"
"X-Generator: Poedit 3.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../deploying/wsgi-standalone.rst:2
msgid "Standalone WSGI Containers"
msgstr "Contenedores WSGI independientes"

#: ../../deploying/wsgi-standalone.rst:4
msgid ""
"There are popular servers written in Python that contain WSGI applications and "
"serve HTTP.  These servers stand alone when they run; you can proxy to them "
"from your web server.  Note the section on :ref:`deploying-proxy-setups` if "
"you run into issues."
msgstr ""
"Hay servidores populares escritos en Python que contienen aplicaciones WSGI y "
"sirven HTTP. Estos servidores son independientes cuando se ejecutan; puedes "
"hacer un proxy hacia ellos desde tu servidor web. Tenga en cuenta la sección "
"sobre :ref:`deploying-proxy-setups` si tiene problemas."

#: ../../deploying/wsgi-standalone.rst:10
msgid "Gunicorn"
msgstr "Gunicorn"

#: ../../deploying/wsgi-standalone.rst:12
msgid ""
"`Gunicorn`_ 'Green Unicorn' is a WSGI HTTP Server for UNIX. It's a pre-fork "
"worker model ported from Ruby's Unicorn project. It supports both `eventlet`_ "
"and `greenlet`_. Running a Flask application on this server is quite simple::"
msgstr ""
"`Gunicorn`_ 'Green Unicorn' es un servidor HTTP WSGI para UNIX. Es un modelo "
"pre-fork\n"
"portado del proyecto Unicorn de Ruby. Soporta tanto `eventlet`_ y `greenlet`_. "
"Ejecutar una aplicación Flask en este servidor es bastante sencillo::"

#: ../../deploying/wsgi-standalone.rst:18
msgid ""
"`Gunicorn`_ provides many command-line options -- see ``gunicorn -h``. For "
"example, to run a Flask application with 4 worker processes (``-w 4``) binding "
"to localhost port 4000 (``-b 127.0.0.1:4000``)::"
msgstr ""
"`Gunicorn`_ proporciona muchas opciones de línea de comandos -- ver ``gunicorn "
"-h``. Por ejemplo, para ejecutar una aplicación Flask con 4 procesos de "
"trabajo (``-w4``) vinculado al puerto localhost 4000 (``-b 127.0.0.1:4000``)::"

#: ../../deploying/wsgi-standalone.rst:24
msgid ""
"The ``gunicorn`` command expects the names of your application module or "
"package and the application instance within the module. If you use the "
"application factory pattern, you can pass a call to that::"
msgstr ""
"El comando ``gunicorn`` espera los nombres de su módulo o paquete de "
"aplicación y la instancia de aplicación dentro del módulo. Si utilizas el "
"patrón de fábrica de aplicaciones, puedes pasar una llamada a ese::"

#: ../../deploying/wsgi-standalone.rst:37
msgid ""
"`uWSGI`_ is a fast application server written in C. It is very configurable "
"which makes it more complicated to setup than gunicorn."
msgstr ""
"`uWSGI`_ es un servidor de aplicaciones rápido escrito en C. Es muy "
"configurable lo que hace que sea más complicado de configurar que gunicorn."

#: ../../deploying/wsgi-standalone.rst:40
msgid "Running `uWSGI HTTP Router`_::"
msgstr "Ejecutando `uWSGI HTTP Router`_::"

#: ../../deploying/wsgi-standalone.rst:44
msgid ""
"For a more optimized setup, see :doc:`configuring uWSGI and NGINX <uwsgi>`."
msgstr ""
"Para una configuración más optimizada, véase :doc:`configuración de uWSGI y "
"NGINX <uwsgi>`."

#: ../../deploying/wsgi-standalone.rst:50
msgid "Gevent"
msgstr "Gevent"

#: ../../deploying/wsgi-standalone.rst:52
msgid ""
"`Gevent`_ is a coroutine-based Python networking library that uses `greenlet`_ "
"to provide a high-level synchronous API on top of `libev`_ event loop::"
msgstr ""
"`Gevent`_ es una biblioteca de red de Python basada en coroutinas que utiliza "
"`greenlet`_ para proporcionar una API sincrónica de alto nivel sobre el bucle "
"de eventos de `libev`_::"

#: ../../deploying/wsgi-standalone.rst:67
msgid "Twisted Web"
msgstr "Twisted Web"

#: ../../deploying/wsgi-standalone.rst:69
msgid ""
"`Twisted Web`_ is the web server shipped with `Twisted`_, a mature, non-"
"blocking event-driven networking library. Twisted Web comes with a standard "
"WSGI container which can be controlled from the command line using the "
"``twistd`` utility::"
msgstr ""
"`Twisted Web`_ es el servidor web que se entrega con `Twisted`_, una "
"biblioteca de red madura, no bloqueante y dirigida por eventos. Twisted Web "
"viene con un contenedor WSGI estándar que puede ser controlado desde la línea "
"de comandos utilizando la utilidad ``twistd``::"

#: ../../deploying/wsgi-standalone.rst:76
msgid ""
"This example will run a Flask application called ``app`` from a module named "
"``myproject``."
msgstr ""
"Este ejemplo ejecutará una aplicación Flask llamada ``app`` desde un módulo "
"llamado ``miproyecto``."

#: ../../deploying/wsgi-standalone.rst:79
msgid ""
"Twisted Web supports many flags and options, and the ``twistd`` utility does "
"as well; see ``twistd -h`` and ``twistd web -h`` for more information. For "
"example, to run a Twisted Web server in the foreground, on port 8080, with an "
"application from ``myproject``::"
msgstr ""
"Twisted Web soporta muchas banderas y opciones, y la utilidad ``twistd`` "
"también lo hace; vea ``twistd -h`` y ``twistd web -h`` para más información. "
"Por ejemplo, para ejecutar un servidor Twisted Web en primer plano, en el "
"puerto 8080, con una aplicación de ``miproyecto``::"

#: ../../deploying/wsgi-standalone.rst:92
msgid "Proxy Setups"
msgstr "Configuraciones de proxy"

#: ../../deploying/wsgi-standalone.rst:94
msgid ""
"If you deploy your application using one of these servers behind an HTTP proxy "
"you will need to rewrite a few headers in order for the application to work. "
"The two problematic values in the WSGI environment usually are ``REMOTE_ADDR`` "
"and ``HTTP_HOST``.  You can configure your httpd to pass these headers, or you "
"can fix them in middleware.  Werkzeug ships a fixer that will solve some "
"common setups, but you might want to write your own WSGI middleware for "
"specific setups."
msgstr ""
"Si despliegas tu aplicación usando uno de estos servidores detrás de un proxy "
"HTTP necesitarás reescribir algunas cabeceras para que la aplicación funcione. "
"Los dos valores problemáticos en el entorno WSGI suelen ser ``REMOTE_ADDR`` y "
"``HTTP_HOST``.  Puedes configurar tu httpd para pasar estas cabeceras, o "
"puedes arreglarlas en el middleware.  Werkzeug incluye un solucionador que "
"resolverá algunas configuraciones comunes, pero puede que quieras escribir tu "
"propio middleware WSGI para configuraciones específicas."

#: ../../deploying/wsgi-standalone.rst:102
msgid ""
"Here's a simple nginx configuration which proxies to an application served on "
"localhost at port 8000, setting appropriate headers:"
msgstr ""
"Aquí hay una configuración simple de nginx que hace proxy a una aplicación "
"servida en localhost en el puerto 8000, estableciendo las cabeceras apropiadas:"

#: ../../deploying/wsgi-standalone.rst:126
msgid ""
"If your httpd is not providing these headers, the most common setup invokes "
"the host being set from ``X-Forwarded-Host`` and the remote address from ``X-"
"Forwarded-For``::"
msgstr ""
"Si su httpd no proporciona estas cabeceras, la configuración más común invoca "
"el host que se establece desde ``X-Forwarded-Host`` y la dirección remota "
"desde ``X-Forwarded-For``::"

#: ../../deploying/wsgi-standalone.rst:133
msgid "Trusting Headers"
msgstr "Confiar en las cabeceras"

#: ../../deploying/wsgi-standalone.rst:135
msgid ""
"Please keep in mind that it is a security issue to use such a middleware in a "
"non-proxy setup because it will blindly trust the incoming headers which might "
"be forged by malicious clients."
msgstr ""
"Por favor, tenga en cuenta que es un problema de seguridad utilizar un "
"middleware de este tipo en una configuración sin proxy porque confiará "
"ciegamente en las cabeceras entrantes que podrían ser falsificadas por "
"clientes maliciosos."

#: ../../deploying/wsgi-standalone.rst:139
msgid ""
"If you want to rewrite the headers from another header, you might want to use "
"a fixer like this::"
msgstr ""
"Si quiere reescribir las cabeceras desde otra cabecera, puede utilizar un "
"fijador como este::"
